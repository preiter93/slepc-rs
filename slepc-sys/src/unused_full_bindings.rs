/* automatically generated by rust-bindgen 0.55.1 */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
pub const SLEPC_PETSC_DIR: &'static [u8; 33usize] = b"/home/preiter/local/petsc-3.16.4\0";
pub const SLEPC_PETSC_ARCH: &'static [u8; 24usize] = b"linux-gnu-complex-debug\0";
pub const SLEPC_DIR: &'static [u8; 33usize] = b"/home/preiter/local/slepc-3.16.2\0";
pub const SLEPC_LIB_DIR: &'static [u8; 61usize] =
    b"/home/preiter/local/slepc-3.16.2/linux-gnu-complex-debug/lib\0";
pub const SLEPC_MISSING_LAPACK_GGSVD3: u32 = 1;
pub const SLEPC_HAVE_PACKAGES: &'static [u8; 2usize] = b":\0";
pub const PETSC_ARCH: &'static [u8; 24usize] = b"linux-gnu-complex-debug\0";
pub const PETSC_BLASLAPACK_UNDERSCORE: u32 = 1;
pub const PETSC_CLANGUAGE_C: u32 = 1;
pub const PETSC_DIR: &'static [u8; 33usize] = b"/home/preiter/local/petsc-3.16.4\0";
pub const PETSC_DIR_SEPARATOR: u8 = 47u8;
pub const PETSC_HAVE_ACCESS: u32 = 1;
pub const PETSC_HAVE_ATOLL: u32 = 1;
pub const PETSC_HAVE_ATTRIBUTEALIGNED: u32 = 1;
pub const PETSC_HAVE_BUILTIN_EXPECT: u32 = 1;
pub const PETSC_HAVE_BZERO: u32 = 1;
pub const PETSC_HAVE_C99_COMPLEX: u32 = 1;
pub const PETSC_HAVE_CLOCK: u32 = 1;
pub const PETSC_HAVE_CXX: u32 = 1;
pub const PETSC_HAVE_CXX_COMPLEX: u32 = 1;
pub const PETSC_HAVE_CXX_COMPLEX_FIX: u32 = 1;
pub const PETSC_HAVE_CXX_DIALECT_CXX03: u32 = 1;
pub const PETSC_HAVE_CXX_DIALECT_CXX11: u32 = 1;
pub const PETSC_HAVE_CXX_DIALECT_CXX14: u32 = 1;
pub const PETSC_HAVE_CXX_DIALECT_CXX17: u32 = 1;
pub const PETSC_HAVE_DLADDR: u32 = 1;
pub const PETSC_HAVE_DLCLOSE: u32 = 1;
pub const PETSC_HAVE_DLERROR: u32 = 1;
pub const PETSC_HAVE_DLFCN_H: u32 = 1;
pub const PETSC_HAVE_DLOPEN: u32 = 1;
pub const PETSC_HAVE_DLSYM: u32 = 1;
pub const PETSC_HAVE_DOUBLE_ALIGN_MALLOC: u32 = 1;
pub const PETSC_HAVE_DRAND48: u32 = 1;
pub const PETSC_HAVE_DYNAMIC_LIBRARIES: u32 = 1;
pub const PETSC_HAVE_ERF: u32 = 1;
pub const PETSC_HAVE_F2CBLASLAPACK: u32 = 1;
pub const PETSC_HAVE_FCNTL_H: u32 = 1;
pub const PETSC_HAVE_FENV_H: u32 = 1;
pub const PETSC_HAVE_FLOAT_H: u32 = 1;
pub const PETSC_HAVE_FORK: u32 = 1;
pub const PETSC_HAVE_GETCWD: u32 = 1;
pub const PETSC_HAVE_GETDOMAINNAME: u32 = 1;
pub const PETSC_HAVE_GETHOSTBYNAME: u32 = 1;
pub const PETSC_HAVE_GETHOSTNAME: u32 = 1;
pub const PETSC_HAVE_GETPAGESIZE: u32 = 1;
pub const PETSC_HAVE_GETRUSAGE: u32 = 1;
pub const PETSC_HAVE_IMMINTRIN_H: u32 = 1;
pub const PETSC_HAVE_INTTYPES_H: u32 = 1;
pub const PETSC_HAVE_ISINF: u32 = 1;
pub const PETSC_HAVE_ISNAN: u32 = 1;
pub const PETSC_HAVE_ISNORMAL: u32 = 1;
pub const PETSC_HAVE_LGAMMA: u32 = 1;
pub const PETSC_HAVE_LOG2: u32 = 1;
pub const PETSC_HAVE_LSEEK: u32 = 1;
pub const PETSC_HAVE_MALLOC_H: u32 = 1;
pub const PETSC_HAVE_MEMALIGN: u32 = 1;
pub const PETSC_HAVE_MEMMOVE: u32 = 1;
pub const PETSC_HAVE_MMAP: u32 = 1;
pub const PETSC_HAVE_MPIIO: u32 = 1;
pub const PETSC_HAVE_MPI_COMBINER_CONTIGUOUS: u32 = 1;
pub const PETSC_HAVE_MPI_COMBINER_DUP: u32 = 1;
pub const PETSC_HAVE_MPI_COMBINER_NAMED: u32 = 1;
pub const PETSC_HAVE_MPI_EXSCAN: u32 = 1;
pub const PETSC_HAVE_MPI_F90MODULE_VISIBILITY: u32 = 1;
pub const PETSC_HAVE_MPI_FEATURE_DYNAMIC_WINDOW: u32 = 1;
pub const PETSC_HAVE_MPI_FINALIZED: u32 = 1;
pub const PETSC_HAVE_MPI_GET_ACCUMULATE: u32 = 1;
pub const PETSC_HAVE_MPI_GET_LIBRARY_VERSION: u32 = 1;
pub const PETSC_HAVE_MPI_IALLREDUCE: u32 = 1;
pub const PETSC_HAVE_MPI_IBARRIER: u32 = 1;
pub const PETSC_HAVE_MPI_INIT_THREAD: u32 = 1;
pub const PETSC_HAVE_MPI_INT64_T: u32 = 1;
pub const PETSC_HAVE_MPI_IN_PLACE: u32 = 1;
pub const PETSC_HAVE_MPI_LONG_DOUBLE: u32 = 1;
pub const PETSC_HAVE_MPI_NEIGHBORHOOD_COLLECTIVES: u32 = 1;
pub const PETSC_HAVE_MPI_NONBLOCKING_COLLECTIVES: u32 = 1;
pub const PETSC_HAVE_MPI_ONE_SIDED: u32 = 1;
pub const PETSC_HAVE_MPI_PROCESS_SHARED_MEMORY: u32 = 1;
pub const PETSC_HAVE_MPI_REDUCE_LOCAL: u32 = 1;
pub const PETSC_HAVE_MPI_REDUCE_SCATTER: u32 = 1;
pub const PETSC_HAVE_MPI_REDUCE_SCATTER_BLOCK: u32 = 1;
pub const PETSC_HAVE_MPI_RGET: u32 = 1;
pub const PETSC_HAVE_MPI_TYPE_DUP: u32 = 1;
pub const PETSC_HAVE_MPI_TYPE_GET_ENVELOPE: u32 = 1;
pub const PETSC_HAVE_MPI_WIN_CREATE: u32 = 1;
pub const PETSC_HAVE_NANOSLEEP: u32 = 1;
pub const PETSC_HAVE_NETDB_H: u32 = 1;
pub const PETSC_HAVE_NETINET_IN_H: u32 = 1;
pub const PETSC_HAVE_OMPI_MAJOR_VERSION: u32 = 4;
pub const PETSC_HAVE_OMPI_MINOR_VERSION: u32 = 0;
pub const PETSC_HAVE_OMPI_RELEASE_VERSION: u32 = 3;
pub const PETSC_HAVE_PACKAGES: &'static [u8; 57usize] =
    b":blaslapack:f2cblaslapack:mathlib:mpi:pthread:regex:x11:\0";
pub const PETSC_HAVE_POPEN: u32 = 1;
pub const PETSC_HAVE_PTHREAD: u32 = 1;
pub const PETSC_HAVE_PTHREAD_BARRIER_T: u32 = 1;
pub const PETSC_HAVE_PTHREAD_H: u32 = 1;
pub const PETSC_HAVE_PWD_H: u32 = 1;
pub const PETSC_HAVE_RAND: u32 = 1;
pub const PETSC_HAVE_READLINK: u32 = 1;
pub const PETSC_HAVE_REALPATH: u32 = 1;
pub const PETSC_HAVE_REAL___FLOAT128: u32 = 1;
pub const PETSC_HAVE_REGEX: u32 = 1;
pub const PETSC_HAVE_RTLD_GLOBAL: u32 = 1;
pub const PETSC_HAVE_RTLD_LAZY: u32 = 1;
pub const PETSC_HAVE_RTLD_LOCAL: u32 = 1;
pub const PETSC_HAVE_RTLD_NOW: u32 = 1;
pub const PETSC_HAVE_SCHED_CPU_SET_T: u32 = 1;
pub const PETSC_HAVE_SETJMP_H: u32 = 1;
pub const PETSC_HAVE_SLEEP: u32 = 1;
pub const PETSC_HAVE_SNPRINTF: u32 = 1;
pub const PETSC_HAVE_SOCKET: u32 = 1;
pub const PETSC_HAVE_SO_REUSEADDR: u32 = 1;
pub const PETSC_HAVE_STDINT_H: u32 = 1;
pub const PETSC_HAVE_STRCASECMP: u32 = 1;
pub const PETSC_HAVE_STRINGS_H: u32 = 1;
pub const PETSC_HAVE_STRUCT_SIGACTION: u32 = 1;
pub const PETSC_HAVE_SYSINFO: u32 = 1;
pub const PETSC_HAVE_SYS_PARAM_H: u32 = 1;
pub const PETSC_HAVE_SYS_PROCFS_H: u32 = 1;
pub const PETSC_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const PETSC_HAVE_SYS_SOCKET_H: u32 = 1;
pub const PETSC_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const PETSC_HAVE_SYS_TIMES_H: u32 = 1;
pub const PETSC_HAVE_SYS_TIME_H: u32 = 1;
pub const PETSC_HAVE_SYS_TYPES_H: u32 = 1;
pub const PETSC_HAVE_SYS_UTSNAME_H: u32 = 1;
pub const PETSC_HAVE_SYS_WAIT_H: u32 = 1;
pub const PETSC_HAVE_TGAMMA: u32 = 1;
pub const PETSC_HAVE_TIME: u32 = 1;
pub const PETSC_HAVE_TIME_H: u32 = 1;
pub const PETSC_HAVE_UNAME: u32 = 1;
pub const PETSC_HAVE_UNISTD_H: u32 = 1;
pub const PETSC_HAVE_USLEEP: u32 = 1;
pub const PETSC_HAVE_VA_COPY: u32 = 1;
pub const PETSC_HAVE_VSNPRINTF: u32 = 1;
pub const PETSC_HAVE_X: u32 = 1;
pub const PETSC_HAVE_XMMINTRIN_H: u32 = 1;
pub const PETSC_LEVEL1_DCACHE_LINESIZE: u32 = 64;
pub const PETSC_LIB_DIR: &'static [u8; 61usize] =
    b"/home/preiter/local/petsc-3.16.4/linux-gnu-complex-debug/lib\0";
pub const PETSC_MAX_PATH_LEN: u32 = 4096;
pub const PETSC_MEMALIGN: u32 = 16;
pub const PETSC_MPICC_SHOW : & 'static [u8 ; 155usize] = b"gcc -I/usr/lib/x86_64-linux-gnu/openmpi/include/openmpi -I/usr/lib/x86_64-linux-gnu/openmpi/include -pthread -L/usr/lib/x86_64-linux-gnu/openmpi/lib -lmpi\0" ;
pub const PETSC_PYTHON_EXE: &'static [u8; 30usize] = b"/usr/ds/anaconda3/bin/python3\0";
pub const PETSC_REPLACE_DIR_SEPARATOR: u8 = 92u8;
pub const PETSC_SIZEOF_ENUM: u32 = 4;
pub const PETSC_SIZEOF_INT: u32 = 4;
pub const PETSC_SIZEOF_LONG: u32 = 8;
pub const PETSC_SIZEOF_LONG_LONG: u32 = 8;
pub const PETSC_SIZEOF_SHORT: u32 = 2;
pub const PETSC_SIZEOF_SIZE_T: u32 = 8;
pub const PETSC_SIZEOF_VOID_P: u32 = 8;
pub const PETSC_SLSUFFIX: &'static [u8; 3usize] = b"so\0";
pub const PETSC_USE_AVX512_KERNELS: u32 = 1;
pub const PETSC_USE_BACKWARD_LOOP: u32 = 1;
pub const PETSC_USE_COMPLEX: u32 = 1;
pub const PETSC_USE_CTABLE: u32 = 1;
pub const PETSC_USE_DEBUG: u32 = 1;
pub const PETSC_USE_DEBUGGER: &'static [u8; 4usize] = b"gdb\0";
pub const PETSC_USE_INFO: u32 = 1;
pub const PETSC_USE_ISATTY: u32 = 1;
pub const PETSC_USE_LOG: u32 = 1;
pub const PETSC_USE_PROC_FOR_SIZE: u32 = 1;
pub const PETSC_USE_REAL_DOUBLE: u32 = 1;
pub const PETSC_USE_SHARED_LIBRARIES: u32 = 1;
pub const PETSC_USE_SINGLE_LIBRARY: u32 = 1;
pub const PETSC_USE_SOCKET_VIEWER: u32 = 1;
pub const PETSC_USE_VISIBILITY_C: u32 = 1;
pub const PETSC_USE_VISIBILITY_CXX: u32 = 1;
pub const PETSC_USING_64BIT_PTR: u32 = 1;
pub const PETSC__BSD_SOURCE: u32 = 1;
pub const PETSC__DEFAULT_SOURCE: u32 = 1;
pub const PETSC__GNU_SOURCE: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PETSC_HAVE_COMPLEX: u32 = 1;
pub const _COMPLEX_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const PETSC_BINARY_INT_SIZE: u32 = 4;
pub const PETSC_BINARY_FLOAT_SIZE: u32 = 4;
pub const PETSC_BINARY_CHAR_SIZE: u32 = 1;
pub const PETSC_BINARY_SHORT_SIZE: u32 = 2;
pub const PETSC_BINARY_DOUBLE_SIZE: u32 = 8;
pub const PETSC_VERSION_RELEASE: u32 = 1;
pub const PETSC_VERSION_MAJOR: u32 = 3;
pub const PETSC_VERSION_MINOR: u32 = 16;
pub const PETSC_VERSION_SUBMINOR: u32 = 4;
pub const PETSC_VERSION_PATCH: u32 = 0;
pub const PETSC_RELEASE_DATE: &'static [u8; 13usize] = b"Sep 29, 2021\0";
pub const PETSC_VERSION_DATE: &'static [u8; 13usize] = b"Feb 02, 2022\0";
pub const PETSC_VERSION_GIT: &'static [u8; 8usize] = b"v3.16.4\0";
pub const PETSC_VERSION_DATE_GIT: &'static [u8; 26usize] = b"2022-02-02 10:39:57 -0600\0";
pub const PETSC_AUTHOR_INFO: &'static [u8; 71usize] =
    b"       The PETSc Team\n    petsc-maint@mcs.anl.gov\n https://petsc.org/\n\0";
pub const MPICH_SKIP_MPICXX: u32 = 1;
pub const OMPI_SKIP_MPICXX: u32 = 1;
pub const OPAL_BUILD_PLATFORM_COMPILER_FAMILYID: u32 = 1;
pub const OPAL_BUILD_PLATFORM_COMPILER_VERSION: u32 = 590592;
pub const OPAL_STDC_HEADERS: u32 = 1;
pub const OPAL_HAVE_ATTRIBUTE_DEPRECATED: u32 = 1;
pub const OPAL_HAVE_ATTRIBUTE_DEPRECATED_ARGUMENT: u32 = 1;
pub const OPAL_HAVE_ATTRIBUTE_ERROR: u32 = 1;
pub const OPAL_HAVE_SYS_TIME_H: u32 = 1;
pub const OPAL_HAVE_LONG_LONG: u32 = 1;
pub const OPAL_MAX_DATAREP_STRING: u32 = 128;
pub const OPAL_MAX_ERROR_STRING: u32 = 256;
pub const OPAL_MAX_INFO_KEY: u32 = 36;
pub const OPAL_MAX_INFO_VAL: u32 = 256;
pub const OPAL_MAX_OBJECT_NAME: u32 = 64;
pub const OPAL_MAX_PORT_NAME: u32 = 1024;
pub const OPAL_MAX_PROCESSOR_NAME: u32 = 256;
pub const OMPI_HAVE_FORTRAN_LOGICAL1: u32 = 1;
pub const OMPI_HAVE_FORTRAN_LOGICAL2: u32 = 1;
pub const OMPI_HAVE_FORTRAN_LOGICAL4: u32 = 1;
pub const OMPI_HAVE_FORTRAN_LOGICAL8: u32 = 1;
pub const OMPI_HAVE_FORTRAN_INTEGER1: u32 = 1;
pub const OMPI_HAVE_FORTRAN_INTEGER16: u32 = 0;
pub const OMPI_HAVE_FORTRAN_INTEGER2: u32 = 1;
pub const OMPI_HAVE_FORTRAN_INTEGER4: u32 = 1;
pub const OMPI_HAVE_FORTRAN_INTEGER8: u32 = 1;
pub const OMPI_HAVE_FORTRAN_REAL16: u32 = 1;
pub const OMPI_HAVE_FORTRAN_REAL2: u32 = 0;
pub const OMPI_HAVE_FORTRAN_REAL4: u32 = 1;
pub const OMPI_HAVE_FORTRAN_REAL8: u32 = 1;
pub const OMPI_ENABLE_MPI1_COMPAT: u32 = 0;
pub const HAVE_FLOAT__COMPLEX: u32 = 1;
pub const HAVE_DOUBLE__COMPLEX: u32 = 1;
pub const HAVE_LONG_DOUBLE__COMPLEX: u32 = 1;
pub const OMPI_MPI_OFFSET_SIZE: u32 = 8;
pub const OMPI_BUILD_CXX_BINDINGS: u32 = 1;
pub const OMPI_WANT_MPI_CXX_SEEK: u32 = 1;
pub const OMPI_CXX_SUPPORTS_2D_CONST_CAST: u32 = 1;
pub const OMPI_PARAM_CHECK: u32 = 1;
pub const OMPI_WANT_MPI_INTERFACE_WARNING: u32 = 1;
pub const OMPI_HAVE_CXX_EXCEPTION_SUPPORT: u32 = 0;
pub const OMPI_MAJOR_VERSION: u32 = 4;
pub const OMPI_MINOR_VERSION: u32 = 0;
pub const OMPI_RELEASE_VERSION: u32 = 3;
pub const OPAL_C_HAVE_VISIBILITY: u32 = 1;
pub const OMPI_BUILDING: u32 = 0;
pub const OPEN_MPI: u32 = 1;
pub const MPI_VERSION: u32 = 3;
pub const MPI_SUBVERSION: u32 = 1;
pub const PLATFORM_COMPILER_UNKNOWN: u32 = 1;
pub const PLATFORM_COMPILER_GNU: u32 = 1;
pub const PLATFORM_COMPILER_FAMILYID: u32 = 1;
pub const PLATFORM_COMPILER_GNU_C: u32 = 1;
pub const OMPI_REMOVED_USE_STATIC_ASSERT: u32 = 0;
pub const MPI_ANY_SOURCE: i32 = -1;
pub const MPI_PROC_NULL: i32 = -2;
pub const MPI_ROOT: i32 = -4;
pub const MPI_ANY_TAG: i32 = -1;
pub const MPI_MAX_PROCESSOR_NAME: u32 = 256;
pub const MPI_MAX_ERROR_STRING: u32 = 256;
pub const MPI_MAX_OBJECT_NAME: u32 = 64;
pub const MPI_MAX_LIBRARY_VERSION_STRING: u32 = 256;
pub const MPI_UNDEFINED: i32 = -32766;
pub const MPI_DIST_GRAPH: u32 = 3;
pub const MPI_CART: u32 = 1;
pub const MPI_GRAPH: u32 = 2;
pub const MPI_KEYVAL_INVALID: i32 = -1;
pub const MPI_BSEND_OVERHEAD: u32 = 128;
pub const MPI_MAX_INFO_KEY: u32 = 36;
pub const MPI_MAX_INFO_VAL: u32 = 256;
pub const MPI_MAX_PORT_NAME: u32 = 1024;
pub const MPI_ORDER_C: u32 = 0;
pub const MPI_ORDER_FORTRAN: u32 = 1;
pub const MPI_DISTRIBUTE_BLOCK: u32 = 0;
pub const MPI_DISTRIBUTE_CYCLIC: u32 = 1;
pub const MPI_DISTRIBUTE_NONE: u32 = 2;
pub const MPI_DISTRIBUTE_DFLT_DARG: i32 = -1;
pub const MPI_MODE_CREATE: u32 = 1;
pub const MPI_MODE_RDONLY: u32 = 2;
pub const MPI_MODE_WRONLY: u32 = 4;
pub const MPI_MODE_RDWR: u32 = 8;
pub const MPI_MODE_DELETE_ON_CLOSE: u32 = 16;
pub const MPI_MODE_UNIQUE_OPEN: u32 = 32;
pub const MPI_MODE_EXCL: u32 = 64;
pub const MPI_MODE_APPEND: u32 = 128;
pub const MPI_MODE_SEQUENTIAL: u32 = 256;
pub const MPI_DISPLACEMENT_CURRENT: i32 = -54278278;
pub const MPI_SEEK_SET: u32 = 600;
pub const MPI_SEEK_CUR: u32 = 602;
pub const MPI_SEEK_END: u32 = 604;
pub const MPI_MAX_DATAREP_STRING: u32 = 128;
pub const MPI_MODE_NOCHECK: u32 = 1;
pub const MPI_MODE_NOPRECEDE: u32 = 2;
pub const MPI_MODE_NOPUT: u32 = 4;
pub const MPI_MODE_NOSTORE: u32 = 8;
pub const MPI_MODE_NOSUCCEED: u32 = 16;
pub const MPI_LOCK_EXCLUSIVE: u32 = 1;
pub const MPI_LOCK_SHARED: u32 = 2;
pub const MPI_WIN_FLAVOR_CREATE: u32 = 1;
pub const MPI_WIN_FLAVOR_ALLOCATE: u32 = 2;
pub const MPI_WIN_FLAVOR_DYNAMIC: u32 = 3;
pub const MPI_WIN_FLAVOR_SHARED: u32 = 4;
pub const MPI_WIN_UNIFIED: u32 = 0;
pub const MPI_WIN_SEPARATE: u32 = 1;
pub const MPI_SUCCESS: u32 = 0;
pub const MPI_ERR_BUFFER: u32 = 1;
pub const MPI_ERR_COUNT: u32 = 2;
pub const MPI_ERR_TYPE: u32 = 3;
pub const MPI_ERR_TAG: u32 = 4;
pub const MPI_ERR_COMM: u32 = 5;
pub const MPI_ERR_RANK: u32 = 6;
pub const MPI_ERR_REQUEST: u32 = 7;
pub const MPI_ERR_ROOT: u32 = 8;
pub const MPI_ERR_GROUP: u32 = 9;
pub const MPI_ERR_OP: u32 = 10;
pub const MPI_ERR_TOPOLOGY: u32 = 11;
pub const MPI_ERR_DIMS: u32 = 12;
pub const MPI_ERR_ARG: u32 = 13;
pub const MPI_ERR_UNKNOWN: u32 = 14;
pub const MPI_ERR_TRUNCATE: u32 = 15;
pub const MPI_ERR_OTHER: u32 = 16;
pub const MPI_ERR_INTERN: u32 = 17;
pub const MPI_ERR_IN_STATUS: u32 = 18;
pub const MPI_ERR_PENDING: u32 = 19;
pub const MPI_ERR_ACCESS: u32 = 20;
pub const MPI_ERR_AMODE: u32 = 21;
pub const MPI_ERR_ASSERT: u32 = 22;
pub const MPI_ERR_BAD_FILE: u32 = 23;
pub const MPI_ERR_BASE: u32 = 24;
pub const MPI_ERR_CONVERSION: u32 = 25;
pub const MPI_ERR_DISP: u32 = 26;
pub const MPI_ERR_DUP_DATAREP: u32 = 27;
pub const MPI_ERR_FILE_EXISTS: u32 = 28;
pub const MPI_ERR_FILE_IN_USE: u32 = 29;
pub const MPI_ERR_FILE: u32 = 30;
pub const MPI_ERR_INFO_KEY: u32 = 31;
pub const MPI_ERR_INFO_NOKEY: u32 = 32;
pub const MPI_ERR_INFO_VALUE: u32 = 33;
pub const MPI_ERR_INFO: u32 = 34;
pub const MPI_ERR_IO: u32 = 35;
pub const MPI_ERR_KEYVAL: u32 = 36;
pub const MPI_ERR_LOCKTYPE: u32 = 37;
pub const MPI_ERR_NAME: u32 = 38;
pub const MPI_ERR_NO_MEM: u32 = 39;
pub const MPI_ERR_NOT_SAME: u32 = 40;
pub const MPI_ERR_NO_SPACE: u32 = 41;
pub const MPI_ERR_NO_SUCH_FILE: u32 = 42;
pub const MPI_ERR_PORT: u32 = 43;
pub const MPI_ERR_QUOTA: u32 = 44;
pub const MPI_ERR_READ_ONLY: u32 = 45;
pub const MPI_ERR_RMA_CONFLICT: u32 = 46;
pub const MPI_ERR_RMA_SYNC: u32 = 47;
pub const MPI_ERR_SERVICE: u32 = 48;
pub const MPI_ERR_SIZE: u32 = 49;
pub const MPI_ERR_SPAWN: u32 = 50;
pub const MPI_ERR_UNSUPPORTED_DATAREP: u32 = 51;
pub const MPI_ERR_UNSUPPORTED_OPERATION: u32 = 52;
pub const MPI_ERR_WIN: u32 = 53;
pub const MPI_T_ERR_MEMORY: u32 = 54;
pub const MPI_T_ERR_NOT_INITIALIZED: u32 = 55;
pub const MPI_T_ERR_CANNOT_INIT: u32 = 56;
pub const MPI_T_ERR_INVALID_INDEX: u32 = 57;
pub const MPI_T_ERR_INVALID_ITEM: u32 = 58;
pub const MPI_T_ERR_INVALID_HANDLE: u32 = 59;
pub const MPI_T_ERR_OUT_OF_HANDLES: u32 = 60;
pub const MPI_T_ERR_OUT_OF_SESSIONS: u32 = 61;
pub const MPI_T_ERR_INVALID_SESSION: u32 = 62;
pub const MPI_T_ERR_CVAR_SET_NOT_NOW: u32 = 63;
pub const MPI_T_ERR_CVAR_SET_NEVER: u32 = 64;
pub const MPI_T_ERR_PVAR_NO_STARTSTOP: u32 = 65;
pub const MPI_T_ERR_PVAR_NO_WRITE: u32 = 66;
pub const MPI_T_ERR_PVAR_NO_ATOMIC: u32 = 67;
pub const MPI_ERR_RMA_RANGE: u32 = 68;
pub const MPI_ERR_RMA_ATTACH: u32 = 69;
pub const MPI_ERR_RMA_FLAVOR: u32 = 70;
pub const MPI_ERR_RMA_SHARED: u32 = 71;
pub const MPI_T_ERR_INVALID: u32 = 72;
pub const MPI_T_ERR_INVALID_NAME: u32 = 73;
pub const MPI_ERR_LASTCODE: u32 = 92;
pub const MPI_TYPECLASS_INTEGER: u32 = 1;
pub const MPI_TYPECLASS_REAL: u32 = 2;
pub const MPI_TYPECLASS_COMPLEX: u32 = 3;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const PetscInt64_FMT: &'static [u8; 3usize] = b"ld\0";
pub const PetscInt_FMT: &'static [u8; 2usize] = b"d\0";
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const PETSC_MAX_INT: u32 = 2147483647;
pub const PETSC_MIN_INT: i32 = -2147483648;
pub const PETSC_MAX_UINT16: u32 = 65535;
pub const PETSC_DECIDE: i32 = -1;
pub const PETSC_DETERMINE: i32 = -1;
pub const PETSC_DEFAULT: i32 = -2;
pub const PETSC_ERR_MIN_VALUE: u32 = 54;
pub const PETSC_ERR_MEM: u32 = 55;
pub const PETSC_ERR_SUP: u32 = 56;
pub const PETSC_ERR_SUP_SYS: u32 = 57;
pub const PETSC_ERR_ORDER: u32 = 58;
pub const PETSC_ERR_SIG: u32 = 59;
pub const PETSC_ERR_FP: u32 = 72;
pub const PETSC_ERR_COR: u32 = 74;
pub const PETSC_ERR_LIB: u32 = 76;
pub const PETSC_ERR_PLIB: u32 = 77;
pub const PETSC_ERR_MEMC: u32 = 78;
pub const PETSC_ERR_CONV_FAILED: u32 = 82;
pub const PETSC_ERR_USER: u32 = 83;
pub const PETSC_ERR_SYS: u32 = 88;
pub const PETSC_ERR_POINTER: u32 = 70;
pub const PETSC_ERR_MPI_LIB_INCOMP: u32 = 87;
pub const PETSC_ERR_ARG_SIZ: u32 = 60;
pub const PETSC_ERR_ARG_IDN: u32 = 61;
pub const PETSC_ERR_ARG_WRONG: u32 = 62;
pub const PETSC_ERR_ARG_CORRUPT: u32 = 64;
pub const PETSC_ERR_ARG_OUTOFRANGE: u32 = 63;
pub const PETSC_ERR_ARG_BADPTR: u32 = 68;
pub const PETSC_ERR_ARG_NOTSAMETYPE: u32 = 69;
pub const PETSC_ERR_ARG_NOTSAMECOMM: u32 = 80;
pub const PETSC_ERR_ARG_WRONGSTATE: u32 = 73;
pub const PETSC_ERR_ARG_TYPENOTSET: u32 = 89;
pub const PETSC_ERR_ARG_INCOMP: u32 = 75;
pub const PETSC_ERR_ARG_NULL: u32 = 85;
pub const PETSC_ERR_ARG_UNKNOWN_TYPE: u32 = 86;
pub const PETSC_ERR_FILE_OPEN: u32 = 65;
pub const PETSC_ERR_FILE_READ: u32 = 66;
pub const PETSC_ERR_FILE_WRITE: u32 = 67;
pub const PETSC_ERR_FILE_UNEXPECTED: u32 = 79;
pub const PETSC_ERR_MAT_LU_ZRPVT: u32 = 71;
pub const PETSC_ERR_MAT_CH_ZRPVT: u32 = 81;
pub const PETSC_ERR_INT_OVERFLOW: u32 = 84;
pub const PETSC_ERR_FLOP_COUNT: u32 = 90;
pub const PETSC_ERR_NOT_CONVERGED: u32 = 91;
pub const PETSC_ERR_MISSING_FACTOR: u32 = 92;
pub const PETSC_ERR_OPT_OVERWRITE: u32 = 93;
pub const PETSC_ERR_WRONG_MPI_SIZE: u32 = 94;
pub const PETSC_ERR_USER_INPUT: u32 = 95;
pub const PETSC_ERR_GPU_RESOURCE: u32 = 96;
pub const PETSC_ERR_GPU: u32 = 97;
pub const PETSC_ERR_MPI: u32 = 98;
pub const PETSC_ERR_MAX_VALUE: u32 = 99;
pub const PETSCSTACKSIZE: u32 = 64;
pub const PETSC_SMALLEST_CLASSID: u32 = 1211211;
pub const PETSC_MAX_OPTION_NAME: u32 = 512;
pub const PETSC_EVENT: u32 = 1311311;
pub const PETSC_FLOPS_PER_OP: f64 = 4.0;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _MM_HINT_ET0: u32 = 7;
pub const _MM_HINT_ET1: u32 = 6;
pub const _MM_HINT_T0: u32 = 3;
pub const _MM_HINT_T1: u32 = 2;
pub const _MM_HINT_T2: u32 = 1;
pub const _MM_HINT_NTA: u32 = 0;
pub const _MM_EXCEPT_INVALID: u32 = 1;
pub const _MM_EXCEPT_DENORM: u32 = 2;
pub const _MM_EXCEPT_DIV_ZERO: u32 = 4;
pub const _MM_EXCEPT_OVERFLOW: u32 = 8;
pub const _MM_EXCEPT_UNDERFLOW: u32 = 16;
pub const _MM_EXCEPT_INEXACT: u32 = 32;
pub const _MM_EXCEPT_MASK: u32 = 63;
pub const _MM_MASK_INVALID: u32 = 128;
pub const _MM_MASK_DENORM: u32 = 256;
pub const _MM_MASK_DIV_ZERO: u32 = 512;
pub const _MM_MASK_OVERFLOW: u32 = 1024;
pub const _MM_MASK_UNDERFLOW: u32 = 2048;
pub const _MM_MASK_INEXACT: u32 = 4096;
pub const _MM_MASK_MASK: u32 = 8064;
pub const _MM_ROUND_NEAREST: u32 = 0;
pub const _MM_ROUND_DOWN: u32 = 8192;
pub const _MM_ROUND_UP: u32 = 16384;
pub const _MM_ROUND_TOWARD_ZERO: u32 = 24576;
pub const _MM_ROUND_MASK: u32 = 24576;
pub const _MM_FLUSH_ZERO_MASK: u32 = 32768;
pub const _MM_FLUSH_ZERO_ON: u32 = 32768;
pub const _MM_FLUSH_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_ON: u32 = 64;
pub const _MM_DENORMALS_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_MASK: u32 = 64;
pub const PETSC_MPI_INT_MAX: u32 = 2147483647;
pub const PETSC_MPI_INT_MIN: i32 = -2147483647;
pub const PETSC_BLAS_INT_MAX: u32 = 2147483647;
pub const PETSC_BLAS_INT_MIN: i32 = -2147483647;
pub const PETSC_CUBLAS_INT_MAX: u32 = 2147483647;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const PETSCRAND: &'static [u8; 5usize] = b"rand\0";
pub const PETSCRAND48: &'static [u8; 7usize] = b"rand48\0";
pub const PETSCSPRNG: &'static [u8; 6usize] = b"sprng\0";
pub const PETSCRANDER48: &'static [u8; 9usize] = b"rander48\0";
pub const PETSCRANDOM123: &'static [u8; 10usize] = b"random123\0";
pub const PETSCCURAND: &'static [u8; 7usize] = b"curand\0";
pub const SLEPC_VERSION_RELEASE: u32 = 1;
pub const SLEPC_VERSION_MAJOR: u32 = 3;
pub const SLEPC_VERSION_MINOR: u32 = 16;
pub const SLEPC_VERSION_SUBMINOR: u32 = 2;
pub const SLEPC_VERSION_PATCH: u32 = 0;
pub const SLEPC_RELEASE_DATE: &'static [u8; 19usize] = b"September 30, 2021\0";
pub const SLEPC_VERSION_DATE: &'static [u8; 13usize] = b"Feb 01, 2022\0";
pub const SLEPC_VERSION_GIT: &'static [u8; 8usize] = b"v3.16.2\0";
pub const SLEPC_VERSION_DATE_GIT: &'static [u8; 26usize] = b"2022-02-01 11:25:32 +0100\0";
pub const SLEPC_AUTHOR_INFO: &'static [u8; 68usize] =
    b"       The SLEPc Team\n    slepc-maint@upv.es\n https://slepc.upv.es\n\0";
pub const IS_FILE_CLASSID: u32 = 1211218;
pub const ISGENERAL: &'static [u8; 8usize] = b"general\0";
pub const ISSTRIDE: &'static [u8; 7usize] = b"stride\0";
pub const ISBLOCK: &'static [u8; 6usize] = b"block\0";
pub const ISLOCALTOGLOBALMAPPINGBASIC: &'static [u8; 6usize] = b"basic\0";
pub const ISLOCALTOGLOBALMAPPINGHASH: &'static [u8; 5usize] = b"hash\0";
pub const PETSC_DRAW_X: &'static [u8; 2usize] = b"x\0";
pub const PETSC_DRAW_NULL: &'static [u8; 5usize] = b"null\0";
pub const PETSC_DRAW_WIN32: &'static [u8; 6usize] = b"win32\0";
pub const PETSC_DRAW_TIKZ: &'static [u8; 5usize] = b"tikz\0";
pub const PETSC_DRAW_IMAGE: &'static [u8; 6usize] = b"image\0";
pub const PETSCVIEWERSOCKET: &'static [u8; 7usize] = b"socket\0";
pub const PETSCVIEWERASCII: &'static [u8; 6usize] = b"ascii\0";
pub const PETSCVIEWERBINARY: &'static [u8; 7usize] = b"binary\0";
pub const PETSCVIEWERSTRING: &'static [u8; 7usize] = b"string\0";
pub const PETSCVIEWERDRAW: &'static [u8; 5usize] = b"draw\0";
pub const PETSCVIEWERVU: &'static [u8; 3usize] = b"vu\0";
pub const PETSCVIEWERMATHEMATICA: &'static [u8; 12usize] = b"mathematica\0";
pub const PETSCVIEWERHDF5: &'static [u8; 5usize] = b"hdf5\0";
pub const PETSCVIEWERVTK: &'static [u8; 4usize] = b"vtk\0";
pub const PETSCVIEWERMATLAB: &'static [u8; 7usize] = b"matlab\0";
pub const PETSCVIEWERSAWS: &'static [u8; 5usize] = b"saws\0";
pub const PETSCVIEWERGLVIS: &'static [u8; 6usize] = b"glvis\0";
pub const PETSCVIEWERADIOS: &'static [u8; 6usize] = b"adios\0";
pub const PETSCVIEWEREXODUSII: &'static [u8; 9usize] = b"exodusii\0";
pub const VECSEQ: &'static [u8; 4usize] = b"seq\0";
pub const VECMPI: &'static [u8; 4usize] = b"mpi\0";
pub const VECSTANDARD: &'static [u8; 9usize] = b"standard\0";
pub const VECSHARED: &'static [u8; 7usize] = b"shared\0";
pub const VECSEQVIENNACL: &'static [u8; 12usize] = b"seqviennacl\0";
pub const VECMPIVIENNACL: &'static [u8; 12usize] = b"mpiviennacl\0";
pub const VECVIENNACL: &'static [u8; 9usize] = b"viennacl\0";
pub const VECSEQCUDA: &'static [u8; 8usize] = b"seqcuda\0";
pub const VECMPICUDA: &'static [u8; 8usize] = b"mpicuda\0";
pub const VECCUDA: &'static [u8; 5usize] = b"cuda\0";
pub const VECSEQHIP: &'static [u8; 7usize] = b"seqhip\0";
pub const VECMPIHIP: &'static [u8; 7usize] = b"mpihip\0";
pub const VECHIP: &'static [u8; 4usize] = b"hip\0";
pub const VECNEST: &'static [u8; 5usize] = b"nest\0";
pub const VECSEQKOKKOS: &'static [u8; 10usize] = b"seqkokkos\0";
pub const VECMPIKOKKOS: &'static [u8; 10usize] = b"mpikokkos\0";
pub const VECKOKKOS: &'static [u8; 7usize] = b"kokkos\0";
pub const REAL_FILE_CLASSID: u32 = 1211213;
pub const VEC_FILE_CLASSID: u32 = 1211214;
pub const VECTAGGERABSOLUTE: &'static [u8; 9usize] = b"absolute\0";
pub const VECTAGGERRELATIVE: &'static [u8; 9usize] = b"relative\0";
pub const VECTAGGERCDF: &'static [u8; 4usize] = b"cdf\0";
pub const VECTAGGEROR: &'static [u8; 3usize] = b"or\0";
pub const VECTAGGERAND: &'static [u8; 4usize] = b"and\0";
pub const MATSAME: &'static [u8; 5usize] = b"same\0";
pub const MATMAIJ: &'static [u8; 5usize] = b"maij\0";
pub const MATSEQMAIJ: &'static [u8; 8usize] = b"seqmaij\0";
pub const MATMPIMAIJ: &'static [u8; 8usize] = b"mpimaij\0";
pub const MATKAIJ: &'static [u8; 5usize] = b"kaij\0";
pub const MATSEQKAIJ: &'static [u8; 8usize] = b"seqkaij\0";
pub const MATMPIKAIJ: &'static [u8; 8usize] = b"mpikaij\0";
pub const MATIS: &'static [u8; 3usize] = b"is\0";
pub const MATAIJ: &'static [u8; 4usize] = b"aij\0";
pub const MATSEQAIJ: &'static [u8; 7usize] = b"seqaij\0";
pub const MATMPIAIJ: &'static [u8; 7usize] = b"mpiaij\0";
pub const MATAIJCRL: &'static [u8; 7usize] = b"aijcrl\0";
pub const MATSEQAIJCRL: &'static [u8; 10usize] = b"seqaijcrl\0";
pub const MATMPIAIJCRL: &'static [u8; 10usize] = b"mpiaijcrl\0";
pub const MATAIJCUSPARSE: &'static [u8; 12usize] = b"aijcusparse\0";
pub const MATSEQAIJCUSPARSE: &'static [u8; 15usize] = b"seqaijcusparse\0";
pub const MATMPIAIJCUSPARSE: &'static [u8; 15usize] = b"mpiaijcusparse\0";
pub const MATAIJKOKKOS: &'static [u8; 10usize] = b"aijkokkos\0";
pub const MATSEQAIJKOKKOS: &'static [u8; 13usize] = b"seqaijkokkos\0";
pub const MATMPIAIJKOKKOS: &'static [u8; 13usize] = b"mpiaijkokkos\0";
pub const MATAIJVIENNACL: &'static [u8; 12usize] = b"aijviennacl\0";
pub const MATSEQAIJVIENNACL: &'static [u8; 15usize] = b"seqaijviennacl\0";
pub const MATMPIAIJVIENNACL: &'static [u8; 15usize] = b"mpiaijviennacl\0";
pub const MATAIJPERM: &'static [u8; 8usize] = b"aijperm\0";
pub const MATSEQAIJPERM: &'static [u8; 11usize] = b"seqaijperm\0";
pub const MATMPIAIJPERM: &'static [u8; 11usize] = b"mpiaijperm\0";
pub const MATAIJSELL: &'static [u8; 8usize] = b"aijsell\0";
pub const MATSEQAIJSELL: &'static [u8; 11usize] = b"seqaijsell\0";
pub const MATMPIAIJSELL: &'static [u8; 11usize] = b"mpiaijsell\0";
pub const MATAIJMKL: &'static [u8; 7usize] = b"aijmkl\0";
pub const MATSEQAIJMKL: &'static [u8; 10usize] = b"seqaijmkl\0";
pub const MATMPIAIJMKL: &'static [u8; 10usize] = b"mpiaijmkl\0";
pub const MATBAIJMKL: &'static [u8; 8usize] = b"baijmkl\0";
pub const MATSEQBAIJMKL: &'static [u8; 11usize] = b"seqbaijmkl\0";
pub const MATMPIBAIJMKL: &'static [u8; 11usize] = b"mpibaijmkl\0";
pub const MATSHELL: &'static [u8; 6usize] = b"shell\0";
pub const MATCENTERING: &'static [u8; 10usize] = b"centering\0";
pub const MATDENSE: &'static [u8; 6usize] = b"dense\0";
pub const MATDENSECUDA: &'static [u8; 10usize] = b"densecuda\0";
pub const MATSEQDENSE: &'static [u8; 9usize] = b"seqdense\0";
pub const MATSEQDENSECUDA: &'static [u8; 13usize] = b"seqdensecuda\0";
pub const MATMPIDENSE: &'static [u8; 9usize] = b"mpidense\0";
pub const MATMPIDENSECUDA: &'static [u8; 13usize] = b"mpidensecuda\0";
pub const MATELEMENTAL: &'static [u8; 10usize] = b"elemental\0";
pub const MATSCALAPACK: &'static [u8; 10usize] = b"scalapack\0";
pub const MATBAIJ: &'static [u8; 5usize] = b"baij\0";
pub const MATSEQBAIJ: &'static [u8; 8usize] = b"seqbaij\0";
pub const MATMPIBAIJ: &'static [u8; 8usize] = b"mpibaij\0";
pub const MATMPIADJ: &'static [u8; 7usize] = b"mpiadj\0";
pub const MATSBAIJ: &'static [u8; 6usize] = b"sbaij\0";
pub const MATSEQSBAIJ: &'static [u8; 9usize] = b"seqsbaij\0";
pub const MATMPISBAIJ: &'static [u8; 9usize] = b"mpisbaij\0";
pub const MATMFFD: &'static [u8; 5usize] = b"mffd\0";
pub const MATNORMAL: &'static [u8; 7usize] = b"normal\0";
pub const MATNORMALHERMITIAN: &'static [u8; 8usize] = b"normalh\0";
pub const MATLRC: &'static [u8; 4usize] = b"lrc\0";
pub const MATSCATTER: &'static [u8; 8usize] = b"scatter\0";
pub const MATBLOCKMAT: &'static [u8; 9usize] = b"blockmat\0";
pub const MATCOMPOSITE: &'static [u8; 10usize] = b"composite\0";
pub const MATFFT: &'static [u8; 4usize] = b"fft\0";
pub const MATFFTW: &'static [u8; 5usize] = b"fftw\0";
pub const MATSEQCUFFT: &'static [u8; 9usize] = b"seqcufft\0";
pub const MATTRANSPOSEMAT: &'static [u8; 10usize] = b"transpose\0";
pub const MATSCHURCOMPLEMENT: &'static [u8; 16usize] = b"schurcomplement\0";
pub const MATPYTHON: &'static [u8; 7usize] = b"python\0";
pub const MATHYPRE: &'static [u8; 6usize] = b"hypre\0";
pub const MATHYPRESTRUCT: &'static [u8; 12usize] = b"hyprestruct\0";
pub const MATHYPRESSTRUCT: &'static [u8; 13usize] = b"hypresstruct\0";
pub const MATSUBMATRIX: &'static [u8; 10usize] = b"submatrix\0";
pub const MATLOCALREF: &'static [u8; 9usize] = b"localref\0";
pub const MATNEST: &'static [u8; 5usize] = b"nest\0";
pub const MATPREALLOCATOR: &'static [u8; 13usize] = b"preallocator\0";
pub const MATSELL: &'static [u8; 5usize] = b"sell\0";
pub const MATSEQSELL: &'static [u8; 8usize] = b"seqsell\0";
pub const MATMPISELL: &'static [u8; 8usize] = b"mpisell\0";
pub const MATDUMMY: &'static [u8; 6usize] = b"dummy\0";
pub const MATLMVM: &'static [u8; 5usize] = b"lmvm\0";
pub const MATLMVMDFP: &'static [u8; 8usize] = b"lmvmdfp\0";
pub const MATLMVMBFGS: &'static [u8; 9usize] = b"lmvmbfgs\0";
pub const MATLMVMSR1: &'static [u8; 8usize] = b"lmvmsr1\0";
pub const MATLMVMBROYDEN: &'static [u8; 12usize] = b"lmvmbroyden\0";
pub const MATLMVMBADBROYDEN: &'static [u8; 15usize] = b"lmvmbadbroyden\0";
pub const MATLMVMSYMBROYDEN: &'static [u8; 15usize] = b"lmvmsymbroyden\0";
pub const MATLMVMSYMBADBROYDEN: &'static [u8; 18usize] = b"lmvmsymbadbroyden\0";
pub const MATLMVMDIAGBROYDEN: &'static [u8; 16usize] = b"lmvmdiagbroyden\0";
pub const MATCONSTANTDIAGONAL: &'static [u8; 17usize] = b"constantdiagonal\0";
pub const MATHTOOL: &'static [u8; 6usize] = b"htool\0";
pub const MATH2OPUS: &'static [u8; 7usize] = b"h2opus\0";
pub const MATSOLVERSUPERLU: &'static [u8; 8usize] = b"superlu\0";
pub const MATSOLVERSUPERLU_DIST: &'static [u8; 13usize] = b"superlu_dist\0";
pub const MATSOLVERSTRUMPACK: &'static [u8; 10usize] = b"strumpack\0";
pub const MATSOLVERUMFPACK: &'static [u8; 8usize] = b"umfpack\0";
pub const MATSOLVERCHOLMOD: &'static [u8; 8usize] = b"cholmod\0";
pub const MATSOLVERKLU: &'static [u8; 4usize] = b"klu\0";
pub const MATSOLVERSPARSEELEMENTAL: &'static [u8; 16usize] = b"sparseelemental\0";
pub const MATSOLVERELEMENTAL: &'static [u8; 10usize] = b"elemental\0";
pub const MATSOLVERSCALAPACK: &'static [u8; 10usize] = b"scalapack\0";
pub const MATSOLVERESSL: &'static [u8; 5usize] = b"essl\0";
pub const MATSOLVERLUSOL: &'static [u8; 6usize] = b"lusol\0";
pub const MATSOLVERMUMPS: &'static [u8; 6usize] = b"mumps\0";
pub const MATSOLVERMKL_PARDISO: &'static [u8; 12usize] = b"mkl_pardiso\0";
pub const MATSOLVERMKL_CPARDISO: &'static [u8; 13usize] = b"mkl_cpardiso\0";
pub const MATSOLVERPASTIX: &'static [u8; 7usize] = b"pastix\0";
pub const MATSOLVERMATLAB: &'static [u8; 7usize] = b"matlab\0";
pub const MATSOLVERPETSC: &'static [u8; 6usize] = b"petsc\0";
pub const MATSOLVERBAS: &'static [u8; 4usize] = b"bas\0";
pub const MATSOLVERCUSPARSE: &'static [u8; 9usize] = b"cusparse\0";
pub const MATSOLVERCUSPARSEBAND: &'static [u8; 13usize] = b"cusparseband\0";
pub const MATSOLVERCUDA: &'static [u8; 5usize] = b"cuda\0";
pub const MATSOLVERKOKKOS: &'static [u8; 7usize] = b"kokkos\0";
pub const MATSOLVERKOKKOSDEVICE: &'static [u8; 13usize] = b"kokkosdevice\0";
pub const MATSOLVERSPQR: &'static [u8; 5usize] = b"spqr\0";
pub const MATPRODUCTALGORITHM_DEFAULT: &'static [u8; 8usize] = b"default\0";
pub const MAT_FILE_CLASSID: u32 = 1211216;
pub const MAT_SKIP_ALLOCATION: i32 = -4;
pub const MATORDERINGNATURAL: &'static [u8; 8usize] = b"natural\0";
pub const MATORDERINGND: &'static [u8; 3usize] = b"nd\0";
pub const MATORDERING1WD: &'static [u8; 4usize] = b"1wd\0";
pub const MATORDERINGRCM: &'static [u8; 4usize] = b"rcm\0";
pub const MATORDERINGQMD: &'static [u8; 4usize] = b"qmd\0";
pub const MATORDERINGROWLENGTH: &'static [u8; 10usize] = b"rowlength\0";
pub const MATORDERINGWBM: &'static [u8; 4usize] = b"wbm\0";
pub const MATORDERINGSPECTRAL: &'static [u8; 9usize] = b"spectral\0";
pub const MATORDERINGAMD: &'static [u8; 4usize] = b"amd\0";
pub const MATORDERINGNATURAL_OR_ND: &'static [u8; 14usize] = b"natural_or_nd\0";
pub const MATORDERINGEXTERNAL: &'static [u8; 9usize] = b"external\0";
pub const MATCOLORINGJP: &'static [u8; 3usize] = b"jp\0";
pub const MATCOLORINGPOWER: &'static [u8; 6usize] = b"power\0";
pub const MATCOLORINGNATURAL: &'static [u8; 8usize] = b"natural\0";
pub const MATCOLORINGSL: &'static [u8; 3usize] = b"sl\0";
pub const MATCOLORINGLF: &'static [u8; 3usize] = b"lf\0";
pub const MATCOLORINGID: &'static [u8; 3usize] = b"id\0";
pub const MATCOLORINGGREEDY: &'static [u8; 7usize] = b"greedy\0";
pub const MATPARTITIONINGCURRENT: &'static [u8; 8usize] = b"current\0";
pub const MATPARTITIONINGAVERAGE: &'static [u8; 8usize] = b"average\0";
pub const MATPARTITIONINGSQUARE: &'static [u8; 7usize] = b"square\0";
pub const MATPARTITIONINGPARMETIS: &'static [u8; 9usize] = b"parmetis\0";
pub const MATPARTITIONINGCHACO: &'static [u8; 6usize] = b"chaco\0";
pub const MATPARTITIONINGPARTY: &'static [u8; 6usize] = b"party\0";
pub const MATPARTITIONINGPTSCOTCH: &'static [u8; 9usize] = b"ptscotch\0";
pub const MATPARTITIONINGHIERARCH: &'static [u8; 9usize] = b"hierarch\0";
pub const MP_PARTY_OPT: &'static [u8; 4usize] = b"opt\0";
pub const MP_PARTY_LIN: &'static [u8; 4usize] = b"lin\0";
pub const MP_PARTY_SCA: &'static [u8; 4usize] = b"sca\0";
pub const MP_PARTY_RAN: &'static [u8; 4usize] = b"ran\0";
pub const MP_PARTY_GBF: &'static [u8; 4usize] = b"gbf\0";
pub const MP_PARTY_GCF: &'static [u8; 4usize] = b"gcf\0";
pub const MP_PARTY_BUB: &'static [u8; 4usize] = b"bub\0";
pub const MP_PARTY_DEF: &'static [u8; 4usize] = b"def\0";
pub const MP_PARTY_HELPFUL_SETS: &'static [u8; 3usize] = b"hs\0";
pub const MP_PARTY_KERNIGHAN_LIN: &'static [u8; 3usize] = b"kl\0";
pub const MP_PARTY_NONE: &'static [u8; 3usize] = b"no\0";
pub const MATRIX_BINARY_FORMAT_DENSE: i32 = -1;
pub const MATMFFD_DS: &'static [u8; 3usize] = b"ds\0";
pub const MATMFFD_WP: &'static [u8; 3usize] = b"wp\0";
pub const SLEPC_DEFAULT_TOL: f64 = 0.00000001;
pub const VECCOMP: &'static [u8; 5usize] = b"comp\0";
pub const BVMAT: &'static [u8; 4usize] = b"mat\0";
pub const BVSVEC: &'static [u8; 5usize] = b"svec\0";
pub const BVVECS: &'static [u8; 5usize] = b"vecs\0";
pub const BVCONTIGUOUS: &'static [u8; 11usize] = b"contiguous\0";
pub const BVTENSOR: &'static [u8; 7usize] = b"tensor\0";
pub const PCNONE: &'static [u8; 5usize] = b"none\0";
pub const PCJACOBI: &'static [u8; 7usize] = b"jacobi\0";
pub const PCSOR: &'static [u8; 4usize] = b"sor\0";
pub const PCLU: &'static [u8; 3usize] = b"lu\0";
pub const PCQR: &'static [u8; 3usize] = b"qr\0";
pub const PCSHELL: &'static [u8; 6usize] = b"shell\0";
pub const PCBJACOBI: &'static [u8; 8usize] = b"bjacobi\0";
pub const PCMG: &'static [u8; 3usize] = b"mg\0";
pub const PCEISENSTAT: &'static [u8; 10usize] = b"eisenstat\0";
pub const PCILU: &'static [u8; 4usize] = b"ilu\0";
pub const PCICC: &'static [u8; 4usize] = b"icc\0";
pub const PCASM: &'static [u8; 4usize] = b"asm\0";
pub const PCGASM: &'static [u8; 5usize] = b"gasm\0";
pub const PCKSP: &'static [u8; 4usize] = b"ksp\0";
pub const PCCOMPOSITE: &'static [u8; 10usize] = b"composite\0";
pub const PCREDUNDANT: &'static [u8; 10usize] = b"redundant\0";
pub const PCSPAI: &'static [u8; 5usize] = b"spai\0";
pub const PCNN: &'static [u8; 3usize] = b"nn\0";
pub const PCCHOLESKY: &'static [u8; 9usize] = b"cholesky\0";
pub const PCPBJACOBI: &'static [u8; 9usize] = b"pbjacobi\0";
pub const PCVPBJACOBI: &'static [u8; 10usize] = b"vpbjacobi\0";
pub const PCMAT: &'static [u8; 4usize] = b"mat\0";
pub const PCHYPRE: &'static [u8; 6usize] = b"hypre\0";
pub const PCPARMS: &'static [u8; 6usize] = b"parms\0";
pub const PCFIELDSPLIT: &'static [u8; 11usize] = b"fieldsplit\0";
pub const PCTFS: &'static [u8; 4usize] = b"tfs\0";
pub const PCML: &'static [u8; 3usize] = b"ml\0";
pub const PCGALERKIN: &'static [u8; 9usize] = b"galerkin\0";
pub const PCEXOTIC: &'static [u8; 7usize] = b"exotic\0";
pub const PCCP: &'static [u8; 3usize] = b"cp\0";
pub const PCBFBT: &'static [u8; 5usize] = b"bfbt\0";
pub const PCLSC: &'static [u8; 4usize] = b"lsc\0";
pub const PCPYTHON: &'static [u8; 7usize] = b"python\0";
pub const PCPFMG: &'static [u8; 5usize] = b"pfmg\0";
pub const PCSYSPFMG: &'static [u8; 8usize] = b"syspfmg\0";
pub const PCREDISTRIBUTE: &'static [u8; 13usize] = b"redistribute\0";
pub const PCSVD: &'static [u8; 4usize] = b"svd\0";
pub const PCGAMG: &'static [u8; 5usize] = b"gamg\0";
pub const PCCHOWILUVIENNACL: &'static [u8; 16usize] = b"chowiluviennacl\0";
pub const PCROWSCALINGVIENNACL: &'static [u8; 19usize] = b"rowscalingviennacl\0";
pub const PCSAVIENNACL: &'static [u8; 11usize] = b"saviennacl\0";
pub const PCBDDC: &'static [u8; 5usize] = b"bddc\0";
pub const PCKACZMARZ: &'static [u8; 9usize] = b"kaczmarz\0";
pub const PCTELESCOPE: &'static [u8; 10usize] = b"telescope\0";
pub const PCPATCH: &'static [u8; 6usize] = b"patch\0";
pub const PCLMVM: &'static [u8; 5usize] = b"lmvm\0";
pub const PCHMG: &'static [u8; 4usize] = b"hmg\0";
pub const PCDEFLATION: &'static [u8; 10usize] = b"deflation\0";
pub const PCHPDDM: &'static [u8; 6usize] = b"hpddm\0";
pub const PCH2OPUS: &'static [u8; 7usize] = b"h2opus\0";
pub const PCGAMGAGG: &'static [u8; 4usize] = b"agg\0";
pub const PCGAMGGEO: &'static [u8; 4usize] = b"geo\0";
pub const PCGAMGCLASSICAL: &'static [u8; 10usize] = b"classical\0";
pub const PCGAMGCLASSICALDIRECT: &'static [u8; 7usize] = b"direct\0";
pub const PCGAMGCLASSICALSTANDARD: &'static [u8; 9usize] = b"standard\0";
pub const PC_FILE_CLASSID: u32 = 1211222;
pub const KSPRICHARDSON: &'static [u8; 11usize] = b"richardson\0";
pub const KSPCHEBYSHEV: &'static [u8; 10usize] = b"chebyshev\0";
pub const KSPCG: &'static [u8; 3usize] = b"cg\0";
pub const KSPGROPPCG: &'static [u8; 8usize] = b"groppcg\0";
pub const KSPPIPECG: &'static [u8; 7usize] = b"pipecg\0";
pub const KSPPIPECGRR: &'static [u8; 9usize] = b"pipecgrr\0";
pub const KSPPIPELCG: &'static [u8; 8usize] = b"pipelcg\0";
pub const KSPPIPEPRCG: &'static [u8; 9usize] = b"pipeprcg\0";
pub const KSPPIPECG2: &'static [u8; 8usize] = b"pipecg2\0";
pub const KSPCGNE: &'static [u8; 5usize] = b"cgne\0";
pub const KSPNASH: &'static [u8; 5usize] = b"nash\0";
pub const KSPSTCG: &'static [u8; 5usize] = b"stcg\0";
pub const KSPGLTR: &'static [u8; 5usize] = b"gltr\0";
pub const KSPFCG: &'static [u8; 4usize] = b"fcg\0";
pub const KSPPIPEFCG: &'static [u8; 8usize] = b"pipefcg\0";
pub const KSPGMRES: &'static [u8; 6usize] = b"gmres\0";
pub const KSPPIPEFGMRES: &'static [u8; 11usize] = b"pipefgmres\0";
pub const KSPFGMRES: &'static [u8; 7usize] = b"fgmres\0";
pub const KSPLGMRES: &'static [u8; 7usize] = b"lgmres\0";
pub const KSPDGMRES: &'static [u8; 7usize] = b"dgmres\0";
pub const KSPPGMRES: &'static [u8; 7usize] = b"pgmres\0";
pub const KSPTCQMR: &'static [u8; 6usize] = b"tcqmr\0";
pub const KSPBCGS: &'static [u8; 5usize] = b"bcgs\0";
pub const KSPIBCGS: &'static [u8; 6usize] = b"ibcgs\0";
pub const KSPFBCGS: &'static [u8; 6usize] = b"fbcgs\0";
pub const KSPFBCGSR: &'static [u8; 7usize] = b"fbcgsr\0";
pub const KSPBCGSL: &'static [u8; 6usize] = b"bcgsl\0";
pub const KSPPIPEBCGS: &'static [u8; 9usize] = b"pipebcgs\0";
pub const KSPCGS: &'static [u8; 4usize] = b"cgs\0";
pub const KSPTFQMR: &'static [u8; 6usize] = b"tfqmr\0";
pub const KSPCR: &'static [u8; 3usize] = b"cr\0";
pub const KSPPIPECR: &'static [u8; 7usize] = b"pipecr\0";
pub const KSPLSQR: &'static [u8; 5usize] = b"lsqr\0";
pub const KSPPREONLY: &'static [u8; 8usize] = b"preonly\0";
pub const KSPQCG: &'static [u8; 4usize] = b"qcg\0";
pub const KSPBICG: &'static [u8; 5usize] = b"bicg\0";
pub const KSPMINRES: &'static [u8; 7usize] = b"minres\0";
pub const KSPSYMMLQ: &'static [u8; 7usize] = b"symmlq\0";
pub const KSPLCD: &'static [u8; 4usize] = b"lcd\0";
pub const KSPPYTHON: &'static [u8; 7usize] = b"python\0";
pub const KSPGCR: &'static [u8; 4usize] = b"gcr\0";
pub const KSPPIPEGCR: &'static [u8; 8usize] = b"pipegcr\0";
pub const KSPTSIRM: &'static [u8; 6usize] = b"tsirm\0";
pub const KSPCGLS: &'static [u8; 5usize] = b"cgls\0";
pub const KSPFETIDP: &'static [u8; 7usize] = b"fetidp\0";
pub const KSPHPDDM: &'static [u8; 6usize] = b"hpddm\0";
pub const KSP_FILE_CLASSID: u32 = 1211223;
pub const KSPGUESSFISCHER: &'static [u8; 8usize] = b"fischer\0";
pub const KSPGUESSPOD: &'static [u8; 4usize] = b"pod\0";
pub const STSHELL: &'static [u8; 6usize] = b"shell\0";
pub const STSHIFT: &'static [u8; 6usize] = b"shift\0";
pub const STSINVERT: &'static [u8; 8usize] = b"sinvert\0";
pub const STCAYLEY: &'static [u8; 7usize] = b"cayley\0";
pub const STPRECOND: &'static [u8; 8usize] = b"precond\0";
pub const STFILTER: &'static [u8; 7usize] = b"filter\0";
pub const FN_MAX_SOLVE: u32 = 16;
pub const FNCOMBINE: &'static [u8; 8usize] = b"combine\0";
pub const FNRATIONAL: &'static [u8; 9usize] = b"rational\0";
pub const FNEXP: &'static [u8; 4usize] = b"exp\0";
pub const FNLOG: &'static [u8; 4usize] = b"log\0";
pub const FNPHI: &'static [u8; 4usize] = b"phi\0";
pub const FNSQRT: &'static [u8; 5usize] = b"sqrt\0";
pub const FNINVSQRT: &'static [u8; 8usize] = b"invsqrt\0";
pub const RGINTERVAL: &'static [u8; 9usize] = b"interval\0";
pub const RGPOLYGON: &'static [u8; 8usize] = b"polygon\0";
pub const RGELLIPSE: &'static [u8; 8usize] = b"ellipse\0";
pub const RGRING: &'static [u8; 5usize] = b"ring\0";
pub const DS_MAX_SOLVE: u32 = 6;
pub const DSHEP: &'static [u8; 4usize] = b"hep\0";
pub const DSNHEP: &'static [u8; 5usize] = b"nhep\0";
pub const DSGHEP: &'static [u8; 5usize] = b"ghep\0";
pub const DSGHIEP: &'static [u8; 6usize] = b"ghiep\0";
pub const DSGNHEP: &'static [u8; 6usize] = b"gnhep\0";
pub const DSNHEPTS: &'static [u8; 7usize] = b"nhepts\0";
pub const DSSVD: &'static [u8; 4usize] = b"svd\0";
pub const DSGSVD: &'static [u8; 5usize] = b"gsvd\0";
pub const DSPEP: &'static [u8; 4usize] = b"pep\0";
pub const DSNEP: &'static [u8; 4usize] = b"nep\0";
pub const DS_NUM_EXTRA: u32 = 10;
pub const LMEKRYLOV: &'static [u8; 7usize] = b"krylov\0";
pub const SNESNEWTONLS: &'static [u8; 9usize] = b"newtonls\0";
pub const SNESNEWTONTR: &'static [u8; 9usize] = b"newtontr\0";
pub const SNESPYTHON: &'static [u8; 7usize] = b"python\0";
pub const SNESNRICHARDSON: &'static [u8; 12usize] = b"nrichardson\0";
pub const SNESKSPONLY: &'static [u8; 8usize] = b"ksponly\0";
pub const SNESKSPTRANSPOSEONLY: &'static [u8; 17usize] = b"ksptransposeonly\0";
pub const SNESVINEWTONRSLS: &'static [u8; 13usize] = b"vinewtonrsls\0";
pub const SNESVINEWTONSSLS: &'static [u8; 13usize] = b"vinewtonssls\0";
pub const SNESNGMRES: &'static [u8; 7usize] = b"ngmres\0";
pub const SNESQN: &'static [u8; 3usize] = b"qn\0";
pub const SNESSHELL: &'static [u8; 6usize] = b"shell\0";
pub const SNESNGS: &'static [u8; 4usize] = b"ngs\0";
pub const SNESNCG: &'static [u8; 4usize] = b"ncg\0";
pub const SNESFAS: &'static [u8; 4usize] = b"fas\0";
pub const SNESMS: &'static [u8; 3usize] = b"ms\0";
pub const SNESNASM: &'static [u8; 5usize] = b"nasm\0";
pub const SNESANDERSON: &'static [u8; 9usize] = b"anderson\0";
pub const SNESASPIN: &'static [u8; 6usize] = b"aspin\0";
pub const SNESCOMPOSITE: &'static [u8; 10usize] = b"composite\0";
pub const SNESPATCH: &'static [u8; 6usize] = b"patch\0";
pub const SNES_FILE_CLASSID: u32 = 1211224;
pub const SNESLINESEARCHBT: &'static [u8; 3usize] = b"bt\0";
pub const SNESLINESEARCHNLEQERR: &'static [u8; 8usize] = b"nleqerr\0";
pub const SNESLINESEARCHBASIC: &'static [u8; 6usize] = b"basic\0";
pub const SNESLINESEARCHL2: &'static [u8; 3usize] = b"l2\0";
pub const SNESLINESEARCHCP: &'static [u8; 3usize] = b"cp\0";
pub const SNESLINESEARCHSHELL: &'static [u8; 6usize] = b"shell\0";
pub const SNESLINESEARCHNCGLINEAR: &'static [u8; 10usize] = b"ncglinear\0";
pub const SNES_LINESEARCH_ORDER_LINEAR: u32 = 1;
pub const SNES_LINESEARCH_ORDER_QUADRATIC: u32 = 2;
pub const SNES_LINESEARCH_ORDER_CUBIC: u32 = 3;
pub const SNESMSM62: &'static [u8; 4usize] = b"m62\0";
pub const SNESMSEULER: &'static [u8; 6usize] = b"euler\0";
pub const SNESMSJAMESON83: &'static [u8; 10usize] = b"jameson83\0";
pub const SNESMSVLTP11: &'static [u8; 7usize] = b"vltp11\0";
pub const SNESMSVLTP21: &'static [u8; 7usize] = b"vltp21\0";
pub const SNESMSVLTP31: &'static [u8; 7usize] = b"vltp31\0";
pub const SNESMSVLTP41: &'static [u8; 7usize] = b"vltp41\0";
pub const SNESMSVLTP51: &'static [u8; 7usize] = b"vltp51\0";
pub const SNESMSVLTP61: &'static [u8; 7usize] = b"vltp61\0";
pub const EPSPOWER: &'static [u8; 6usize] = b"power\0";
pub const EPSSUBSPACE: &'static [u8; 9usize] = b"subspace\0";
pub const EPSARNOLDI: &'static [u8; 8usize] = b"arnoldi\0";
pub const EPSLANCZOS: &'static [u8; 8usize] = b"lanczos\0";
pub const EPSKRYLOVSCHUR: &'static [u8; 12usize] = b"krylovschur\0";
pub const EPSGD: &'static [u8; 3usize] = b"gd\0";
pub const EPSJD: &'static [u8; 3usize] = b"jd\0";
pub const EPSRQCG: &'static [u8; 5usize] = b"rqcg\0";
pub const EPSLOBPCG: &'static [u8; 7usize] = b"lobpcg\0";
pub const EPSCISS: &'static [u8; 5usize] = b"ciss\0";
pub const EPSLYAPII: &'static [u8; 7usize] = b"lyapii\0";
pub const EPSLAPACK: &'static [u8; 7usize] = b"lapack\0";
pub const EPSARPACK: &'static [u8; 7usize] = b"arpack\0";
pub const EPSTRLAN: &'static [u8; 6usize] = b"trlan\0";
pub const EPSBLOPEX: &'static [u8; 7usize] = b"blopex\0";
pub const EPSPRIMME: &'static [u8; 7usize] = b"primme\0";
pub const EPSFEAST: &'static [u8; 6usize] = b"feast\0";
pub const EPSSCALAPACK: &'static [u8; 10usize] = b"scalapack\0";
pub const EPSELPA: &'static [u8; 5usize] = b"elpa\0";
pub const EPSELEMENTAL: &'static [u8; 10usize] = b"elemental\0";
pub const EPSEVSL: &'static [u8; 5usize] = b"evsl\0";
pub const SVDCROSS: &'static [u8; 6usize] = b"cross\0";
pub const SVDCYCLIC: &'static [u8; 7usize] = b"cyclic\0";
pub const SVDLAPACK: &'static [u8; 7usize] = b"lapack\0";
pub const SVDLANCZOS: &'static [u8; 8usize] = b"lanczos\0";
pub const SVDTRLANCZOS: &'static [u8; 10usize] = b"trlanczos\0";
pub const SVDRANDOMIZED: &'static [u8; 11usize] = b"randomized\0";
pub const SVDSCALAPACK: &'static [u8; 10usize] = b"scalapack\0";
pub const SVDELEMENTAL: &'static [u8; 10usize] = b"elemental\0";
pub const SVDPRIMME: &'static [u8; 7usize] = b"primme\0";
pub const PEPLINEAR: &'static [u8; 7usize] = b"linear\0";
pub const PEPQARNOLDI: &'static [u8; 9usize] = b"qarnoldi\0";
pub const PEPTOAR: &'static [u8; 5usize] = b"toar\0";
pub const PEPSTOAR: &'static [u8; 6usize] = b"stoar\0";
pub const PEPJD: &'static [u8; 3usize] = b"jd\0";
pub const PEPCISS: &'static [u8; 5usize] = b"ciss\0";
pub const NEPRII: &'static [u8; 4usize] = b"rii\0";
pub const NEPSLP: &'static [u8; 4usize] = b"slp\0";
pub const NEPNARNOLDI: &'static [u8; 9usize] = b"narnoldi\0";
pub const NEPCISS: &'static [u8; 5usize] = b"ciss\0";
pub const NEPINTERPOL: &'static [u8; 9usize] = b"interpol\0";
pub const NEPNLEIGS: &'static [u8; 7usize] = b"nleigs\0";
pub const MFNKRYLOV: &'static [u8; 7usize] = b"krylov\0";
pub const MFNEXPOKIT: &'static [u8; 8usize] = b"expokit\0";
pub type PetscErrorCode = ::std::os::raw::c_int;
pub type PetscClassId = ::std::os::raw::c_int;
pub type PetscMPIInt = ::std::os::raw::c_int;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscEnum {
    ENUM_DUMMY = 0,
}
pub type PetscShort = ::std::os::raw::c_short;
pub type PetscChar = ::std::os::raw::c_char;
pub type PetscFloat = f32;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type PetscInt64 = i64;
pub type PetscInt = ::std::os::raw::c_int;
pub type PetscBLASInt = ::std::os::raw::c_int;
pub type PetscCuBLASInt = ::std::os::raw::c_int;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscBool {
    PETSC_FALSE = 0,
    PETSC_TRUE = 1,
}
pub type PetscReal = f64;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    pub fn cacos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cexp(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cexp(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn clog(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __clog(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cpow(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cpow(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csqrt(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csqrt(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cabs(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __cabs(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn carg(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __carg(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn conj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __conj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cproj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cproj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cimag(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __cimag(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn creal(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __creal(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cacosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cacosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __casinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __catanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ccosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __csinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ctanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cacoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cacoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __casinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __catanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ccoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __csinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ctanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cexpf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cexpf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn clogf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __clogf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cpowf(__x: __BindgenComplex<f32>, __y: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cpowf(__x: __BindgenComplex<f32>, __y: __BindgenComplex<f32>)
        -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csqrtf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __csqrtf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cabsf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __cabsf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cargf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __cargf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn conjf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __conjf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cprojf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cprojf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cimagf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __cimagf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn crealf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __crealf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cacosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cexpl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cexpl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn clogl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __clogl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cpowl(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cpowl(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>)
        -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csqrtl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csqrtl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cabsl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __cabsl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn cargl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __cargl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn conjl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __conjl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cprojl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cprojl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cimagl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __cimagl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn creall(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __creall(__z: __BindgenComplex<f64>) -> u128;
}
pub type PetscComplex = __BindgenComplex<f64>;
pub type PetscScalar = PetscComplex;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscCopyMode {
    PETSC_COPY_VALUES = 0,
    PETSC_OWN_POINTER = 1,
    PETSC_USE_POINTER = 2,
}
pub type PetscLogDouble = f64;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscDataType {
    PETSC_DATATYPE_UNKNOWN = 0,
    PETSC_DOUBLE = 1,
    PETSC_COMPLEX = 2,
    PETSC_LONG = 3,
    PETSC_SHORT = 4,
    PETSC_FLOAT = 5,
    PETSC_CHAR = 6,
    PETSC_BIT_LOGICAL = 7,
    PETSC_ENUM = 8,
    PETSC_BOOL = 9,
    PETSC___FLOAT128 = 10,
    PETSC_OBJECT = 11,
    PETSC_FUNCTION = 12,
    PETSC_STRING = 13,
    PETSC___FP16 = 14,
    PETSC_STRUCT = 15,
    PETSC_INT = 16,
    PETSC_INT64 = 17,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscToken {
    _unused: [u8; 0],
}
pub type PetscToken = *mut _p_PetscToken;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscObject {
    _unused: [u8; 0],
}
pub type PetscObject = *mut _p_PetscObject;
pub type PetscObjectId = PetscInt64;
pub type PetscObjectState = PetscInt64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscFunctionList {
    _unused: [u8; 0],
}
pub type PetscFunctionList = *mut _n_PetscFunctionList;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscFileMode {
    FILE_MODE_UNDEFINED = -1,
    FILE_MODE_READ = 0,
    FILE_MODE_WRITE = 1,
    FILE_MODE_APPEND = 2,
    FILE_MODE_UPDATE = 3,
    FILE_MODE_APPEND_UPDATE = 4,
}
pub type PetscDLHandle = *mut ::std::os::raw::c_void;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscDLMode {
    PETSC_DL_DECIDE = 0,
    PETSC_DL_NOW = 1,
    PETSC_DL_LOCAL = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscObjectList {
    _unused: [u8; 0],
}
pub type PetscObjectList = *mut _n_PetscObjectList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscDLLibrary {
    _unused: [u8; 0],
}
pub type PetscDLLibrary = *mut _n_PetscDLLibrary;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscContainer {
    _unused: [u8; 0],
}
pub type PetscContainer = *mut _p_PetscContainer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscRandom {
    _unused: [u8; 0],
}
pub type PetscRandom = *mut _p_PetscRandom;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscBinarySeekType {
    PETSC_BINARY_SEEK_SET = 0,
    PETSC_BINARY_SEEK_CUR = 1,
    PETSC_BINARY_SEEK_END = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscBuildTwoSidedType {
    PETSC_BUILDTWOSIDED_NOTSET = -1,
    PETSC_BUILDTWOSIDED_ALLREDUCE = 0,
    PETSC_BUILDTWOSIDED_IBARRIER = 1,
    PETSC_BUILDTWOSIDED_REDSCATTER = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum InsertMode {
    NOT_SET_VALUES = 0,
    INSERT_VALUES = 1,
    ADD_VALUES = 2,
    MAX_VALUES = 3,
    MIN_VALUES = 4,
    INSERT_ALL_VALUES = 5,
    ADD_ALL_VALUES = 6,
    INSERT_BC_VALUES = 7,
    ADD_BC_VALUES = 8,
}
pub type PetscSubcomm = *mut _n_PetscSubcomm;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscSubcommType {
    PETSC_SUBCOMM_GENERAL = 0,
    PETSC_SUBCOMM_CONTIGUOUS = 1,
    PETSC_SUBCOMM_INTERLACED = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PetscHeap {
    _unused: [u8; 0],
}
pub type PetscHeap = *mut _PetscHeap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscShmComm {
    _unused: [u8; 0],
}
pub type PetscShmComm = *mut _n_PetscShmComm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscOmpCtrl {
    _unused: [u8; 0],
}
pub type PetscOmpCtrl = *mut _n_PetscOmpCtrl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscSegBuffer {
    _unused: [u8; 0],
}
pub type PetscSegBuffer = *mut _n_PetscSegBuffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscOptionsHelpPrinted {
    _unused: [u8; 0],
}
pub type PetscOptionsHelpPrinted = *mut _n_PetscOptionsHelpPrinted;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type MPI_Aint = isize;
pub type MPI_Offset = ::std::os::raw::c_longlong;
pub type MPI_Count = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_communicator_t {
    _unused: [u8; 0],
}
pub type MPI_Comm = *mut ompi_communicator_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_datatype_t {
    _unused: [u8; 0],
}
pub type MPI_Datatype = *mut ompi_datatype_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_errhandler_t {
    _unused: [u8; 0],
}
pub type MPI_Errhandler = *mut ompi_errhandler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_file_t {
    _unused: [u8; 0],
}
pub type MPI_File = *mut ompi_file_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_group_t {
    _unused: [u8; 0],
}
pub type MPI_Group = *mut ompi_group_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_info_t {
    _unused: [u8; 0],
}
pub type MPI_Info = *mut ompi_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_op_t {
    _unused: [u8; 0],
}
pub type MPI_Op = *mut ompi_op_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_request_t {
    _unused: [u8; 0],
}
pub type MPI_Request = *mut ompi_request_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_message_t {
    _unused: [u8; 0],
}
pub type MPI_Message = *mut ompi_message_t;
pub type MPI_Status = ompi_status_public_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_win_t {
    _unused: [u8; 0],
}
pub type MPI_Win = *mut ompi_win_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mca_base_var_enum_t {
    _unused: [u8; 0],
}
pub type MPI_T_enum = *mut mca_base_var_enum_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_mpit_cvar_handle_t {
    _unused: [u8; 0],
}
pub type MPI_T_cvar_handle = *mut ompi_mpit_cvar_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mca_base_pvar_handle_t {
    _unused: [u8; 0],
}
pub type MPI_T_pvar_handle = *mut mca_base_pvar_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mca_base_pvar_session_t {
    _unused: [u8; 0],
}
pub type MPI_T_pvar_session = *mut mca_base_pvar_session_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_status_public_t {
    pub MPI_SOURCE: ::std::os::raw::c_int,
    pub MPI_TAG: ::std::os::raw::c_int,
    pub MPI_ERROR: ::std::os::raw::c_int,
    pub _cancelled: ::std::os::raw::c_int,
    pub _ucount: size_t,
}
#[test]
fn bindgen_test_layout_ompi_status_public_t() {
    assert_eq!(
        ::std::mem::size_of::<ompi_status_public_t>(),
        24usize,
        concat!("Size of: ", stringify!(ompi_status_public_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ompi_status_public_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ompi_status_public_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ompi_status_public_t>())).MPI_SOURCE as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ompi_status_public_t),
            "::",
            stringify!(MPI_SOURCE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ompi_status_public_t>())).MPI_TAG as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ompi_status_public_t),
            "::",
            stringify!(MPI_TAG)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ompi_status_public_t>())).MPI_ERROR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ompi_status_public_t),
            "::",
            stringify!(MPI_ERROR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ompi_status_public_t>()))._cancelled as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ompi_status_public_t),
            "::",
            stringify!(_cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ompi_status_public_t>()))._ucount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ompi_status_public_t),
            "::",
            stringify!(_ucount)
        )
    );
}
pub type MPI_Datarep_extent_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Datatype,
        arg2: *mut MPI_Aint,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Datarep_conversion_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: MPI_Datatype,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
        arg5: MPI_Offset,
        arg6: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Comm_errhandler_function = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut MPI_Comm, arg2: *mut ::std::os::raw::c_int, ...),
>;
pub type ompi_file_errhandler_fn = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut MPI_File, arg2: *mut ::std::os::raw::c_int, ...),
>;
pub type MPI_Win_errhandler_function = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut MPI_Win, arg2: *mut ::std::os::raw::c_int, ...),
>;
pub type MPI_User_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut MPI_Datatype,
    ),
>;
pub type MPI_Comm_copy_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_void,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Comm_delete_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Type_copy_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Datatype,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_void,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Type_delete_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Datatype,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Win_copy_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Win,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_void,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Win_delete_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Win,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Grequest_query_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut MPI_Status,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Grequest_free_function = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type MPI_Grequest_cancel_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Comm_errhandler_fn = MPI_Comm_errhandler_function;
pub type MPI_File_errhandler_fn = ompi_file_errhandler_fn;
pub type MPI_File_errhandler_function = ompi_file_errhandler_fn;
pub type MPI_Win_errhandler_fn = MPI_Win_errhandler_function;
pub const MPI_TAG_UB: _bindgen_ty_1 = _bindgen_ty_1::MPI_TAG_UB;
pub const MPI_HOST: _bindgen_ty_1 = _bindgen_ty_1::MPI_HOST;
pub const MPI_IO: _bindgen_ty_1 = _bindgen_ty_1::MPI_IO;
pub const MPI_WTIME_IS_GLOBAL: _bindgen_ty_1 = _bindgen_ty_1::MPI_WTIME_IS_GLOBAL;
pub const MPI_APPNUM: _bindgen_ty_1 = _bindgen_ty_1::MPI_APPNUM;
pub const MPI_LASTUSEDCODE: _bindgen_ty_1 = _bindgen_ty_1::MPI_LASTUSEDCODE;
pub const MPI_UNIVERSE_SIZE: _bindgen_ty_1 = _bindgen_ty_1::MPI_UNIVERSE_SIZE;
pub const MPI_WIN_BASE: _bindgen_ty_1 = _bindgen_ty_1::MPI_WIN_BASE;
pub const MPI_WIN_SIZE: _bindgen_ty_1 = _bindgen_ty_1::MPI_WIN_SIZE;
pub const MPI_WIN_DISP_UNIT: _bindgen_ty_1 = _bindgen_ty_1::MPI_WIN_DISP_UNIT;
pub const MPI_WIN_CREATE_FLAVOR: _bindgen_ty_1 = _bindgen_ty_1::MPI_WIN_CREATE_FLAVOR;
pub const MPI_WIN_MODEL: _bindgen_ty_1 = _bindgen_ty_1::MPI_WIN_MODEL;
pub const IMPI_CLIENT_SIZE: _bindgen_ty_1 = _bindgen_ty_1::IMPI_CLIENT_SIZE;
pub const IMPI_CLIENT_COLOR: _bindgen_ty_1 = _bindgen_ty_1::IMPI_CLIENT_COLOR;
pub const IMPI_HOST_SIZE: _bindgen_ty_1 = _bindgen_ty_1::IMPI_HOST_SIZE;
pub const IMPI_HOST_COLOR: _bindgen_ty_1 = _bindgen_ty_1::IMPI_HOST_COLOR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_1 {
    MPI_TAG_UB = 0,
    MPI_HOST = 1,
    MPI_IO = 2,
    MPI_WTIME_IS_GLOBAL = 3,
    MPI_APPNUM = 4,
    MPI_LASTUSEDCODE = 5,
    MPI_UNIVERSE_SIZE = 6,
    MPI_WIN_BASE = 7,
    MPI_WIN_SIZE = 8,
    MPI_WIN_DISP_UNIT = 9,
    MPI_WIN_CREATE_FLAVOR = 10,
    MPI_WIN_MODEL = 11,
    IMPI_CLIENT_SIZE = 12,
    IMPI_CLIENT_COLOR = 13,
    IMPI_HOST_SIZE = 14,
    IMPI_HOST_COLOR = 15,
}
pub const MPI_IDENT: _bindgen_ty_2 = _bindgen_ty_2::MPI_IDENT;
pub const MPI_CONGRUENT: _bindgen_ty_2 = _bindgen_ty_2::MPI_CONGRUENT;
pub const MPI_SIMILAR: _bindgen_ty_2 = _bindgen_ty_2::MPI_SIMILAR;
pub const MPI_UNEQUAL: _bindgen_ty_2 = _bindgen_ty_2::MPI_UNEQUAL;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_2 {
    MPI_IDENT = 0,
    MPI_CONGRUENT = 1,
    MPI_SIMILAR = 2,
    MPI_UNEQUAL = 3,
}
pub const MPI_THREAD_SINGLE: _bindgen_ty_3 = _bindgen_ty_3::MPI_THREAD_SINGLE;
pub const MPI_THREAD_FUNNELED: _bindgen_ty_3 = _bindgen_ty_3::MPI_THREAD_FUNNELED;
pub const MPI_THREAD_SERIALIZED: _bindgen_ty_3 = _bindgen_ty_3::MPI_THREAD_SERIALIZED;
pub const MPI_THREAD_MULTIPLE: _bindgen_ty_3 = _bindgen_ty_3::MPI_THREAD_MULTIPLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_3 {
    MPI_THREAD_SINGLE = 0,
    MPI_THREAD_FUNNELED = 1,
    MPI_THREAD_SERIALIZED = 2,
    MPI_THREAD_MULTIPLE = 3,
}
pub const MPI_COMBINER_NAMED: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_NAMED;
pub const MPI_COMBINER_DUP: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_DUP;
pub const MPI_COMBINER_CONTIGUOUS: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_CONTIGUOUS;
pub const MPI_COMBINER_VECTOR: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_VECTOR;
pub const OMPI_WAS_MPI_COMBINER_HVECTOR_INTEGER: _bindgen_ty_4 =
    _bindgen_ty_4::OMPI_WAS_MPI_COMBINER_HVECTOR_INTEGER;
pub const MPI_COMBINER_HVECTOR: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_HVECTOR;
pub const MPI_COMBINER_INDEXED: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_INDEXED;
pub const OMPI_WAS_MPI_COMBINER_HINDEXED_INTEGER: _bindgen_ty_4 =
    _bindgen_ty_4::OMPI_WAS_MPI_COMBINER_HINDEXED_INTEGER;
pub const MPI_COMBINER_HINDEXED: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_HINDEXED;
pub const MPI_COMBINER_INDEXED_BLOCK: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_INDEXED_BLOCK;
pub const OMPI_WAS_MPI_COMBINER_STRUCT_INTEGER: _bindgen_ty_4 =
    _bindgen_ty_4::OMPI_WAS_MPI_COMBINER_STRUCT_INTEGER;
pub const MPI_COMBINER_STRUCT: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_STRUCT;
pub const MPI_COMBINER_SUBARRAY: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_SUBARRAY;
pub const MPI_COMBINER_DARRAY: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_DARRAY;
pub const MPI_COMBINER_F90_REAL: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_F90_REAL;
pub const MPI_COMBINER_F90_COMPLEX: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_F90_COMPLEX;
pub const MPI_COMBINER_F90_INTEGER: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_F90_INTEGER;
pub const MPI_COMBINER_RESIZED: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_RESIZED;
pub const MPI_COMBINER_HINDEXED_BLOCK: _bindgen_ty_4 = _bindgen_ty_4::MPI_COMBINER_HINDEXED_BLOCK;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_4 {
    MPI_COMBINER_NAMED = 0,
    MPI_COMBINER_DUP = 1,
    MPI_COMBINER_CONTIGUOUS = 2,
    MPI_COMBINER_VECTOR = 3,
    OMPI_WAS_MPI_COMBINER_HVECTOR_INTEGER = 4,
    MPI_COMBINER_HVECTOR = 5,
    MPI_COMBINER_INDEXED = 6,
    OMPI_WAS_MPI_COMBINER_HINDEXED_INTEGER = 7,
    MPI_COMBINER_HINDEXED = 8,
    MPI_COMBINER_INDEXED_BLOCK = 9,
    OMPI_WAS_MPI_COMBINER_STRUCT_INTEGER = 10,
    MPI_COMBINER_STRUCT = 11,
    MPI_COMBINER_SUBARRAY = 12,
    MPI_COMBINER_DARRAY = 13,
    MPI_COMBINER_F90_REAL = 14,
    MPI_COMBINER_F90_COMPLEX = 15,
    MPI_COMBINER_F90_INTEGER = 16,
    MPI_COMBINER_RESIZED = 17,
    MPI_COMBINER_HINDEXED_BLOCK = 18,
}
pub const MPI_COMM_TYPE_SHARED: _bindgen_ty_5 = _bindgen_ty_5::MPI_COMM_TYPE_SHARED;
pub const OMPI_COMM_TYPE_HWTHREAD: _bindgen_ty_5 = _bindgen_ty_5::OMPI_COMM_TYPE_HWTHREAD;
pub const OMPI_COMM_TYPE_CORE: _bindgen_ty_5 = _bindgen_ty_5::OMPI_COMM_TYPE_CORE;
pub const OMPI_COMM_TYPE_L1CACHE: _bindgen_ty_5 = _bindgen_ty_5::OMPI_COMM_TYPE_L1CACHE;
pub const OMPI_COMM_TYPE_L2CACHE: _bindgen_ty_5 = _bindgen_ty_5::OMPI_COMM_TYPE_L2CACHE;
pub const OMPI_COMM_TYPE_L3CACHE: _bindgen_ty_5 = _bindgen_ty_5::OMPI_COMM_TYPE_L3CACHE;
pub const OMPI_COMM_TYPE_SOCKET: _bindgen_ty_5 = _bindgen_ty_5::OMPI_COMM_TYPE_SOCKET;
pub const OMPI_COMM_TYPE_NUMA: _bindgen_ty_5 = _bindgen_ty_5::OMPI_COMM_TYPE_NUMA;
pub const OMPI_COMM_TYPE_BOARD: _bindgen_ty_5 = _bindgen_ty_5::OMPI_COMM_TYPE_BOARD;
pub const OMPI_COMM_TYPE_HOST: _bindgen_ty_5 = _bindgen_ty_5::OMPI_COMM_TYPE_HOST;
pub const OMPI_COMM_TYPE_CU: _bindgen_ty_5 = _bindgen_ty_5::OMPI_COMM_TYPE_CU;
pub const OMPI_COMM_TYPE_CLUSTER: _bindgen_ty_5 = _bindgen_ty_5::OMPI_COMM_TYPE_CLUSTER;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_5 {
    MPI_COMM_TYPE_SHARED = 0,
    OMPI_COMM_TYPE_HWTHREAD = 1,
    OMPI_COMM_TYPE_CORE = 2,
    OMPI_COMM_TYPE_L1CACHE = 3,
    OMPI_COMM_TYPE_L2CACHE = 4,
    OMPI_COMM_TYPE_L3CACHE = 5,
    OMPI_COMM_TYPE_SOCKET = 6,
    OMPI_COMM_TYPE_NUMA = 7,
    OMPI_COMM_TYPE_BOARD = 8,
    OMPI_COMM_TYPE_HOST = 9,
    OMPI_COMM_TYPE_CU = 10,
    OMPI_COMM_TYPE_CLUSTER = 11,
}
pub const MPI_T_VERBOSITY_USER_BASIC: _bindgen_ty_6 = _bindgen_ty_6::MPI_T_VERBOSITY_USER_BASIC;
pub const MPI_T_VERBOSITY_USER_DETAIL: _bindgen_ty_6 = _bindgen_ty_6::MPI_T_VERBOSITY_USER_DETAIL;
pub const MPI_T_VERBOSITY_USER_ALL: _bindgen_ty_6 = _bindgen_ty_6::MPI_T_VERBOSITY_USER_ALL;
pub const MPI_T_VERBOSITY_TUNER_BASIC: _bindgen_ty_6 = _bindgen_ty_6::MPI_T_VERBOSITY_TUNER_BASIC;
pub const MPI_T_VERBOSITY_TUNER_DETAIL: _bindgen_ty_6 = _bindgen_ty_6::MPI_T_VERBOSITY_TUNER_DETAIL;
pub const MPI_T_VERBOSITY_TUNER_ALL: _bindgen_ty_6 = _bindgen_ty_6::MPI_T_VERBOSITY_TUNER_ALL;
pub const MPI_T_VERBOSITY_MPIDEV_BASIC: _bindgen_ty_6 = _bindgen_ty_6::MPI_T_VERBOSITY_MPIDEV_BASIC;
pub const MPI_T_VERBOSITY_MPIDEV_DETAIL: _bindgen_ty_6 =
    _bindgen_ty_6::MPI_T_VERBOSITY_MPIDEV_DETAIL;
pub const MPI_T_VERBOSITY_MPIDEV_ALL: _bindgen_ty_6 = _bindgen_ty_6::MPI_T_VERBOSITY_MPIDEV_ALL;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_6 {
    MPI_T_VERBOSITY_USER_BASIC = 0,
    MPI_T_VERBOSITY_USER_DETAIL = 1,
    MPI_T_VERBOSITY_USER_ALL = 2,
    MPI_T_VERBOSITY_TUNER_BASIC = 3,
    MPI_T_VERBOSITY_TUNER_DETAIL = 4,
    MPI_T_VERBOSITY_TUNER_ALL = 5,
    MPI_T_VERBOSITY_MPIDEV_BASIC = 6,
    MPI_T_VERBOSITY_MPIDEV_DETAIL = 7,
    MPI_T_VERBOSITY_MPIDEV_ALL = 8,
}
pub const MPI_T_SCOPE_CONSTANT: _bindgen_ty_7 = _bindgen_ty_7::MPI_T_SCOPE_CONSTANT;
pub const MPI_T_SCOPE_READONLY: _bindgen_ty_7 = _bindgen_ty_7::MPI_T_SCOPE_READONLY;
pub const MPI_T_SCOPE_LOCAL: _bindgen_ty_7 = _bindgen_ty_7::MPI_T_SCOPE_LOCAL;
pub const MPI_T_SCOPE_GROUP: _bindgen_ty_7 = _bindgen_ty_7::MPI_T_SCOPE_GROUP;
pub const MPI_T_SCOPE_GROUP_EQ: _bindgen_ty_7 = _bindgen_ty_7::MPI_T_SCOPE_GROUP_EQ;
pub const MPI_T_SCOPE_ALL: _bindgen_ty_7 = _bindgen_ty_7::MPI_T_SCOPE_ALL;
pub const MPI_T_SCOPE_ALL_EQ: _bindgen_ty_7 = _bindgen_ty_7::MPI_T_SCOPE_ALL_EQ;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_7 {
    MPI_T_SCOPE_CONSTANT = 0,
    MPI_T_SCOPE_READONLY = 1,
    MPI_T_SCOPE_LOCAL = 2,
    MPI_T_SCOPE_GROUP = 3,
    MPI_T_SCOPE_GROUP_EQ = 4,
    MPI_T_SCOPE_ALL = 5,
    MPI_T_SCOPE_ALL_EQ = 6,
}
pub const MPI_T_BIND_NO_OBJECT: _bindgen_ty_8 = _bindgen_ty_8::MPI_T_BIND_NO_OBJECT;
pub const MPI_T_BIND_MPI_COMM: _bindgen_ty_8 = _bindgen_ty_8::MPI_T_BIND_MPI_COMM;
pub const MPI_T_BIND_MPI_DATATYPE: _bindgen_ty_8 = _bindgen_ty_8::MPI_T_BIND_MPI_DATATYPE;
pub const MPI_T_BIND_MPI_ERRHANDLER: _bindgen_ty_8 = _bindgen_ty_8::MPI_T_BIND_MPI_ERRHANDLER;
pub const MPI_T_BIND_MPI_FILE: _bindgen_ty_8 = _bindgen_ty_8::MPI_T_BIND_MPI_FILE;
pub const MPI_T_BIND_MPI_GROUP: _bindgen_ty_8 = _bindgen_ty_8::MPI_T_BIND_MPI_GROUP;
pub const MPI_T_BIND_MPI_OP: _bindgen_ty_8 = _bindgen_ty_8::MPI_T_BIND_MPI_OP;
pub const MPI_T_BIND_MPI_REQUEST: _bindgen_ty_8 = _bindgen_ty_8::MPI_T_BIND_MPI_REQUEST;
pub const MPI_T_BIND_MPI_WIN: _bindgen_ty_8 = _bindgen_ty_8::MPI_T_BIND_MPI_WIN;
pub const MPI_T_BIND_MPI_MESSAGE: _bindgen_ty_8 = _bindgen_ty_8::MPI_T_BIND_MPI_MESSAGE;
pub const MPI_T_BIND_MPI_INFO: _bindgen_ty_8 = _bindgen_ty_8::MPI_T_BIND_MPI_INFO;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_8 {
    MPI_T_BIND_NO_OBJECT = 0,
    MPI_T_BIND_MPI_COMM = 1,
    MPI_T_BIND_MPI_DATATYPE = 2,
    MPI_T_BIND_MPI_ERRHANDLER = 3,
    MPI_T_BIND_MPI_FILE = 4,
    MPI_T_BIND_MPI_GROUP = 5,
    MPI_T_BIND_MPI_OP = 6,
    MPI_T_BIND_MPI_REQUEST = 7,
    MPI_T_BIND_MPI_WIN = 8,
    MPI_T_BIND_MPI_MESSAGE = 9,
    MPI_T_BIND_MPI_INFO = 10,
}
pub const MPI_T_PVAR_CLASS_STATE: _bindgen_ty_9 = _bindgen_ty_9::MPI_T_PVAR_CLASS_STATE;
pub const MPI_T_PVAR_CLASS_LEVEL: _bindgen_ty_9 = _bindgen_ty_9::MPI_T_PVAR_CLASS_LEVEL;
pub const MPI_T_PVAR_CLASS_SIZE: _bindgen_ty_9 = _bindgen_ty_9::MPI_T_PVAR_CLASS_SIZE;
pub const MPI_T_PVAR_CLASS_PERCENTAGE: _bindgen_ty_9 = _bindgen_ty_9::MPI_T_PVAR_CLASS_PERCENTAGE;
pub const MPI_T_PVAR_CLASS_HIGHWATERMARK: _bindgen_ty_9 =
    _bindgen_ty_9::MPI_T_PVAR_CLASS_HIGHWATERMARK;
pub const MPI_T_PVAR_CLASS_LOWWATERMARK: _bindgen_ty_9 =
    _bindgen_ty_9::MPI_T_PVAR_CLASS_LOWWATERMARK;
pub const MPI_T_PVAR_CLASS_COUNTER: _bindgen_ty_9 = _bindgen_ty_9::MPI_T_PVAR_CLASS_COUNTER;
pub const MPI_T_PVAR_CLASS_AGGREGATE: _bindgen_ty_9 = _bindgen_ty_9::MPI_T_PVAR_CLASS_AGGREGATE;
pub const MPI_T_PVAR_CLASS_TIMER: _bindgen_ty_9 = _bindgen_ty_9::MPI_T_PVAR_CLASS_TIMER;
pub const MPI_T_PVAR_CLASS_GENERIC: _bindgen_ty_9 = _bindgen_ty_9::MPI_T_PVAR_CLASS_GENERIC;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_9 {
    MPI_T_PVAR_CLASS_STATE = 0,
    MPI_T_PVAR_CLASS_LEVEL = 1,
    MPI_T_PVAR_CLASS_SIZE = 2,
    MPI_T_PVAR_CLASS_PERCENTAGE = 3,
    MPI_T_PVAR_CLASS_HIGHWATERMARK = 4,
    MPI_T_PVAR_CLASS_LOWWATERMARK = 5,
    MPI_T_PVAR_CLASS_COUNTER = 6,
    MPI_T_PVAR_CLASS_AGGREGATE = 7,
    MPI_T_PVAR_CLASS_TIMER = 8,
    MPI_T_PVAR_CLASS_GENERIC = 9,
}
extern "C" {
    pub fn OMPI_C_MPI_TYPE_NULL_DELETE_FN(
        datatype: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        attribute_val_out: *mut ::std::os::raw::c_void,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_TYPE_NULL_COPY_FN(
        datatype: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_TYPE_DUP_FN(
        datatype: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_COMM_NULL_DELETE_FN(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val_out: *mut ::std::os::raw::c_void,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_COMM_NULL_COPY_FN(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_COMM_DUP_FN(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_WIN_NULL_DELETE_FN(
        window: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        attribute_val_out: *mut ::std::os::raw::c_void,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_WIN_NULL_COPY_FN(
        window: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_WIN_DUP_FN(
        window: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_communicator_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_comm_world: ompi_predefined_communicator_t;
}
extern "C" {
    pub static mut ompi_mpi_comm_self: ompi_predefined_communicator_t;
}
extern "C" {
    pub static mut ompi_mpi_comm_null: ompi_predefined_communicator_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_group_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_group_empty: ompi_predefined_group_t;
}
extern "C" {
    pub static mut ompi_mpi_group_null: ompi_predefined_group_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_request_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_request_null: ompi_predefined_request_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_message_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_message_null: ompi_predefined_message_t;
}
extern "C" {
    pub static mut ompi_message_no_proc: ompi_predefined_message_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_op_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_op_null: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_min: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_max: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_sum: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_prod: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_land: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_band: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_lor: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_bor: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_lxor: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_bxor: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_maxloc: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_minloc: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_replace: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_no_op: ompi_predefined_op_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_datatype_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_datatype_null: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_char: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_signed_char: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_unsigned_char: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_byte: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_short: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_unsigned_short: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_unsigned: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_long: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_unsigned_long: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_long_long_int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_unsigned_long_long: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_float: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_double: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_long_double: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_wchar: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_packed: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_cxx_bool: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_cxx_cplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_cxx_dblcplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_cxx_ldblcplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_logical: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_character: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_integer: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_real: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_dblprec: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_cplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_dblcplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_ldblcplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_2int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_2integer: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_2real: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_2dblprec: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_2cplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_2dblcplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_float_int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_double_int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_longdbl_int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_short_int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_long_int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_logical1: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_logical2: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_logical4: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_logical8: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_integer1: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_integer2: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_integer4: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_integer8: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_integer16: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_real2: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_real4: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_real8: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_real16: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_complex8: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_complex16: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_complex32: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_int8_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_uint8_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_int16_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_uint16_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_int32_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_uint32_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_int64_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_uint64_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_aint: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_offset: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_count: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_c_bool: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_c_float_complex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_c_double_complex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_c_long_double_complex: ompi_predefined_datatype_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_errhandler_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_errhandler_null: ompi_predefined_errhandler_t;
}
extern "C" {
    pub static mut ompi_mpi_errors_are_fatal: ompi_predefined_errhandler_t;
}
extern "C" {
    pub static mut ompi_mpi_errors_return: ompi_predefined_errhandler_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_win_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_win_null: ompi_predefined_win_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_file_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_file_null: ompi_predefined_file_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_info_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_info_null: ompi_predefined_info_t;
}
extern "C" {
    pub static mut ompi_mpi_info_env: ompi_predefined_info_t;
}
extern "C" {
    pub static mut MPI_F_STATUS_IGNORE: *mut ::std::os::raw::c_int;
}
extern "C" {
    pub static mut MPI_F_STATUSES_IGNORE: *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Abort(comm: MPI_Comm, errorcode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Add_error_class(errorclass: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Add_error_code(
        errorclass: ::std::os::raw::c_int,
        errorcode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Add_error_string(
        errorcode: ::std::os::raw::c_int,
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iallgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iallgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Alloc_mem(
        size: MPI_Aint,
        info: MPI_Info,
        baseptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Allreduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iallreduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ialltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ialltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ialltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Barrier(comm: MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ibarrier(comm: MPI_Comm, request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Bcast(
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Bsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ibcast(
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Bsend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Buffer_attach(
        buffer: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Buffer_detach(
        buffer: *mut ::std::os::raw::c_void,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cancel(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_coords(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        maxdims: ::std::os::raw::c_int,
        coords: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_create(
        old_comm: MPI_Comm,
        ndims: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
        periods: *const ::std::os::raw::c_int,
        reorder: ::std::os::raw::c_int,
        comm_cart: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_get(
        comm: MPI_Comm,
        maxdims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
        periods: *mut ::std::os::raw::c_int,
        coords: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_map(
        comm: MPI_Comm,
        ndims: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
        periods: *const ::std::os::raw::c_int,
        newrank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_rank(
        comm: MPI_Comm,
        coords: *const ::std::os::raw::c_int,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_shift(
        comm: MPI_Comm,
        direction: ::std::os::raw::c_int,
        disp: ::std::os::raw::c_int,
        rank_source: *mut ::std::os::raw::c_int,
        rank_dest: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_sub(
        comm: MPI_Comm,
        remain_dims: *const ::std::os::raw::c_int,
        new_comm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cartdim_get(
        comm: MPI_Comm,
        ndims: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Close_port(port_name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_accept(
        port_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_c2f(comm: MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_call_errhandler(
        comm: MPI_Comm,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_compare(
        comm1: MPI_Comm,
        comm2: MPI_Comm,
        result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_connect(
        port_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_create_errhandler(
        function: MPI_Comm_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_create_keyval(
        comm_copy_attr_fn: MPI_Comm_copy_attr_function,
        comm_delete_attr_fn: MPI_Comm_delete_attr_function,
        comm_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_create_group(
        comm: MPI_Comm,
        group: MPI_Group,
        tag: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_create(
        comm: MPI_Comm,
        group: MPI_Group,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_delete_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_disconnect(comm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_dup(comm: MPI_Comm, newcomm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_idup(
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_dup_with_info(
        comm: MPI_Comm,
        info: MPI_Info,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_f2c(comm: ::std::os::raw::c_int) -> MPI_Comm;
}
extern "C" {
    pub fn MPI_Comm_free_keyval(comm_keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_free(comm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_get_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Dist_graph_create(
        comm_old: MPI_Comm,
        n: ::std::os::raw::c_int,
        nodes: *const ::std::os::raw::c_int,
        degrees: *const ::std::os::raw::c_int,
        targets: *const ::std::os::raw::c_int,
        weights: *const ::std::os::raw::c_int,
        info: MPI_Info,
        reorder: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Dist_graph_create_adjacent(
        comm_old: MPI_Comm,
        indegree: ::std::os::raw::c_int,
        sources: *const ::std::os::raw::c_int,
        sourceweights: *const ::std::os::raw::c_int,
        outdegree: ::std::os::raw::c_int,
        destinations: *const ::std::os::raw::c_int,
        destweights: *const ::std::os::raw::c_int,
        info: MPI_Info,
        reorder: ::std::os::raw::c_int,
        comm_dist_graph: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Dist_graph_neighbors(
        comm: MPI_Comm,
        maxindegree: ::std::os::raw::c_int,
        sources: *mut ::std::os::raw::c_int,
        sourceweights: *mut ::std::os::raw::c_int,
        maxoutdegree: ::std::os::raw::c_int,
        destinations: *mut ::std::os::raw::c_int,
        destweights: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Dist_graph_neighbors_count(
        comm: MPI_Comm,
        inneighbors: *mut ::std::os::raw::c_int,
        outneighbors: *mut ::std::os::raw::c_int,
        weighted: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_get_errhandler(
        comm: MPI_Comm,
        erhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_get_info(comm: MPI_Comm, info_used: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_get_name(
        comm: MPI_Comm,
        comm_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_get_parent(parent: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_group(comm: MPI_Comm, group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_join(
        fd: ::std::os::raw::c_int,
        intercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_rank(comm: MPI_Comm, rank: *mut ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_remote_group(comm: MPI_Comm, group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_remote_size(
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_set_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_set_errhandler(
        comm: MPI_Comm,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_set_info(comm: MPI_Comm, info: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_set_name(
        comm: MPI_Comm,
        comm_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_size(comm: MPI_Comm, size: *mut ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_spawn(
        command: *const ::std::os::raw::c_char,
        argv: *mut *mut ::std::os::raw::c_char,
        maxprocs: ::std::os::raw::c_int,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        intercomm: *mut MPI_Comm,
        array_of_errcodes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_spawn_multiple(
        count: ::std::os::raw::c_int,
        array_of_commands: *mut *mut ::std::os::raw::c_char,
        array_of_argv: *mut *mut *mut ::std::os::raw::c_char,
        array_of_maxprocs: *const ::std::os::raw::c_int,
        array_of_info: *const MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        intercomm: *mut MPI_Comm,
        array_of_errcodes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_split(
        comm: MPI_Comm,
        color: ::std::os::raw::c_int,
        key: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_split_type(
        comm: MPI_Comm,
        split_type: ::std::os::raw::c_int,
        key: ::std::os::raw::c_int,
        info: MPI_Info,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_test_inter(
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Compare_and_swap(
        origin_addr: *const ::std::os::raw::c_void,
        compare_addr: *const ::std::os::raw::c_void,
        result_addr: *mut ::std::os::raw::c_void,
        datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Dims_create(
        nnodes: ::std::os::raw::c_int,
        ndims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Errhandler_c2f(errhandler: MPI_Errhandler) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Errhandler_f2c(errhandler: ::std::os::raw::c_int) -> MPI_Errhandler;
}
extern "C" {
    pub fn MPI_Errhandler_free(errhandler: *mut MPI_Errhandler) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Error_class(
        errorcode: ::std::os::raw::c_int,
        errorclass: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Error_string(
        errorcode: ::std::os::raw::c_int,
        string: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Exscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Fetch_and_op(
        origin_addr: *const ::std::os::raw::c_void,
        result_addr: *mut ::std::os::raw::c_void,
        datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iexscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_c2f(file: MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_f2c(file: ::std::os::raw::c_int) -> MPI_File;
}
extern "C" {
    pub fn MPI_File_call_errhandler(
        fh: MPI_File,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_create_errhandler(
        function: MPI_File_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_set_errhandler(
        file: MPI_File,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_errhandler(
        file: MPI_File,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_open(
        comm: MPI_Comm,
        filename: *const ::std::os::raw::c_char,
        amode: ::std::os::raw::c_int,
        info: MPI_Info,
        fh: *mut MPI_File,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_close(fh: *mut MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_delete(
        filename: *const ::std::os::raw::c_char,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_set_size(fh: MPI_File, size: MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_preallocate(fh: MPI_File, size: MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_size(fh: MPI_File, size: *mut MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_group(fh: MPI_File, group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_amode(
        fh: MPI_File,
        amode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_set_info(fh: MPI_File, info: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_info(fh: MPI_File, info_used: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_set_view(
        fh: MPI_File,
        disp: MPI_Offset,
        etype: MPI_Datatype,
        filetype: MPI_Datatype,
        datarep: *const ::std::os::raw::c_char,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_view(
        fh: MPI_File,
        disp: *mut MPI_Offset,
        etype: *mut MPI_Datatype,
        filetype: *mut MPI_Datatype,
        datarep: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iread_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iwrite_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iread_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iwrite_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_all(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_all(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iread(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iwrite(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iread_all(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iwrite_all(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_seek(
        fh: MPI_File,
        offset: MPI_Offset,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_position(fh: MPI_File, offset: *mut MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_byte_offset(
        fh: MPI_File,
        offset: MPI_Offset,
        disp: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_shared(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_shared(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iread_shared(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iwrite_shared(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_ordered(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_ordered(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_seek_shared(
        fh: MPI_File,
        offset: MPI_Offset,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_position_shared(
        fh: MPI_File,
        offset: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_at_all_begin(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_at_all_end(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_at_all_begin(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_at_all_end(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_all_begin(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_all_end(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_all_begin(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_all_end(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_ordered_begin(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_ordered_end(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_ordered_begin(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_ordered_end(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_type_extent(
        fh: MPI_File,
        datatype: MPI_Datatype,
        extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_set_atomicity(
        fh: MPI_File,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_atomicity(
        fh: MPI_File,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_sync(fh: MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Finalized(flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Free_mem(base: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Gather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Igather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Gatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Igatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_address(
        location: *const ::std::os::raw::c_void,
        address: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_count(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_elements(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_elements_x(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get(
        origin_addr: *mut ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        result_addr: *mut ::std::os::raw::c_void,
        result_count: ::std::os::raw::c_int,
        result_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_library_version(
        version: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_processor_name(
        name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_version(
        version: *mut ::std::os::raw::c_int,
        subversion: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graph_create(
        comm_old: MPI_Comm,
        nnodes: ::std::os::raw::c_int,
        index: *const ::std::os::raw::c_int,
        edges: *const ::std::os::raw::c_int,
        reorder: ::std::os::raw::c_int,
        comm_graph: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graph_get(
        comm: MPI_Comm,
        maxindex: ::std::os::raw::c_int,
        maxedges: ::std::os::raw::c_int,
        index: *mut ::std::os::raw::c_int,
        edges: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graph_map(
        comm: MPI_Comm,
        nnodes: ::std::os::raw::c_int,
        index: *const ::std::os::raw::c_int,
        edges: *const ::std::os::raw::c_int,
        newrank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graph_neighbors_count(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        nneighbors: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graph_neighbors(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        maxneighbors: ::std::os::raw::c_int,
        neighbors: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graphdims_get(
        comm: MPI_Comm,
        nnodes: *mut ::std::os::raw::c_int,
        nedges: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Grequest_complete(request: MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Grequest_start(
        query_fn: MPI_Grequest_query_function,
        free_fn: MPI_Grequest_free_function,
        cancel_fn: MPI_Grequest_cancel_function,
        extra_state: *mut ::std::os::raw::c_void,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_c2f(group: MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_compare(
        group1: MPI_Group,
        group2: MPI_Group,
        result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_difference(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_excl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks: *const ::std::os::raw::c_int,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_f2c(group: ::std::os::raw::c_int) -> MPI_Group;
}
extern "C" {
    pub fn MPI_Group_free(group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_incl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks: *const ::std::os::raw::c_int,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_intersection(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_range_excl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranges: *mut [::std::os::raw::c_int; 3usize],
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_range_incl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranges: *mut [::std::os::raw::c_int; 3usize],
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_rank(
        group: MPI_Group,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_size(
        group: MPI_Group,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_translate_ranks(
        group1: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks1: *const ::std::os::raw::c_int,
        group2: MPI_Group,
        ranks2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_union(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ibsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Improbe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Imrecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        type_: MPI_Datatype,
        message: *mut MPI_Message,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_c2f(info: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_create(info: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_delete(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_dup(info: MPI_Info, newinfo: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_f2c(info: ::std::os::raw::c_int) -> MPI_Info;
}
extern "C" {
    pub fn MPI_Info_free(info: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_get(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        valuelen: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_char,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_get_nkeys(
        info: MPI_Info,
        nkeys: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_get_nthkey(
        info: MPI_Info,
        n: ::std::os::raw::c_int,
        key: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_get_valuelen(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        valuelen: *mut ::std::os::raw::c_int,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_set(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Init(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Initialized(flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Init_thread(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
        required: ::std::os::raw::c_int,
        provided: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Intercomm_create(
        local_comm: MPI_Comm,
        local_leader: ::std::os::raw::c_int,
        bridge_comm: MPI_Comm,
        remote_leader: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        newintercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Intercomm_merge(
        intercomm: MPI_Comm,
        high: ::std::os::raw::c_int,
        newintercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iprobe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Irecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Irsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Isend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Issend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Is_thread_main(flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Lookup_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Message_c2f(message: MPI_Message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Message_f2c(message: ::std::os::raw::c_int) -> MPI_Message;
}
extern "C" {
    pub fn MPI_Mprobe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Mrecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        type_: MPI_Datatype,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ineighbor_allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ineighbor_allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ineighbor_alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ineighbor_alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const MPI_Aint,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const MPI_Aint,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ineighbor_alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const MPI_Aint,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const MPI_Aint,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Op_c2f(op: MPI_Op) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Op_commutative(
        op: MPI_Op,
        commute: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Op_create(
        function: MPI_User_function,
        commute: ::std::os::raw::c_int,
        op: *mut MPI_Op,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Open_port(
        info: MPI_Info,
        port_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Op_f2c(op: ::std::os::raw::c_int) -> MPI_Op;
}
extern "C" {
    pub fn MPI_Op_free(op: *mut MPI_Op) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pack_external(
        datarep: *const ::std::os::raw::c_char,
        inbuf: *const ::std::os::raw::c_void,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        outbuf: *mut ::std::os::raw::c_void,
        outsize: MPI_Aint,
        position: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pack_external_size(
        datarep: *const ::std::os::raw::c_char,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        size: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pack(
        inbuf: *const ::std::os::raw::c_void,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        outbuf: *mut ::std::os::raw::c_void,
        outsize: ::std::os::raw::c_int,
        position: *mut ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pack_size(
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pcontrol(level: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Probe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Publish_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Put(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Query_thread(provided: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Raccumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Recv_init(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Recv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Reduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ireduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Reduce_local(
        inbuf: *const ::std::os::raw::c_void,
        inoutbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Reduce_scatter(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ireduce_scatter(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Reduce_scatter_block(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ireduce_scatter_block(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Register_datarep(
        datarep: *const ::std::os::raw::c_char,
        read_conversion_fn: MPI_Datarep_conversion_function,
        write_conversion_fn: MPI_Datarep_conversion_function,
        dtype_file_extent_fn: MPI_Datarep_extent_function,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Request_c2f(request: MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Request_f2c(request: ::std::os::raw::c_int) -> MPI_Request;
}
extern "C" {
    pub fn MPI_Request_free(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Request_get_status(
        request: MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Rget(
        origin_addr: *mut ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Rget_accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        result_addr: *mut ::std::os::raw::c_void,
        result_count: ::std::os::raw::c_int,
        result_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Rput(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_cout: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Rsend(
        ibuf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Rsend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Scan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Scatter(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iscatter(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Scatterv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iscatterv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Send_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Send(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Sendrecv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Sendrecv_replace(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ssend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ssend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Start(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Startall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_c2f(
        c_status: *const MPI_Status,
        f_status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_f2c(
        f_status: *const ::std::os::raw::c_int,
        c_status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_set_cancelled(
        status: *mut MPI_Status,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_set_elements(
        status: *mut MPI_Status,
        datatype: MPI_Datatype,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_set_elements_x(
        status: *mut MPI_Status,
        datatype: MPI_Datatype,
        count: MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Testall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Testany(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        index: *mut ::std::os::raw::c_int,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Test(
        request: *mut MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Test_cancelled(
        status: *const MPI_Status,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Testsome(
        incount: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        outcount: *mut ::std::os::raw::c_int,
        array_of_indices: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Topo_test(
        comm: MPI_Comm,
        status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_c2f(datatype: MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_commit(type_: *mut MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_contiguous(
        count: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_darray(
        size: ::std::os::raw::c_int,
        rank: ::std::os::raw::c_int,
        ndims: ::std::os::raw::c_int,
        gsize_array: *const ::std::os::raw::c_int,
        distrib_array: *const ::std::os::raw::c_int,
        darg_array: *const ::std::os::raw::c_int,
        psize_array: *const ::std::os::raw::c_int,
        order: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_f90_complex(
        p: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_f90_integer(
        r: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_f90_real(
        p: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_hindexed_block(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_hindexed(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_hvector(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        stride: MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_keyval(
        type_copy_attr_fn: MPI_Type_copy_attr_function,
        type_delete_attr_fn: MPI_Type_delete_attr_function,
        type_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_indexed_block(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        array_of_displacements: *const ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_struct(
        count: ::std::os::raw::c_int,
        array_of_block_lengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        array_of_types: *const MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_subarray(
        ndims: ::std::os::raw::c_int,
        size_array: *const ::std::os::raw::c_int,
        subsize_array: *const ::std::os::raw::c_int,
        start_array: *const ::std::os::raw::c_int,
        order: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_resized(
        oldtype: MPI_Datatype,
        lb: MPI_Aint,
        extent: MPI_Aint,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_delete_attr(
        type_: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_dup(type_: MPI_Datatype, newtype: *mut MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_free(type_: *mut MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_free_keyval(type_keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_f2c(datatype: ::std::os::raw::c_int) -> MPI_Datatype;
}
extern "C" {
    pub fn MPI_Type_get_attr(
        type_: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_contents(
        mtype: MPI_Datatype,
        max_integers: ::std::os::raw::c_int,
        max_addresses: ::std::os::raw::c_int,
        max_datatypes: ::std::os::raw::c_int,
        array_of_integers: *mut ::std::os::raw::c_int,
        array_of_addresses: *mut MPI_Aint,
        array_of_datatypes: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_envelope(
        type_: MPI_Datatype,
        num_integers: *mut ::std::os::raw::c_int,
        num_addresses: *mut ::std::os::raw::c_int,
        num_datatypes: *mut ::std::os::raw::c_int,
        combiner: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_extent(
        type_: MPI_Datatype,
        lb: *mut MPI_Aint,
        extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_extent_x(
        type_: MPI_Datatype,
        lb: *mut MPI_Count,
        extent: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_name(
        type_: MPI_Datatype,
        type_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_true_extent(
        datatype: MPI_Datatype,
        true_lb: *mut MPI_Aint,
        true_extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_true_extent_x(
        datatype: MPI_Datatype,
        true_lb: *mut MPI_Count,
        true_extent: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_indexed(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_match_size(
        typeclass: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        type_: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_set_attr(
        type_: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        attr_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_set_name(
        type_: MPI_Datatype,
        type_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_size(
        type_: MPI_Datatype,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_size_x(type_: MPI_Datatype, size: *mut MPI_Count) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_vector(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Unpack(
        inbuf: *const ::std::os::raw::c_void,
        insize: ::std::os::raw::c_int,
        position: *mut ::std::os::raw::c_int,
        outbuf: *mut ::std::os::raw::c_void,
        outcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Unpublish_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Unpack_external(
        datarep: *const ::std::os::raw::c_char,
        inbuf: *const ::std::os::raw::c_void,
        insize: MPI_Aint,
        position: *mut MPI_Aint,
        outbuf: *mut ::std::os::raw::c_void,
        outcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Waitall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Waitany(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        index: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Wait(request: *mut MPI_Request, status: *mut MPI_Status) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Waitsome(
        incount: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        outcount: *mut ::std::os::raw::c_int,
        array_of_indices: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_allocate(
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        baseptr: *mut ::std::os::raw::c_void,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_allocate_shared(
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        baseptr: *mut ::std::os::raw::c_void,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_attach(
        win: MPI_Win,
        base: *mut ::std::os::raw::c_void,
        size: MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_c2f(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_call_errhandler(
        win: MPI_Win,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_complete(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_create(
        base: *mut ::std::os::raw::c_void,
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_create_dynamic(
        info: MPI_Info,
        comm: MPI_Comm,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_create_errhandler(
        function: MPI_Win_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_create_keyval(
        win_copy_attr_fn: MPI_Win_copy_attr_function,
        win_delete_attr_fn: MPI_Win_delete_attr_function,
        win_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_delete_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_detach(
        win: MPI_Win,
        base: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_f2c(win: ::std::os::raw::c_int) -> MPI_Win;
}
extern "C" {
    pub fn MPI_Win_fence(assert: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_flush(rank: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_flush_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_flush_local(rank: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_flush_local_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_free(win: *mut MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_free_keyval(win_keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_get_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_get_errhandler(
        win: MPI_Win,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_get_group(win: MPI_Win, group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_get_info(win: MPI_Win, info_used: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_get_name(
        win: MPI_Win,
        win_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_lock(
        lock_type: ::std::os::raw::c_int,
        rank: ::std::os::raw::c_int,
        assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_lock_all(assert: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_post(
        group: MPI_Group,
        assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_set_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_set_errhandler(
        win: MPI_Win,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_set_info(win: MPI_Win, info: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_set_name(
        win: MPI_Win,
        win_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_shared_query(
        win: MPI_Win,
        rank: ::std::os::raw::c_int,
        size: *mut MPI_Aint,
        disp_unit: *mut ::std::os::raw::c_int,
        baseptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_start(
        group: MPI_Group,
        assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_sync(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_test(win: MPI_Win, flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_unlock(rank: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_unlock_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_wait(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Wtick() -> f64;
}
extern "C" {
    pub fn MPI_Wtime() -> f64;
}
extern "C" {
    pub fn PMPI_Abort(comm: MPI_Comm, errorcode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Add_error_class(errorclass: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Add_error_code(
        errorclass: ::std::os::raw::c_int,
        errorcode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Add_error_string(
        errorcode: ::std::os::raw::c_int,
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iallgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iallgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Alloc_mem(
        size: MPI_Aint,
        info: MPI_Info,
        baseptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Allreduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iallreduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ialltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ialltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ialltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Dist_graph_create(
        comm_old: MPI_Comm,
        n: ::std::os::raw::c_int,
        nodes: *const ::std::os::raw::c_int,
        degrees: *const ::std::os::raw::c_int,
        targets: *const ::std::os::raw::c_int,
        weights: *const ::std::os::raw::c_int,
        info: MPI_Info,
        reorder: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Dist_graph_create_adjacent(
        comm_old: MPI_Comm,
        indegree: ::std::os::raw::c_int,
        sources: *const ::std::os::raw::c_int,
        sourceweights: *const ::std::os::raw::c_int,
        outdegree: ::std::os::raw::c_int,
        destinations: *const ::std::os::raw::c_int,
        destweights: *const ::std::os::raw::c_int,
        info: MPI_Info,
        reorder: ::std::os::raw::c_int,
        comm_dist_graph: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Dist_graph_neighbors(
        comm: MPI_Comm,
        maxindegree: ::std::os::raw::c_int,
        sources: *mut ::std::os::raw::c_int,
        sourceweights: *mut ::std::os::raw::c_int,
        maxoutdegree: ::std::os::raw::c_int,
        destinations: *mut ::std::os::raw::c_int,
        destweights: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Dist_graph_neighbors_count(
        comm: MPI_Comm,
        inneighbors: *mut ::std::os::raw::c_int,
        outneighbors: *mut ::std::os::raw::c_int,
        weighted: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Barrier(comm: MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ibarrier(comm: MPI_Comm, request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Bcast(
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ibcast(
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Bsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Bsend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Buffer_attach(
        buffer: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Buffer_detach(
        buffer: *mut ::std::os::raw::c_void,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cancel(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_coords(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        maxdims: ::std::os::raw::c_int,
        coords: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_create(
        old_comm: MPI_Comm,
        ndims: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
        periods: *const ::std::os::raw::c_int,
        reorder: ::std::os::raw::c_int,
        comm_cart: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_get(
        comm: MPI_Comm,
        maxdims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
        periods: *mut ::std::os::raw::c_int,
        coords: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_map(
        comm: MPI_Comm,
        ndims: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
        periods: *const ::std::os::raw::c_int,
        newrank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_rank(
        comm: MPI_Comm,
        coords: *const ::std::os::raw::c_int,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_shift(
        comm: MPI_Comm,
        direction: ::std::os::raw::c_int,
        disp: ::std::os::raw::c_int,
        rank_source: *mut ::std::os::raw::c_int,
        rank_dest: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_sub(
        comm: MPI_Comm,
        remain_dims: *const ::std::os::raw::c_int,
        new_comm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cartdim_get(
        comm: MPI_Comm,
        ndims: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Close_port(port_name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_accept(
        port_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_c2f(comm: MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_call_errhandler(
        comm: MPI_Comm,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_compare(
        comm1: MPI_Comm,
        comm2: MPI_Comm,
        result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_connect(
        port_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_create_errhandler(
        function: MPI_Comm_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_create_keyval(
        comm_copy_attr_fn: MPI_Comm_copy_attr_function,
        comm_delete_attr_fn: MPI_Comm_delete_attr_function,
        comm_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_create_group(
        comm: MPI_Comm,
        group: MPI_Group,
        tag: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_create(
        comm: MPI_Comm,
        group: MPI_Group,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_delete_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_disconnect(comm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_dup(comm: MPI_Comm, newcomm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_idup(
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_dup_with_info(
        comm: MPI_Comm,
        info: MPI_Info,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_f2c(comm: ::std::os::raw::c_int) -> MPI_Comm;
}
extern "C" {
    pub fn PMPI_Comm_free_keyval(comm_keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_free(comm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_get_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_get_errhandler(
        comm: MPI_Comm,
        erhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_get_info(comm: MPI_Comm, info_used: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_get_name(
        comm: MPI_Comm,
        comm_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_get_parent(parent: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_group(comm: MPI_Comm, group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_join(
        fd: ::std::os::raw::c_int,
        intercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_rank(
        comm: MPI_Comm,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_remote_group(comm: MPI_Comm, group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_remote_size(
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_set_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_set_errhandler(
        comm: MPI_Comm,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_set_info(comm: MPI_Comm, info: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_set_name(
        comm: MPI_Comm,
        comm_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_size(
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_spawn(
        command: *const ::std::os::raw::c_char,
        argv: *mut *mut ::std::os::raw::c_char,
        maxprocs: ::std::os::raw::c_int,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        intercomm: *mut MPI_Comm,
        array_of_errcodes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_spawn_multiple(
        count: ::std::os::raw::c_int,
        array_of_commands: *mut *mut ::std::os::raw::c_char,
        array_of_argv: *mut *mut *mut ::std::os::raw::c_char,
        array_of_maxprocs: *const ::std::os::raw::c_int,
        array_of_info: *const MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        intercomm: *mut MPI_Comm,
        array_of_errcodes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_split(
        comm: MPI_Comm,
        color: ::std::os::raw::c_int,
        key: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_split_type(
        comm: MPI_Comm,
        split_type: ::std::os::raw::c_int,
        key: ::std::os::raw::c_int,
        info: MPI_Info,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_test_inter(
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Compare_and_swap(
        origin_addr: *const ::std::os::raw::c_void,
        compare_addr: *const ::std::os::raw::c_void,
        result_addr: *mut ::std::os::raw::c_void,
        datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Dims_create(
        nnodes: ::std::os::raw::c_int,
        ndims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Errhandler_c2f(errhandler: MPI_Errhandler) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Errhandler_f2c(errhandler: ::std::os::raw::c_int) -> MPI_Errhandler;
}
extern "C" {
    pub fn PMPI_Errhandler_free(errhandler: *mut MPI_Errhandler) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Error_class(
        errorcode: ::std::os::raw::c_int,
        errorclass: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Error_string(
        errorcode: ::std::os::raw::c_int,
        string: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Exscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Fetch_and_op(
        origin_addr: *const ::std::os::raw::c_void,
        result_addr: *mut ::std::os::raw::c_void,
        datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iexscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_c2f(file: MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_f2c(file: ::std::os::raw::c_int) -> MPI_File;
}
extern "C" {
    pub fn PMPI_File_call_errhandler(
        fh: MPI_File,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_create_errhandler(
        function: MPI_File_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_set_errhandler(
        file: MPI_File,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_errhandler(
        file: MPI_File,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_open(
        comm: MPI_Comm,
        filename: *const ::std::os::raw::c_char,
        amode: ::std::os::raw::c_int,
        info: MPI_Info,
        fh: *mut MPI_File,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_close(fh: *mut MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_delete(
        filename: *const ::std::os::raw::c_char,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_set_size(fh: MPI_File, size: MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_preallocate(fh: MPI_File, size: MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_size(fh: MPI_File, size: *mut MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_group(fh: MPI_File, group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_amode(
        fh: MPI_File,
        amode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_set_info(fh: MPI_File, info: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_info(fh: MPI_File, info_used: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_set_view(
        fh: MPI_File,
        disp: MPI_Offset,
        etype: MPI_Datatype,
        filetype: MPI_Datatype,
        datarep: *const ::std::os::raw::c_char,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_view(
        fh: MPI_File,
        disp: *mut MPI_Offset,
        etype: *mut MPI_Datatype,
        filetype: *mut MPI_Datatype,
        datarep: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iread_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iwrite_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iread_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iwrite_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_all(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_all(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iread(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iwrite(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iread_all(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iwrite_all(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_seek(
        fh: MPI_File,
        offset: MPI_Offset,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_position(fh: MPI_File, offset: *mut MPI_Offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_byte_offset(
        fh: MPI_File,
        offset: MPI_Offset,
        disp: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_shared(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_shared(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iread_shared(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iwrite_shared(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_ordered(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_ordered(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_seek_shared(
        fh: MPI_File,
        offset: MPI_Offset,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_position_shared(
        fh: MPI_File,
        offset: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_at_all_begin(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_at_all_end(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_at_all_begin(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_at_all_end(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_all_begin(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_all_end(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_all_begin(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_all_end(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_ordered_begin(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_ordered_end(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_ordered_begin(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_ordered_end(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_type_extent(
        fh: MPI_File,
        datatype: MPI_Datatype,
        extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_set_atomicity(
        fh: MPI_File,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_atomicity(
        fh: MPI_File,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_sync(fh: MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Finalized(flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Free_mem(base: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Gather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Igather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Gatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Igatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_address(
        location: *const ::std::os::raw::c_void,
        address: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_count(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_elements(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_elements_x(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get(
        origin_addr: *mut ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        result_addr: *mut ::std::os::raw::c_void,
        result_count: ::std::os::raw::c_int,
        result_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_library_version(
        version: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_processor_name(
        name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_version(
        version: *mut ::std::os::raw::c_int,
        subversion: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graph_create(
        comm_old: MPI_Comm,
        nnodes: ::std::os::raw::c_int,
        index: *const ::std::os::raw::c_int,
        edges: *const ::std::os::raw::c_int,
        reorder: ::std::os::raw::c_int,
        comm_graph: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graph_get(
        comm: MPI_Comm,
        maxindex: ::std::os::raw::c_int,
        maxedges: ::std::os::raw::c_int,
        index: *mut ::std::os::raw::c_int,
        edges: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graph_map(
        comm: MPI_Comm,
        nnodes: ::std::os::raw::c_int,
        index: *const ::std::os::raw::c_int,
        edges: *const ::std::os::raw::c_int,
        newrank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graph_neighbors_count(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        nneighbors: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graph_neighbors(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        maxneighbors: ::std::os::raw::c_int,
        neighbors: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graphdims_get(
        comm: MPI_Comm,
        nnodes: *mut ::std::os::raw::c_int,
        nedges: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Grequest_complete(request: MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Grequest_start(
        query_fn: MPI_Grequest_query_function,
        free_fn: MPI_Grequest_free_function,
        cancel_fn: MPI_Grequest_cancel_function,
        extra_state: *mut ::std::os::raw::c_void,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_c2f(group: MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_compare(
        group1: MPI_Group,
        group2: MPI_Group,
        result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_difference(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_excl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks: *const ::std::os::raw::c_int,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_f2c(group: ::std::os::raw::c_int) -> MPI_Group;
}
extern "C" {
    pub fn PMPI_Group_free(group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_incl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks: *const ::std::os::raw::c_int,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_intersection(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_range_excl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranges: *mut [::std::os::raw::c_int; 3usize],
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_range_incl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranges: *mut [::std::os::raw::c_int; 3usize],
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_rank(
        group: MPI_Group,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_size(
        group: MPI_Group,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_translate_ranks(
        group1: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks1: *const ::std::os::raw::c_int,
        group2: MPI_Group,
        ranks2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_union(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ibsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Improbe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Imrecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        type_: MPI_Datatype,
        message: *mut MPI_Message,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_c2f(info: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_create(info: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_delete(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_dup(info: MPI_Info, newinfo: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_f2c(info: ::std::os::raw::c_int) -> MPI_Info;
}
extern "C" {
    pub fn PMPI_Info_free(info: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_get(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        valuelen: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_char,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_get_nkeys(
        info: MPI_Info,
        nkeys: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_get_nthkey(
        info: MPI_Info,
        n: ::std::os::raw::c_int,
        key: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_get_valuelen(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        valuelen: *mut ::std::os::raw::c_int,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_set(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Init(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Initialized(flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Init_thread(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
        required: ::std::os::raw::c_int,
        provided: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Intercomm_create(
        local_comm: MPI_Comm,
        local_leader: ::std::os::raw::c_int,
        bridge_comm: MPI_Comm,
        remote_leader: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        newintercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Intercomm_merge(
        intercomm: MPI_Comm,
        high: ::std::os::raw::c_int,
        newintercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iprobe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Irecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Irsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Isend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Issend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Is_thread_main(flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Lookup_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Message_c2f(message: MPI_Message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Message_f2c(message: ::std::os::raw::c_int) -> MPI_Message;
}
extern "C" {
    pub fn PMPI_Mprobe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Mrecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        type_: MPI_Datatype,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ineighbor_allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ineighbor_allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ineighbor_alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ineighbor_alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const MPI_Aint,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const MPI_Aint,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ineighbor_alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const MPI_Aint,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const MPI_Aint,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Op_c2f(op: MPI_Op) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Op_commutative(
        op: MPI_Op,
        commute: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Op_create(
        function: MPI_User_function,
        commute: ::std::os::raw::c_int,
        op: *mut MPI_Op,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Open_port(
        info: MPI_Info,
        port_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Op_f2c(op: ::std::os::raw::c_int) -> MPI_Op;
}
extern "C" {
    pub fn PMPI_Op_free(op: *mut MPI_Op) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pack_external(
        datarep: *const ::std::os::raw::c_char,
        inbuf: *const ::std::os::raw::c_void,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        outbuf: *mut ::std::os::raw::c_void,
        outsize: MPI_Aint,
        position: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pack_external_size(
        datarep: *const ::std::os::raw::c_char,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        size: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pack(
        inbuf: *const ::std::os::raw::c_void,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        outbuf: *mut ::std::os::raw::c_void,
        outsize: ::std::os::raw::c_int,
        position: *mut ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pack_size(
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pcontrol(level: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Probe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Publish_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Put(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Query_thread(provided: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Raccumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Recv_init(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Recv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Reduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ireduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Reduce_local(
        inbuf: *const ::std::os::raw::c_void,
        inoutbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        arg1: MPI_Op,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Reduce_scatter(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ireduce_scatter(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Reduce_scatter_block(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ireduce_scatter_block(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Register_datarep(
        datarep: *const ::std::os::raw::c_char,
        read_conversion_fn: MPI_Datarep_conversion_function,
        write_conversion_fn: MPI_Datarep_conversion_function,
        dtype_file_extent_fn: MPI_Datarep_extent_function,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Request_c2f(request: MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Request_f2c(request: ::std::os::raw::c_int) -> MPI_Request;
}
extern "C" {
    pub fn PMPI_Request_free(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Request_get_status(
        request: MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Rget(
        origin_addr: *mut ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Rget_accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        result_addr: *mut ::std::os::raw::c_void,
        result_count: ::std::os::raw::c_int,
        result_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Rput(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_cout: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Rsend(
        ibuf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Rsend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Scan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Scatter(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iscatter(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Scatterv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iscatterv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Send_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Send(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Sendrecv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Sendrecv_replace(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ssend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ssend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Start(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Startall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_c2f(
        c_status: *const MPI_Status,
        f_status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_f2c(
        f_status: *const ::std::os::raw::c_int,
        c_status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_set_cancelled(
        status: *mut MPI_Status,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_set_elements(
        status: *mut MPI_Status,
        datatype: MPI_Datatype,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_set_elements_x(
        status: *mut MPI_Status,
        datatype: MPI_Datatype,
        count: MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Testall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Testany(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        index: *mut ::std::os::raw::c_int,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Test(
        request: *mut MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Test_cancelled(
        status: *const MPI_Status,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Testsome(
        incount: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        outcount: *mut ::std::os::raw::c_int,
        array_of_indices: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Topo_test(
        comm: MPI_Comm,
        status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_c2f(datatype: MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_commit(type_: *mut MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_contiguous(
        count: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_darray(
        size: ::std::os::raw::c_int,
        rank: ::std::os::raw::c_int,
        ndims: ::std::os::raw::c_int,
        gsize_array: *const ::std::os::raw::c_int,
        distrib_array: *const ::std::os::raw::c_int,
        darg_array: *const ::std::os::raw::c_int,
        psize_array: *const ::std::os::raw::c_int,
        order: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_f90_complex(
        p: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_f90_integer(
        r: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_f90_real(
        p: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_hindexed(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_hvector(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        stride: MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_keyval(
        type_copy_attr_fn: MPI_Type_copy_attr_function,
        type_delete_attr_fn: MPI_Type_delete_attr_function,
        type_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_hindexed_block(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_indexed_block(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        array_of_displacements: *const ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_struct(
        count: ::std::os::raw::c_int,
        array_of_block_lengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        array_of_types: *const MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_subarray(
        ndims: ::std::os::raw::c_int,
        size_array: *const ::std::os::raw::c_int,
        subsize_array: *const ::std::os::raw::c_int,
        start_array: *const ::std::os::raw::c_int,
        order: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_resized(
        oldtype: MPI_Datatype,
        lb: MPI_Aint,
        extent: MPI_Aint,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_delete_attr(
        type_: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_dup(type_: MPI_Datatype, newtype: *mut MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_free(type_: *mut MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_free_keyval(type_keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_f2c(datatype: ::std::os::raw::c_int) -> MPI_Datatype;
}
extern "C" {
    pub fn PMPI_Type_get_attr(
        type_: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_contents(
        mtype: MPI_Datatype,
        max_integers: ::std::os::raw::c_int,
        max_addresses: ::std::os::raw::c_int,
        max_datatypes: ::std::os::raw::c_int,
        array_of_integers: *mut ::std::os::raw::c_int,
        array_of_addresses: *mut MPI_Aint,
        array_of_datatypes: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_envelope(
        type_: MPI_Datatype,
        num_integers: *mut ::std::os::raw::c_int,
        num_addresses: *mut ::std::os::raw::c_int,
        num_datatypes: *mut ::std::os::raw::c_int,
        combiner: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_extent(
        type_: MPI_Datatype,
        lb: *mut MPI_Aint,
        extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_extent_x(
        type_: MPI_Datatype,
        lb: *mut MPI_Count,
        extent: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_name(
        type_: MPI_Datatype,
        type_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_true_extent(
        datatype: MPI_Datatype,
        true_lb: *mut MPI_Aint,
        true_extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_true_extent_x(
        datatype: MPI_Datatype,
        true_lb: *mut MPI_Count,
        true_extent: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_indexed(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_match_size(
        typeclass: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        type_: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_set_attr(
        type_: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        attr_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_set_name(
        type_: MPI_Datatype,
        type_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_size(
        type_: MPI_Datatype,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_size_x(type_: MPI_Datatype, size: *mut MPI_Count) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_vector(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Unpack(
        inbuf: *const ::std::os::raw::c_void,
        insize: ::std::os::raw::c_int,
        position: *mut ::std::os::raw::c_int,
        outbuf: *mut ::std::os::raw::c_void,
        outcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Unpublish_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Unpack_external(
        datarep: *const ::std::os::raw::c_char,
        inbuf: *const ::std::os::raw::c_void,
        insize: MPI_Aint,
        position: *mut MPI_Aint,
        outbuf: *mut ::std::os::raw::c_void,
        outcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Waitall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Waitany(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        index: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Wait(request: *mut MPI_Request, status: *mut MPI_Status) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Waitsome(
        incount: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        outcount: *mut ::std::os::raw::c_int,
        array_of_indices: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_allocate(
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        baseptr: *mut ::std::os::raw::c_void,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_allocate_shared(
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        baseptr: *mut ::std::os::raw::c_void,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_attach(
        win: MPI_Win,
        base: *mut ::std::os::raw::c_void,
        size: MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_c2f(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_call_errhandler(
        win: MPI_Win,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_complete(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_create(
        base: *mut ::std::os::raw::c_void,
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_create_dynamic(
        info: MPI_Info,
        comm: MPI_Comm,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_create_errhandler(
        function: MPI_Win_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_create_keyval(
        win_copy_attr_fn: MPI_Win_copy_attr_function,
        win_delete_attr_fn: MPI_Win_delete_attr_function,
        win_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_delete_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_detach(
        win: MPI_Win,
        base: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_f2c(win: ::std::os::raw::c_int) -> MPI_Win;
}
extern "C" {
    pub fn PMPI_Win_fence(assert: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_flush(rank: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_flush_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_flush_local(rank: ::std::os::raw::c_int, win: MPI_Win)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_flush_local_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_free(win: *mut MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_free_keyval(win_keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_get_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_get_errhandler(
        win: MPI_Win,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_get_group(win: MPI_Win, group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_get_info(win: MPI_Win, info_used: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_get_name(
        win: MPI_Win,
        win_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_lock(
        lock_type: ::std::os::raw::c_int,
        rank: ::std::os::raw::c_int,
        assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_lock_all(assert: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_post(
        group: MPI_Group,
        assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_set_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_set_errhandler(
        win: MPI_Win,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_set_info(win: MPI_Win, info: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_set_name(
        win: MPI_Win,
        win_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_shared_query(
        win: MPI_Win,
        rank: ::std::os::raw::c_int,
        size: *mut MPI_Aint,
        disp_unit: *mut ::std::os::raw::c_int,
        baseptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_start(
        group: MPI_Group,
        assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_sync(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_test(win: MPI_Win, flag: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_unlock(rank: ::std::os::raw::c_int, win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_unlock_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_wait(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Wtick() -> f64;
}
extern "C" {
    pub fn PMPI_Wtime() -> f64;
}
extern "C" {
    pub fn PMPI_T_init_thread(
        required: ::std::os::raw::c_int,
        provided: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_get_num(num_cvar: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_get_info(
        cvar_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        verbosity: *mut ::std::os::raw::c_int,
        datatype: *mut MPI_Datatype,
        enumtype: *mut MPI_T_enum,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        bind: *mut ::std::os::raw::c_int,
        scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_get_index(
        name: *const ::std::os::raw::c_char,
        cvar_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_handle_alloc(
        cvar_index: ::std::os::raw::c_int,
        obj_handle: *mut ::std::os::raw::c_void,
        handle: *mut MPI_T_cvar_handle,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_handle_free(handle: *mut MPI_T_cvar_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_read(
        handle: MPI_T_cvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_write(
        handle: MPI_T_cvar_handle,
        buf: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_num(num_cat: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_info(
        cat_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        num_cvars: *mut ::std::os::raw::c_int,
        num_pvars: *mut ::std::os::raw::c_int,
        num_categories: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_index(
        name: *const ::std::os::raw::c_char,
        category_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_cvars(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_pvars(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_categories(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_changed(stamp: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_get_num(num_pvar: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_get_info(
        pvar_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        verbosity: *mut ::std::os::raw::c_int,
        var_class: *mut ::std::os::raw::c_int,
        datatype: *mut MPI_Datatype,
        enumtype: *mut MPI_T_enum,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        bind: *mut ::std::os::raw::c_int,
        readonly: *mut ::std::os::raw::c_int,
        continuous: *mut ::std::os::raw::c_int,
        atomic: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_get_index(
        name: *const ::std::os::raw::c_char,
        var_class: ::std::os::raw::c_int,
        pvar_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_session_create(session: *mut MPI_T_pvar_session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_session_free(session: *mut MPI_T_pvar_session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_handle_alloc(
        session: MPI_T_pvar_session,
        pvar_index: ::std::os::raw::c_int,
        obj_handle: *mut ::std::os::raw::c_void,
        handle: *mut MPI_T_pvar_handle,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_handle_free(
        session: MPI_T_pvar_session,
        handle: *mut MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_start(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_stop(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_read(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_write(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_reset(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_readreset(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_enum_get_info(
        enumtype: MPI_T_enum,
        num: *mut ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_enum_get_item(
        enumtype: MPI_T_enum,
        index: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_init_thread(
        required: ::std::os::raw::c_int,
        provided: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_get_num(num_cvar: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_get_info(
        cvar_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        verbosity: *mut ::std::os::raw::c_int,
        datatype: *mut MPI_Datatype,
        enumtype: *mut MPI_T_enum,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        bind: *mut ::std::os::raw::c_int,
        scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_get_index(
        name: *const ::std::os::raw::c_char,
        cvar_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_handle_alloc(
        cvar_index: ::std::os::raw::c_int,
        obj_handle: *mut ::std::os::raw::c_void,
        handle: *mut MPI_T_cvar_handle,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_handle_free(handle: *mut MPI_T_cvar_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_read(
        handle: MPI_T_cvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_write(
        handle: MPI_T_cvar_handle,
        buf: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_num(num_cat: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_info(
        cat_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        num_cvars: *mut ::std::os::raw::c_int,
        num_pvars: *mut ::std::os::raw::c_int,
        num_categories: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_index(
        name: *const ::std::os::raw::c_char,
        category_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_cvars(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_pvars(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_categories(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_changed(stamp: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_get_num(num_pvar: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_get_info(
        pvar_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        verbosity: *mut ::std::os::raw::c_int,
        var_class: *mut ::std::os::raw::c_int,
        datatype: *mut MPI_Datatype,
        enumtype: *mut MPI_T_enum,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        bind: *mut ::std::os::raw::c_int,
        readonly: *mut ::std::os::raw::c_int,
        continuous: *mut ::std::os::raw::c_int,
        atomic: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_get_index(
        name: *const ::std::os::raw::c_char,
        var_class: ::std::os::raw::c_int,
        pvar_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_session_create(session: *mut MPI_T_pvar_session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_session_free(session: *mut MPI_T_pvar_session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_handle_alloc(
        session: MPI_T_pvar_session,
        pvar_index: ::std::os::raw::c_int,
        obj_handle: *mut ::std::os::raw::c_void,
        handle: *mut MPI_T_pvar_handle,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_handle_free(
        session: MPI_T_pvar_session,
        handle: *mut MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_start(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_stop(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_read(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_write(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_reset(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_readreset(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_enum_get_info(
        enumtype: MPI_T_enum,
        num: *mut ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_enum_get_item(
        enumtype: MPI_T_enum,
        index: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Attr_delete(comm: MPI_Comm, keyval: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Attr_delete(comm: MPI_Comm, keyval: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Attr_get(
        comm: MPI_Comm,
        keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Attr_get(
        comm: MPI_Comm,
        keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Attr_put(
        comm: MPI_Comm,
        keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Attr_put(
        comm: MPI_Comm,
        keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type MPI_Copy_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_void,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Delete_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn MPI_Keyval_create(
        copy_fn: MPI_Copy_function,
        delete_fn: MPI_Delete_function,
        keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Keyval_create(
        copy_fn: MPI_Copy_function,
        delete_fn: MPI_Delete_function,
        keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Keyval_free(keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Keyval_free(keyval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_DUP_FN(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_NULL_COPY_FN(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_NULL_DELETE_FN(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val_out: *mut ::std::os::raw::c_void,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut MPIU_ENUM: MPI_Datatype;
}
extern "C" {
    pub static mut MPIU_BOOL: MPI_Datatype;
}
extern "C" {
    pub static mut MPIU_FORTRANADDR: MPI_Datatype;
}
extern "C" {
    pub static mut MPIU_SIZE_T: MPI_Datatype;
}
extern "C" {
    pub static mut PETSC_STDOUT: *mut FILE;
}
extern "C" {
    pub static mut PETSC_STDERR: *mut FILE;
}
extern "C" {
    pub static mut PetscBools: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PETSC_RUNNING_ON_VALGRIND: PetscBool;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_10 = _bindgen_ty_10::FP_NAN;
pub const FP_INFINITE: _bindgen_ty_10 = _bindgen_ty_10::FP_INFINITE;
pub const FP_ZERO: _bindgen_ty_10 = _bindgen_ty_10::FP_ZERO;
pub const FP_SUBNORMAL: _bindgen_ty_10 = _bindgen_ty_10::FP_SUBNORMAL;
pub const FP_NORMAL: _bindgen_ty_10 = _bindgen_ty_10::FP_NORMAL;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_10 {
    FP_NAN = 0,
    FP_INFINITE = 1,
    FP_ZERO = 2,
    FP_SUBNORMAL = 3,
    FP_NORMAL = 4,
}
extern "C" {
    pub static mut PETSC_i: PetscComplex;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscScalarPrecision {
    PETSC_SCALAR_DOUBLE = 0,
    PETSC_SCALAR_SINGLE = 1,
    PETSC_SCALAR_LONG_DOUBLE = 2,
    PETSC_SCALAR_HALF = 3,
}
extern "C" {
    pub fn PetscIsInfReal(arg1: PetscReal) -> PetscBool;
}
extern "C" {
    pub fn PetscIsNanReal(arg1: PetscReal) -> PetscBool;
}
extern "C" {
    pub fn PetscIsNormalReal(arg1: PetscReal) -> PetscBool;
}
extern "C" {
    pub fn PetscIsCloseAtTol(
        arg1: PetscReal,
        arg2: PetscReal,
        arg3: PetscReal,
        arg4: PetscReal,
    ) -> PetscBool;
}
extern "C" {
    pub fn PetscEqualReal(arg1: PetscReal, arg2: PetscReal) -> PetscBool;
}
extern "C" {
    pub fn PetscEqualScalar(arg1: PetscScalar, arg2: PetscScalar) -> PetscBool;
}
pub type MatScalar = PetscScalar;
pub type MatReal = PetscReal;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct petsc_mpiu_2scalar {
    pub a: PetscScalar,
    pub b: PetscScalar,
}
#[test]
fn bindgen_test_layout_petsc_mpiu_2scalar() {
    assert_eq!(
        ::std::mem::size_of::<petsc_mpiu_2scalar>(),
        32usize,
        concat!("Size of: ", stringify!(petsc_mpiu_2scalar))
    );
    assert_eq!(
        ::std::mem::align_of::<petsc_mpiu_2scalar>(),
        8usize,
        concat!("Alignment of ", stringify!(petsc_mpiu_2scalar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<petsc_mpiu_2scalar>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(petsc_mpiu_2scalar),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<petsc_mpiu_2scalar>())).b as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(petsc_mpiu_2scalar),
            "::",
            stringify!(b)
        )
    );
}
extern "C" {
    pub static mut MPIU_2SCALAR: MPI_Datatype;
}
extern "C" {
    pub static mut MPIU_REAL_INT: MPI_Datatype;
}
extern "C" {
    pub static mut MPIU_SCALAR_INT: MPI_Datatype;
}
extern "C" {
    pub static mut MPI_4INT: MPI_Datatype;
}
extern "C" {
    pub static mut MPIU_4INT: MPI_Datatype;
}
extern "C" {
    pub fn PetscLinearRegression(
        arg1: PetscInt,
        arg2: *const PetscReal,
        arg3: *const PetscReal,
        arg4: *mut PetscReal,
        arg5: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscCopyModes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PETSC_COMM_WORLD: MPI_Comm;
}
extern "C" {
    pub static mut PETSC_MPI_THREAD_REQUIRED: PetscMPIInt;
}
extern "C" {
    pub static mut PetscBeganMPI: PetscBool;
}
extern "C" {
    pub static mut PetscErrorHandlingInitialized: PetscBool;
}
extern "C" {
    pub static mut PetscInitializeCalled: PetscBool;
}
extern "C" {
    pub static mut PetscFinalizeCalled: PetscBool;
}
extern "C" {
    pub static mut PetscViennaCLSynchronize: PetscBool;
}
extern "C" {
    pub fn PetscSetHelpVersionFunctions(
        arg1: ::std::option::Option<unsafe extern "C" fn(arg1: MPI_Comm) -> PetscErrorCode>,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: MPI_Comm) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscCommDuplicate(
        arg1: MPI_Comm,
        arg2: *mut MPI_Comm,
        arg3: *mut ::std::os::raw::c_int,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscCommDestroy(arg1: *mut MPI_Comm) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocA(
        arg1: ::std::os::raw::c_int,
        arg2: PetscBool,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: size_t,
        arg7: *mut ::std::os::raw::c_void,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFreeA(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_void,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscTrMalloc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: size_t,
            arg2: PetscBool,
            arg3: ::std::os::raw::c_int,
            arg4: *const ::std::os::raw::c_char,
            arg5: *const ::std::os::raw::c_char,
            arg6: *mut *mut ::std::os::raw::c_void,
        ) -> PetscErrorCode,
    >;
}
extern "C" {
    pub static mut PetscTrFree: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: *const ::std::os::raw::c_char,
            arg4: *const ::std::os::raw::c_char,
        ) -> PetscErrorCode,
    >;
}
extern "C" {
    pub static mut PetscTrRealloc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: size_t,
            arg2: ::std::os::raw::c_int,
            arg3: *const ::std::os::raw::c_char,
            arg4: *const ::std::os::raw::c_char,
            arg5: *mut *mut ::std::os::raw::c_void,
        ) -> PetscErrorCode,
    >;
}
extern "C" {
    pub fn PetscMallocSetCoalesce(arg1: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocSet(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: size_t,
                arg2: PetscBool,
                arg3: ::std::os::raw::c_int,
                arg4: *const ::std::os::raw::c_char,
                arg5: *const ::std::os::raw::c_char,
                arg6: *mut *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
                arg3: *const ::std::os::raw::c_char,
                arg4: *const ::std::os::raw::c_char,
            ) -> PetscErrorCode,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: size_t,
                arg2: ::std::os::raw::c_int,
                arg3: *const ::std::os::raw::c_char,
                arg4: *const ::std::os::raw::c_char,
                arg5: *mut *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocClear() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocSetDRAM() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocResetDRAM() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocDump(arg1: *mut FILE) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocView(arg1: *mut FILE) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocGetCurrentUsage(arg1: *mut PetscLogDouble) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocGetMaximumUsage(arg1: *mut PetscLogDouble) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocPushMaximumUsage(arg1: ::std::os::raw::c_int) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocPopMaximumUsage(
        arg1: ::std::os::raw::c_int,
        arg2: *mut PetscLogDouble,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocSetDebug(arg1: PetscBool, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocGetDebug(
        arg1: *mut PetscBool,
        arg2: *mut PetscBool,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocValidate(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocViewSet(arg1: PetscLogDouble) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocViewGet(arg1: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocLogRequestedSizeSet(arg1: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocLogRequestedSizeGet(arg1: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscDataTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn PetscDataTypeToMPIDataType(
        arg1: PetscDataType,
        arg2: *mut MPI_Datatype,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMPIDataTypeToPetscDataType(
        arg1: MPI_Datatype,
        arg2: *mut PetscDataType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscDataTypeGetSize(arg1: PetscDataType, arg2: *mut size_t) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscDataTypeFromString(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PetscDataType,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMemcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: size_t,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrlen(arg1: *const ::std::os::raw::c_char, arg2: *mut size_t) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrToArray(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrToArrayDestroy(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrcmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrgrt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrncmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: size_t,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrcat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrlcat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrncpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrchr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrtolower(arg1: *mut ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrtoupper(arg1: *mut ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrrchr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrrstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrendswith(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrbeginswith(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrendswithwhich(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const *const ::std::os::raw::c_char,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrallocpy(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrArrayallocpy(
        arg1: *const *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrArrayDestroy(arg1: *mut *mut *mut ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrNArrayallocpy(
        arg1: PetscInt,
        arg2: *const *const ::std::os::raw::c_char,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrNArrayDestroy(
        arg1: PetscInt,
        arg2: *mut *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrreplace(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrcmpNoError(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PetscBool,
    );
}
extern "C" {
    pub fn PetscTokenCreate(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: *mut PetscToken,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscTokenFind(
        arg1: PetscToken,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscTokenDestroy(arg1: *mut PetscToken) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStrInList(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscEListFind(
        arg1: PetscInt,
        arg2: *const *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut PetscInt,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscEnumFind(
        arg1: *const *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PetscEnum,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut MPIU_MAXSUM_OP: MPI_Op;
}
extern "C" {
    pub fn PetscMaxSum(
        arg1: MPI_Comm,
        arg2: *const PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MPIULong_Send(
        arg1: *mut ::std::os::raw::c_void,
        arg2: PetscInt,
        arg3: MPI_Datatype,
        arg4: PetscMPIInt,
        arg5: PetscMPIInt,
        arg6: MPI_Comm,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MPIULong_Recv(
        arg1: *mut ::std::os::raw::c_void,
        arg2: PetscInt,
        arg3: MPI_Datatype,
        arg4: PetscMPIInt,
        arg5: PetscMPIInt,
        arg6: MPI_Comm,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscFileModes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PETSC_MPI_ERROR_CLASS: PetscMPIInt;
}
extern "C" {
    pub static mut PETSC_MPI_ERROR_CODE: PetscMPIInt;
}
extern "C" {
    pub fn PetscAbortFindSourceFile_Private(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut petscwaitonerrorflg: PetscBool;
}
extern "C" {
    pub static mut petscindebugger: PetscBool;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscErrorType {
    PETSC_ERROR_INITIAL = 0,
    PETSC_ERROR_REPEAT = 1,
    PETSC_ERROR_IN_CXX = 2,
}
extern "C" {
    pub fn PetscError(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscErrorCode,
        arg6: PetscErrorType,
        arg7: *const ::std::os::raw::c_char,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscErrorPrintfInitialize() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscErrorMessage(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscTraceBackErrorHandler(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscErrorCode,
        arg6: PetscErrorType,
        arg7: *const ::std::os::raw::c_char,
        arg8: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscIgnoreErrorHandler(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscErrorCode,
        arg6: PetscErrorType,
        arg7: *const ::std::os::raw::c_char,
        arg8: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscEmacsClientErrorHandler(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscErrorCode,
        arg6: PetscErrorType,
        arg7: *const ::std::os::raw::c_char,
        arg8: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMPIAbortErrorHandler(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscErrorCode,
        arg6: PetscErrorType,
        arg7: *const ::std::os::raw::c_char,
        arg8: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscAbortErrorHandler(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscErrorCode,
        arg6: PetscErrorType,
        arg7: *const ::std::os::raw::c_char,
        arg8: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscAttachDebuggerErrorHandler(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscErrorCode,
        arg6: PetscErrorType,
        arg7: *const ::std::os::raw::c_char,
        arg8: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscReturnErrorHandler(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscErrorCode,
        arg6: PetscErrorType,
        arg7: *const ::std::os::raw::c_char,
        arg8: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPushErrorHandler(
        handler: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: MPI_Comm,
                arg2: ::std::os::raw::c_int,
                arg3: *const ::std::os::raw::c_char,
                arg4: *const ::std::os::raw::c_char,
                arg5: PetscErrorCode,
                arg6: PetscErrorType,
                arg7: *const ::std::os::raw::c_char,
                arg8: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg1: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPopErrorHandler() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSignalHandlerDefault(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPushSignalHandler(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPopSignalHandler() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscCheckPointerSetIntensity(arg1: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSignalSegvCheckPointerOrMpi();
}
extern "C" {
    pub static mut PetscErrorPrintf: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char, ...) -> PetscErrorCode,
    >;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscFPTrap {
    PETSC_FP_TRAP_OFF = 0,
    PETSC_FP_TRAP_ON = 1,
}
extern "C" {
    pub fn PetscSetFPTrap(arg1: PetscFPTrap) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFPTrapPush(arg1: PetscFPTrap) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFPTrapPop() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscDetermineInitialFPTrap() -> PetscErrorCode;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PetscStack {
    pub function: [*const ::std::os::raw::c_char; 64usize],
    pub file: [*const ::std::os::raw::c_char; 64usize],
    pub line: [::std::os::raw::c_int; 64usize],
    pub petscroutine: [::std::os::raw::c_int; 64usize],
    pub currentsize: ::std::os::raw::c_int,
    pub hotdepth: ::std::os::raw::c_int,
    pub check: PetscBool,
}
#[test]
fn bindgen_test_layout_PetscStack() {
    assert_eq!(
        ::std::mem::size_of::<PetscStack>(),
        1552usize,
        concat!("Size of: ", stringify!(PetscStack))
    );
    assert_eq!(
        ::std::mem::align_of::<PetscStack>(),
        8usize,
        concat!("Alignment of ", stringify!(PetscStack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscStack>())).function as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscStack),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscStack>())).file as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscStack),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscStack>())).line as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscStack),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscStack>())).petscroutine as *const _ as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscStack),
            "::",
            stringify!(petscroutine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscStack>())).currentsize as *const _ as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscStack),
            "::",
            stringify!(currentsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscStack>())).hotdepth as *const _ as usize },
        1540usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscStack),
            "::",
            stringify!(hotdepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscStack>())).check as *const _ as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscStack),
            "::",
            stringify!(check)
        )
    );
}
extern "C" {
    pub static mut petscstack: PetscStack;
}
extern "C" {
    pub static mut PETSC_LARGEST_CLASSID: PetscClassId;
}
extern "C" {
    pub static mut PETSC_OBJECT_CLASSID: PetscClassId;
}
extern "C" {
    pub fn PetscClassIdRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PetscClassId,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectGetId(arg1: PetscObject, arg2: *mut PetscObjectId) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectCompareId(
        arg1: PetscObject,
        arg2: PetscObjectId,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMemoryGetCurrentUsage(arg1: *mut PetscLogDouble) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMemoryGetMaximumUsage(arg1: *mut PetscLogDouble) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMemorySetGetMaximumUsage() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMemoryTrace(arg1: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSleep(arg1: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInitialize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInitializeNoPointers(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInitializeNoArguments() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInitialized(arg1: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFinalized(arg1: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFinalize() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInitializeFortran() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetArgs(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetArguments(arg1: *mut *mut *mut ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFreeArguments(arg1: *mut *mut ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscEnd() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSysInitializePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPythonInitialize(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPythonFinalize() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPythonPrintError() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPythonMonitorSet(
        arg1: PetscObject,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMonitorCompare(
        arg1: ::std::option::Option<unsafe extern "C" fn() -> PetscErrorCode>,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
        arg4: ::std::option::Option<unsafe extern "C" fn() -> PetscErrorCode>,
        arg5: *mut ::std::os::raw::c_void,
        arg6: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
pub type PetscVoidStarFunction = *mut ::std::option::Option<unsafe extern "C" fn()>;
pub type PetscVoidFunction = ::std::option::Option<unsafe extern "C" fn()>;
pub type PetscErrorCodeFunction = ::std::option::Option<unsafe extern "C" fn() -> PetscErrorCode>;
extern "C" {
    pub fn PetscObjectDestroy(arg1: *mut PetscObject) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectGetComm(arg1: PetscObject, arg2: *mut MPI_Comm) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectGetClassId(arg1: PetscObject, arg2: *mut PetscClassId) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectGetClassName(
        arg1: PetscObject,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectSetType(
        arg1: PetscObject,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectGetType(
        arg1: PetscObject,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectSetName(
        arg1: PetscObject,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectGetName(
        arg1: PetscObject,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectSetTabLevel(arg1: PetscObject, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectGetTabLevel(arg1: PetscObject, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectIncrementTabLevel(
        arg1: PetscObject,
        arg2: PetscObject,
        arg3: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectReference(arg1: PetscObject) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectGetReference(arg1: PetscObject, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectDereference(arg1: PetscObject) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectGetNewTag(arg1: PetscObject, arg2: *mut PetscMPIInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectCompose(
        arg1: PetscObject,
        arg2: *const ::std::os::raw::c_char,
        arg3: PetscObject,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectRemoveReference(
        arg1: PetscObject,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectQuery(
        arg1: PetscObject,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PetscObject,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectComposeFunction_Private(
        arg1: PetscObject,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectSetFromOptions(arg1: PetscObject) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectSetUp(arg1: PetscObject) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectSetPrintedOptions(arg1: PetscObject) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectInheritPrintedOptions(arg1: PetscObject, arg2: PetscObject)
        -> PetscErrorCode;
}
extern "C" {
    pub fn PetscCommGetNewTag(arg1: MPI_Comm, arg2: *mut PetscMPIInt) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscViewer {
    _unused: [u8; 0],
}
pub type PetscViewer = *mut _p_PetscViewer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscOptions {
    _unused: [u8; 0],
}
pub type PetscOptions = *mut _n_PetscOptions;
extern "C" {
    pub fn PetscOptionsCreate(arg1: *mut PetscOptions) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsPush(arg1: PetscOptions) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsPop() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsDestroy(arg1: *mut PetscOptions) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsCreateDefault() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsDestroyDefault() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsHasHelp(arg1: PetscOptions, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsHasName(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetBool(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut PetscBool,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetInt(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut PetscInt,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetEnum(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const *const ::std::os::raw::c_char,
        arg5: *mut PetscEnum,
        arg6: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetEList(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const *const ::std::os::raw::c_char,
        arg5: PetscInt,
        arg6: *mut PetscInt,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetReal(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut PetscReal,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetScalar(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut PetscScalar,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetString(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: size_t,
        arg6: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetBoolArray(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut PetscBool,
        arg5: *mut PetscInt,
        arg6: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetEnumArray(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const *const ::std::os::raw::c_char,
        arg5: *mut PetscEnum,
        arg6: *mut PetscInt,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetIntArray(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetRealArray(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut PetscReal,
        arg5: *mut PetscInt,
        arg6: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetScalarArray(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut PetscScalar,
        arg5: *mut PetscInt,
        arg6: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetStringArray(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: *mut PetscInt,
        arg6: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsValidKey(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsSetAlias(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsSetValue(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsClearValue(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsFindPair(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut *const ::std::os::raw::c_char,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetAll(
        arg1: PetscOptions,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsAllUsed(arg1: PetscOptions, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsUsed(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsLeft(arg1: PetscOptions) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsLeftGet(
        arg1: PetscOptions,
        arg2: *mut PetscInt,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
        arg4: *mut *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsLeftRestore(
        arg1: PetscOptions,
        arg2: *mut PetscInt,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
        arg4: *mut *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsView(arg1: PetscOptions, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsReject(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsInsert(
        arg1: PetscOptions,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsInsertFile(
        arg1: MPI_Comm,
        arg2: PetscOptions,
        arg3: *const ::std::os::raw::c_char,
        arg4: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsInsertFileYAML(
        arg1: MPI_Comm,
        arg2: PetscOptions,
        arg3: *const ::std::os::raw::c_char,
        arg4: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsInsertString(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsInsertStringYAML(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsInsertArgs(
        arg1: PetscOptions,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsClear(arg1: PetscOptions) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsPrefixPush(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsPrefixPop(arg1: PetscOptions) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetenv(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: size_t,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsStringToBool(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsStringToInt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsStringToReal(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsStringToScalar(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsMonitorSet(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *const ::std::os::raw::c_char,
                arg3: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsMonitorDefault(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectSetOptions(arg1: PetscObject, arg2: PetscOptions) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectGetOptions(arg1: PetscObject, arg2: *mut PetscOptions) -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscOptionsPublish: PetscBool;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscOptionType {
    OPTION_INT = 0,
    OPTION_BOOL = 1,
    OPTION_REAL = 2,
    OPTION_FLIST = 3,
    OPTION_STRING = 4,
    OPTION_REAL_ARRAY = 5,
    OPTION_SCALAR_ARRAY = 6,
    OPTION_HEAD = 7,
    OPTION_INT_ARRAY = 8,
    OPTION_ELIST = 9,
    OPTION_BOOL_ARRAY = 10,
    OPTION_STRING_ARRAY = 11,
}
pub type PetscOptionItem = *mut _n_PetscOptionItem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscOptionItem {
    pub option: *mut ::std::os::raw::c_char,
    pub text: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub flist: PetscFunctionList,
    pub list: *const *const ::std::os::raw::c_char,
    pub nlist: ::std::os::raw::c_char,
    pub man: *mut ::std::os::raw::c_char,
    pub arraylength: size_t,
    pub set: PetscBool,
    pub type_: PetscOptionType,
    pub next: PetscOptionItem,
    pub pman: *mut ::std::os::raw::c_char,
    pub edata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__n_PetscOptionItem() {
    assert_eq!(
        ::std::mem::size_of::<_n_PetscOptionItem>(),
        96usize,
        concat!("Size of: ", stringify!(_n_PetscOptionItem))
    );
    assert_eq!(
        ::std::mem::align_of::<_n_PetscOptionItem>(),
        8usize,
        concat!("Alignment of ", stringify!(_n_PetscOptionItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscOptionItem>())).option as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscOptionItem),
            "::",
            stringify!(option)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscOptionItem>())).text as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscOptionItem),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscOptionItem>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscOptionItem),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscOptionItem>())).flist as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscOptionItem),
            "::",
            stringify!(flist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscOptionItem>())).list as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscOptionItem),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscOptionItem>())).nlist as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscOptionItem),
            "::",
            stringify!(nlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscOptionItem>())).man as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscOptionItem),
            "::",
            stringify!(man)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscOptionItem>())).arraylength as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscOptionItem),
            "::",
            stringify!(arraylength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscOptionItem>())).set as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscOptionItem),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscOptionItem>())).type_ as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscOptionItem),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscOptionItem>())).next as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscOptionItem),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscOptionItem>())).pman as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscOptionItem),
            "::",
            stringify!(pman)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscOptionItem>())).edata as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscOptionItem),
            "::",
            stringify!(edata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscOptionItems {
    pub count: PetscInt,
    pub next: PetscOptionItem,
    pub prefix: *mut ::std::os::raw::c_char,
    pub pprefix: *mut ::std::os::raw::c_char,
    pub title: *mut ::std::os::raw::c_char,
    pub comm: MPI_Comm,
    pub printhelp: PetscBool,
    pub changedmethod: PetscBool,
    pub alreadyprinted: PetscBool,
    pub object: PetscObject,
    pub options: PetscOptions,
}
#[test]
fn bindgen_test_layout__p_PetscOptionItems() {
    assert_eq!(
        ::std::mem::size_of::<_p_PetscOptionItems>(),
        80usize,
        concat!("Size of: ", stringify!(_p_PetscOptionItems))
    );
    assert_eq!(
        ::std::mem::align_of::<_p_PetscOptionItems>(),
        8usize,
        concat!("Alignment of ", stringify!(_p_PetscOptionItems))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_p_PetscOptionItems>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_p_PetscOptionItems),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_p_PetscOptionItems>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_p_PetscOptionItems),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_p_PetscOptionItems>())).prefix as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_p_PetscOptionItems),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_p_PetscOptionItems>())).pprefix as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_p_PetscOptionItems),
            "::",
            stringify!(pprefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_p_PetscOptionItems>())).title as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_p_PetscOptionItems),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_p_PetscOptionItems>())).comm as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_p_PetscOptionItems),
            "::",
            stringify!(comm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_p_PetscOptionItems>())).printhelp as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_p_PetscOptionItems),
            "::",
            stringify!(printhelp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_p_PetscOptionItems>())).changedmethod as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_p_PetscOptionItems),
            "::",
            stringify!(changedmethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_p_PetscOptionItems>())).alreadyprinted as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_p_PetscOptionItems),
            "::",
            stringify!(alreadyprinted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_p_PetscOptionItems>())).object as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_p_PetscOptionItems),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_p_PetscOptionItems>())).options as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_p_PetscOptionItems),
            "::",
            stringify!(options)
        )
    );
}
pub type PetscOptionItems = _p_PetscOptionItems;
extern "C" {
    pub fn PetscOptionsBegin_Private(
        arg1: *mut PetscOptionItems,
        arg2: MPI_Comm,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectOptionsBegin_Private(
        arg1: *mut PetscOptionItems,
        arg2: PetscObject,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsEnd_Private(arg1: *mut PetscOptionItems) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsHead(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsEnum_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const *const ::std::os::raw::c_char,
        arg6: PetscEnum,
        arg7: *mut PetscEnum,
        arg8: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsInt_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscInt,
        arg6: *mut PetscInt,
        arg7: *mut PetscBool,
        arg8: PetscInt,
        arg9: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsReal_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscReal,
        arg6: *mut PetscReal,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsScalar_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscScalar,
        arg6: *mut PetscScalar,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsName_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsString_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_char,
        arg7: size_t,
        arg8: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsBool_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscBool,
        arg6: *mut PetscBool,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsBoolGroupBegin_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsBoolGroup_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsBoolGroupEnd_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsFList_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscFunctionList,
        arg6: *const ::std::os::raw::c_char,
        arg7: *mut ::std::os::raw::c_char,
        arg8: size_t,
        arg9: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsEList_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const *const ::std::os::raw::c_char,
        arg6: PetscInt,
        arg7: *const ::std::os::raw::c_char,
        arg8: *mut PetscInt,
        arg9: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsRealArray_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut PetscReal,
        arg6: *mut PetscInt,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsScalarArray_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut PetscScalar,
        arg6: *mut PetscInt,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsIntArray_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut PetscInt,
        arg6: *mut PetscInt,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsStringArray_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut *mut ::std::os::raw::c_char,
        arg6: *mut PetscInt,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsBoolArray_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut PetscBool,
        arg6: *mut PetscInt,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsEnumArray_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const *const ::std::os::raw::c_char,
        arg6: *mut PetscEnum,
        arg7: *mut PetscInt,
        arg8: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsDeprecated_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsSAWsDestroy() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectAddOptionsHandler(
        arg1: PetscObject,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut PetscOptionItems,
                arg2: PetscObject,
                arg3: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PetscObject,
                arg2: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectProcessOptionsHandlers(
        arg1: *mut PetscOptionItems,
        arg2: PetscObject,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectDestroyOptionsHandlers(arg1: PetscObject) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocTraceSet(
        arg1: PetscViewer,
        arg2: PetscBool,
        arg3: PetscLogDouble,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocTraceGet(arg1: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectsListGetGlobalNumbering(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: *mut PetscObject,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMemoryView(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectPrintClassNamePrefixType(
        arg1: PetscObject,
        arg2: PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectView(arg1: PetscObject, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectQueryFunction_Private(
        arg1: PetscObject,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::option::Option<unsafe extern "C" fn()>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectSetOptionsPrefix(
        arg1: PetscObject,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectAppendOptionsPrefix(
        arg1: PetscObject,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectPrependOptionsPrefix(
        arg1: PetscObject,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectGetOptionsPrefix(
        arg1: PetscObject,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectChangeTypeName(
        arg1: PetscObject,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectRegisterDestroy(arg1: PetscObject) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectRegisterDestroyAll() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectViewFromOptions(
        arg1: PetscObject,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectName(arg1: PetscObject) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectTypeCompare(
        arg1: PetscObject,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectBaseTypeCompare(
        arg1: PetscObject,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectTypeCompareAny(
        arg1: PetscObject,
        arg2: *mut PetscBool,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectBaseTypeCompareAny(
        arg1: PetscObject,
        arg2: *mut PetscBool,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRegisterFinalize(
        arg1: ::std::option::Option<unsafe extern "C" fn() -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRegisterFinalizeAll() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscDLOpen(
        arg1: *const ::std::os::raw::c_char,
        arg2: PetscDLMode,
        arg3: *mut PetscDLHandle,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscDLClose(arg1: *mut PetscDLHandle) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscDLSym(
        arg1: PetscDLHandle,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscDLAddr(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscDemangleSymbol(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMallocGetStack(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut *mut PetscStack,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectsDump(arg1: *mut FILE, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectListDestroy(arg1: *mut PetscObjectList) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectListFind(
        arg1: PetscObjectList,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PetscObject,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectListReverseFind(
        arg1: PetscObjectList,
        arg2: PetscObject,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectListAdd(
        arg1: *mut PetscObjectList,
        arg2: *const ::std::os::raw::c_char,
        arg3: PetscObject,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectListRemoveReference(
        arg1: *mut PetscObjectList,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectListDuplicate(
        arg1: PetscObjectList,
        arg2: *mut PetscObjectList,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFunctionListAdd_Private(
        arg1: *mut PetscFunctionList,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFunctionListDestroy(arg1: *mut PetscFunctionList) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFunctionListFind_Private(
        arg1: PetscFunctionList,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::option::Option<unsafe extern "C" fn()>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFunctionListPrintTypes(
        arg1: MPI_Comm,
        arg2: *mut FILE,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *const ::std::os::raw::c_char,
        arg7: PetscFunctionList,
        arg8: *const ::std::os::raw::c_char,
        arg9: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFunctionListDuplicate(
        arg1: PetscFunctionList,
        arg2: *mut PetscFunctionList,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFunctionListView(arg1: PetscFunctionList, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFunctionListGet(
        arg1: PetscFunctionList,
        arg2: *mut *mut *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscDLLibrariesLoaded: PetscDLLibrary;
}
extern "C" {
    pub fn PetscDLLibraryAppend(
        arg1: MPI_Comm,
        arg2: *mut PetscDLLibrary,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscDLLibraryPrepend(
        arg1: MPI_Comm,
        arg2: *mut PetscDLLibrary,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscDLLibrarySym(
        arg1: MPI_Comm,
        arg2: *mut PetscDLLibrary,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscDLLibraryPrintPath(arg1: PetscDLLibrary) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscDLLibraryRetrieve(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: size_t,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscDLLibraryOpen(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PetscDLLibrary,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscDLLibraryClose(arg1: PetscDLLibrary) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSplitOwnership(
        arg1: MPI_Comm,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSplitOwnershipBlock(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSplitOwnershipEqual(
        arg1: MPI_Comm,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSequentialPhaseBegin(arg1: MPI_Comm, arg2: PetscMPIInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSequentialPhaseEnd(arg1: MPI_Comm, arg2: PetscMPIInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscBarrier(arg1: PetscObject) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMPIDump(arg1: *mut FILE) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGlobalMinMaxInt(
        arg1: MPI_Comm,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGlobalMinMaxReal(
        arg1: MPI_Comm,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscHelpPrintf: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MPI_Comm,
            arg2: *const ::std::os::raw::c_char,
            ...
        ) -> PetscErrorCode,
    >;
}
extern "C" {
    pub fn PetscGetCPUTime(arg1: *mut PetscLogDouble) -> PetscErrorCode;
}
extern "C" {
    pub static mut petsc_BaseTime: PetscLogDouble;
}
extern "C" {
    pub fn PetscInfo_Private(
        arg1: *const ::std::os::raw::c_char,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> PetscErrorCode;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscInfoCommFlag {
    PETSC_INFO_COMM_ALL = -1,
    PETSC_INFO_COMM_NO_SELF = 0,
    PETSC_INFO_COMM_ONLY_SELF = 1,
}
extern "C" {
    pub static mut PetscInfoCommFlags: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn PetscInfoDeactivateClass(arg1: PetscClassId) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInfoActivateClass(arg1: PetscClassId) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInfoEnabled(arg1: PetscClassId, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInfoAllow(arg1: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInfoSetFile(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInfoGetFile(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut FILE,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInfoSetClasses(
        arg1: PetscBool,
        arg2: PetscInt,
        arg3: *const *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInfoGetClass(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInfoGetInfo(
        arg1: *mut PetscBool,
        arg2: *mut PetscBool,
        arg3: *mut PetscBool,
        arg4: *mut PetscBool,
        arg5: *mut PetscInfoCommFlag,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInfoProcessClass(
        arg1: *const ::std::os::raw::c_char,
        arg2: PetscInt,
        arg3: *mut PetscClassId,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInfoSetFilterCommSelf(arg1: PetscInfoCommFlag) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInfoSetFromOptions(arg1: PetscOptions) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscInfoDestroy() -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscLogPrintInfo: PetscBool;
}
pub type PetscLogEvent = ::std::os::raw::c_int;
pub type PetscLogStage = ::std::os::raw::c_int;
extern "C" {
    pub static mut PETSC_LARGEST_EVENT: PetscLogEvent;
}
extern "C" {
    pub static mut petsc_TotalFlops: PetscLogDouble;
}
extern "C" {
    pub static mut petsc_tmp_flops: PetscLogDouble;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscIntStack {
    _unused: [u8; 0],
}
pub type PetscIntStack = *mut _n_PetscIntStack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PetscClassRegInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub classid: PetscClassId,
}
#[test]
fn bindgen_test_layout_PetscClassRegInfo() {
    assert_eq!(
        ::std::mem::size_of::<PetscClassRegInfo>(),
        16usize,
        concat!("Size of: ", stringify!(PetscClassRegInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PetscClassRegInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PetscClassRegInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscClassRegInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscClassRegInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscClassRegInfo>())).classid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscClassRegInfo),
            "::",
            stringify!(classid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PetscClassPerfInfo {
    pub id: PetscClassId,
    pub creations: ::std::os::raw::c_int,
    pub destructions: ::std::os::raw::c_int,
    pub mem: PetscLogDouble,
    pub descMem: PetscLogDouble,
}
#[test]
fn bindgen_test_layout_PetscClassPerfInfo() {
    assert_eq!(
        ::std::mem::size_of::<PetscClassPerfInfo>(),
        32usize,
        concat!("Size of: ", stringify!(PetscClassPerfInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PetscClassPerfInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PetscClassPerfInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscClassPerfInfo>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscClassPerfInfo),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscClassPerfInfo>())).creations as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscClassPerfInfo),
            "::",
            stringify!(creations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscClassPerfInfo>())).destructions as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscClassPerfInfo),
            "::",
            stringify!(destructions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscClassPerfInfo>())).mem as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscClassPerfInfo),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscClassPerfInfo>())).descMem as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscClassPerfInfo),
            "::",
            stringify!(descMem)
        )
    );
}
pub type PetscClassRegLog = *mut _n_PetscClassRegLog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscClassRegLog {
    pub numClasses: ::std::os::raw::c_int,
    pub maxClasses: ::std::os::raw::c_int,
    pub classInfo: *mut PetscClassRegInfo,
}
#[test]
fn bindgen_test_layout__n_PetscClassRegLog() {
    assert_eq!(
        ::std::mem::size_of::<_n_PetscClassRegLog>(),
        16usize,
        concat!("Size of: ", stringify!(_n_PetscClassRegLog))
    );
    assert_eq!(
        ::std::mem::align_of::<_n_PetscClassRegLog>(),
        8usize,
        concat!("Alignment of ", stringify!(_n_PetscClassRegLog))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscClassRegLog>())).numClasses as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscClassRegLog),
            "::",
            stringify!(numClasses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscClassRegLog>())).maxClasses as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscClassRegLog),
            "::",
            stringify!(maxClasses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscClassRegLog>())).classInfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscClassRegLog),
            "::",
            stringify!(classInfo)
        )
    );
}
pub type PetscClassPerfLog = *mut _n_PetscClassPerfLog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscClassPerfLog {
    pub numClasses: ::std::os::raw::c_int,
    pub maxClasses: ::std::os::raw::c_int,
    pub classInfo: *mut PetscClassPerfInfo,
}
#[test]
fn bindgen_test_layout__n_PetscClassPerfLog() {
    assert_eq!(
        ::std::mem::size_of::<_n_PetscClassPerfLog>(),
        16usize,
        concat!("Size of: ", stringify!(_n_PetscClassPerfLog))
    );
    assert_eq!(
        ::std::mem::align_of::<_n_PetscClassPerfLog>(),
        8usize,
        concat!("Alignment of ", stringify!(_n_PetscClassPerfLog))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscClassPerfLog>())).numClasses as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscClassPerfLog),
            "::",
            stringify!(numClasses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscClassPerfLog>())).maxClasses as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscClassPerfLog),
            "::",
            stringify!(maxClasses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscClassPerfLog>())).classInfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscClassPerfLog),
            "::",
            stringify!(classInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PetscEventRegInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub classid: PetscClassId,
    pub collective: PetscBool,
}
#[test]
fn bindgen_test_layout_PetscEventRegInfo() {
    assert_eq!(
        ::std::mem::size_of::<PetscEventRegInfo>(),
        16usize,
        concat!("Size of: ", stringify!(PetscEventRegInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PetscEventRegInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PetscEventRegInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventRegInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventRegInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventRegInfo>())).classid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventRegInfo),
            "::",
            stringify!(classid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventRegInfo>())).collective as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventRegInfo),
            "::",
            stringify!(collective)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PetscEventPerfInfo {
    pub id: ::std::os::raw::c_int,
    pub active: PetscBool,
    pub visible: PetscBool,
    pub depth: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub flops: PetscLogDouble,
    pub flops2: PetscLogDouble,
    pub flopsTmp: PetscLogDouble,
    pub time: PetscLogDouble,
    pub time2: PetscLogDouble,
    pub timeTmp: PetscLogDouble,
    pub syncTime: PetscLogDouble,
    pub dof: [PetscLogDouble; 8usize],
    pub errors: [PetscLogDouble; 8usize],
    pub numMessages: PetscLogDouble,
    pub messageLength: PetscLogDouble,
    pub numReductions: PetscLogDouble,
    pub memIncrease: PetscLogDouble,
    pub mallocIncrease: PetscLogDouble,
    pub mallocSpace: PetscLogDouble,
    pub mallocIncreaseEvent: PetscLogDouble,
}
#[test]
fn bindgen_test_layout_PetscEventPerfInfo() {
    assert_eq!(
        ::std::mem::size_of::<PetscEventPerfInfo>(),
        264usize,
        concat!("Size of: ", stringify!(PetscEventPerfInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PetscEventPerfInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PetscEventPerfInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).active as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).visible as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(visible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).depth as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).flops as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(flops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).flops2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(flops2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).flopsTmp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(flopsTmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).time as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).time2 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(time2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).timeTmp as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(timeTmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).syncTime as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(syncTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).dof as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(dof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).errors as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).numMessages as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(numMessages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PetscEventPerfInfo>())).messageLength as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(messageLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PetscEventPerfInfo>())).numReductions as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(numReductions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).memIncrease as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(memIncrease)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PetscEventPerfInfo>())).mallocIncrease as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(mallocIncrease)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscEventPerfInfo>())).mallocSpace as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(mallocSpace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PetscEventPerfInfo>())).mallocIncreaseEvent as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscEventPerfInfo),
            "::",
            stringify!(mallocIncreaseEvent)
        )
    );
}
pub type PetscEventRegLog = *mut _n_PetscEventRegLog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscEventRegLog {
    pub numEvents: ::std::os::raw::c_int,
    pub maxEvents: ::std::os::raw::c_int,
    pub eventInfo: *mut PetscEventRegInfo,
}
#[test]
fn bindgen_test_layout__n_PetscEventRegLog() {
    assert_eq!(
        ::std::mem::size_of::<_n_PetscEventRegLog>(),
        16usize,
        concat!("Size of: ", stringify!(_n_PetscEventRegLog))
    );
    assert_eq!(
        ::std::mem::align_of::<_n_PetscEventRegLog>(),
        8usize,
        concat!("Alignment of ", stringify!(_n_PetscEventRegLog))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscEventRegLog>())).numEvents as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscEventRegLog),
            "::",
            stringify!(numEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscEventRegLog>())).maxEvents as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscEventRegLog),
            "::",
            stringify!(maxEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscEventRegLog>())).eventInfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscEventRegLog),
            "::",
            stringify!(eventInfo)
        )
    );
}
pub type PetscEventPerfLog = *mut _n_PetscEventPerfLog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscEventPerfLog {
    pub numEvents: ::std::os::raw::c_int,
    pub maxEvents: ::std::os::raw::c_int,
    pub eventInfo: *mut PetscEventPerfInfo,
}
#[test]
fn bindgen_test_layout__n_PetscEventPerfLog() {
    assert_eq!(
        ::std::mem::size_of::<_n_PetscEventPerfLog>(),
        16usize,
        concat!("Size of: ", stringify!(_n_PetscEventPerfLog))
    );
    assert_eq!(
        ::std::mem::align_of::<_n_PetscEventPerfLog>(),
        8usize,
        concat!("Alignment of ", stringify!(_n_PetscEventPerfLog))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscEventPerfLog>())).numEvents as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscEventPerfLog),
            "::",
            stringify!(numEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscEventPerfLog>())).maxEvents as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscEventPerfLog),
            "::",
            stringify!(maxEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscEventPerfLog>())).eventInfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscEventPerfLog),
            "::",
            stringify!(eventInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PetscStageInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub used: PetscBool,
    pub perfInfo: PetscEventPerfInfo,
    pub eventLog: PetscEventPerfLog,
    pub classLog: PetscClassPerfLog,
}
#[test]
fn bindgen_test_layout__PetscStageInfo() {
    assert_eq!(
        ::std::mem::size_of::<_PetscStageInfo>(),
        296usize,
        concat!("Size of: ", stringify!(_PetscStageInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_PetscStageInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_PetscStageInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PetscStageInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PetscStageInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PetscStageInfo>())).used as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PetscStageInfo),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PetscStageInfo>())).perfInfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PetscStageInfo),
            "::",
            stringify!(perfInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PetscStageInfo>())).eventLog as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_PetscStageInfo),
            "::",
            stringify!(eventLog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PetscStageInfo>())).classLog as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_PetscStageInfo),
            "::",
            stringify!(classLog)
        )
    );
}
pub type PetscStageInfo = _PetscStageInfo;
pub type PetscStageLog = *mut _n_PetscStageLog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscStageLog {
    pub numStages: ::std::os::raw::c_int,
    pub maxStages: ::std::os::raw::c_int,
    pub stack: PetscIntStack,
    pub curStage: ::std::os::raw::c_int,
    pub stageInfo: *mut PetscStageInfo,
    pub eventLog: PetscEventRegLog,
    pub classLog: PetscClassRegLog,
}
#[test]
fn bindgen_test_layout__n_PetscStageLog() {
    assert_eq!(
        ::std::mem::size_of::<_n_PetscStageLog>(),
        48usize,
        concat!("Size of: ", stringify!(_n_PetscStageLog))
    );
    assert_eq!(
        ::std::mem::align_of::<_n_PetscStageLog>(),
        8usize,
        concat!("Alignment of ", stringify!(_n_PetscStageLog))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscStageLog>())).numStages as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscStageLog),
            "::",
            stringify!(numStages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscStageLog>())).maxStages as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscStageLog),
            "::",
            stringify!(maxStages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscStageLog>())).stack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscStageLog),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscStageLog>())).curStage as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscStageLog),
            "::",
            stringify!(curStage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscStageLog>())).stageInfo as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscStageLog),
            "::",
            stringify!(stageInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscStageLog>())).eventLog as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscStageLog),
            "::",
            stringify!(eventLog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscStageLog>())).classLog as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscStageLog),
            "::",
            stringify!(classLog)
        )
    );
}
extern "C" {
    pub fn PetscLogObjectParent(arg1: PetscObject, arg2: PetscObject) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogObjectMemory(arg1: PetscObject, arg2: PetscLogDouble) -> PetscErrorCode;
}
extern "C" {
    pub static mut petsc_stageLog: PetscStageLog;
}
extern "C" {
    pub fn PetscLogGetStageLog(arg1: *mut PetscStageLog) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStageLogGetCurrent(
        arg1: PetscStageLog,
        arg2: *mut ::std::os::raw::c_int,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStageLogGetEventPerfLog(
        arg1: PetscStageLog,
        arg2: ::std::os::raw::c_int,
        arg3: *mut PetscEventPerfLog,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetFlops(arg1: *mut PetscLogDouble) -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscLogPLB: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: PetscLogEvent,
            arg2: ::std::os::raw::c_int,
            arg3: PetscObject,
            arg4: PetscObject,
            arg5: PetscObject,
            arg6: PetscObject,
        ) -> PetscErrorCode,
    >;
}
extern "C" {
    pub static mut PetscLogPLE: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: PetscLogEvent,
            arg2: ::std::os::raw::c_int,
            arg3: PetscObject,
            arg4: PetscObject,
            arg5: PetscObject,
            arg6: PetscObject,
        ) -> PetscErrorCode,
    >;
}
extern "C" {
    pub static mut PetscLogPHC:
        ::std::option::Option<unsafe extern "C" fn(arg1: PetscObject) -> PetscErrorCode>;
}
extern "C" {
    pub static mut PetscLogPHD:
        ::std::option::Option<unsafe extern "C" fn(arg1: PetscObject) -> PetscErrorCode>;
}
extern "C" {
    pub fn PetscLogObjectState(
        arg1: PetscObject,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogDefaultBegin() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogAllBegin() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogNestedBegin() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogTraceBegin(arg1: *mut FILE) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogActions(arg1: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogObjects(arg1: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogSetThreshold(arg1: PetscLogDouble, arg2: *mut PetscLogDouble) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogSet(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_int,
                arg3: PetscObject,
                arg4: PetscObject,
                arg5: PetscObject,
                arg6: PetscObject,
            ) -> PetscErrorCode,
        >,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_int,
                arg3: PetscObject,
                arg4: PetscObject,
                arg5: PetscObject,
                arg6: PetscObject,
            ) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogView(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogViewFromOptions() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogDump(arg1: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogStageRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PetscLogStage,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogStagePush(arg1: PetscLogStage) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogStagePop() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogStageSetActive(arg1: PetscLogStage, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogStageGetActive(arg1: PetscLogStage, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogStageSetVisible(arg1: PetscLogStage, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogStageGetVisible(arg1: PetscLogStage, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogStageGetId(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PetscLogStage,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: PetscClassId,
        arg3: *mut PetscLogEvent,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventSetCollective(arg1: PetscLogEvent, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventIncludeClass(arg1: PetscClassId) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventExcludeClass(arg1: PetscClassId) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventActivate(arg1: PetscLogEvent) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventDeactivate(arg1: PetscLogEvent) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventDeactivatePush(arg1: PetscLogEvent) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventDeactivatePop(arg1: PetscLogEvent) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventSetActiveAll(arg1: PetscLogEvent, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventActivateClass(arg1: PetscClassId) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventDeactivateClass(arg1: PetscClassId) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventGetId(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PetscLogEvent,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventGetPerfInfo(
        arg1: ::std::os::raw::c_int,
        arg2: PetscLogEvent,
        arg3: *mut PetscEventPerfInfo,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventSetDof(
        arg1: PetscLogEvent,
        arg2: PetscInt,
        arg3: PetscLogDouble,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventSetError(
        arg1: PetscLogEvent,
        arg2: PetscInt,
        arg3: PetscLogDouble,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut petsc_irecv_ct: PetscLogDouble;
}
extern "C" {
    pub static mut petsc_isend_ct: PetscLogDouble;
}
extern "C" {
    pub static mut petsc_recv_ct: PetscLogDouble;
}
extern "C" {
    pub static mut petsc_send_ct: PetscLogDouble;
}
extern "C" {
    pub static mut petsc_irecv_len: PetscLogDouble;
}
extern "C" {
    pub static mut petsc_isend_len: PetscLogDouble;
}
extern "C" {
    pub static mut petsc_recv_len: PetscLogDouble;
}
extern "C" {
    pub static mut petsc_send_len: PetscLogDouble;
}
extern "C" {
    pub static mut petsc_allreduce_ct: PetscLogDouble;
}
extern "C" {
    pub static mut petsc_gather_ct: PetscLogDouble;
}
extern "C" {
    pub static mut petsc_scatter_ct: PetscLogDouble;
}
extern "C" {
    pub static mut petsc_wait_ct: PetscLogDouble;
}
extern "C" {
    pub static mut petsc_wait_any_ct: PetscLogDouble;
}
extern "C" {
    pub static mut petsc_wait_all_ct: PetscLogDouble;
}
extern "C" {
    pub static mut petsc_sum_of_waits_ct: PetscLogDouble;
}
extern "C" {
    pub static mut PetscLogMemory: PetscBool;
}
extern "C" {
    pub static mut PetscLogSyncOn: PetscBool;
}
extern "C" {
    pub fn PetscLogEventSynchronize(arg1: PetscLogEvent, arg2: MPI_Comm) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventGetFlops(arg1: PetscLogEvent, arg2: *mut PetscLogDouble) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLogEventZeroFlops(arg1: PetscLogEvent) -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscPreLoadingUsed: PetscBool;
}
extern "C" {
    pub static mut PetscPreLoadingOn: PetscBool;
}
extern "C" {
    pub fn PetscFixFilename(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFOpen(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut *mut FILE,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFClose(arg1: MPI_Comm, arg2: *mut FILE) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFPrintf(
        arg1: MPI_Comm,
        arg2: *mut FILE,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPrintf(arg1: MPI_Comm, arg2: *const ::std::os::raw::c_char, ...) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSNPrintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSNPrintfCount(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut size_t,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFormatRealArray(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: PetscInt,
        arg5: *const PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscErrorPrintfDefault(arg1: *const ::std::os::raw::c_char, ...) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscErrorPrintfNone(arg1: *const ::std::os::raw::c_char, ...) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscHelpPrintfDefault(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFormatConvertGetSize(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFormatConvert(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPOpen(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut *mut FILE,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPClose(arg1: MPI_Comm, arg2: *mut FILE) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPOpenSetMachine(arg1: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSynchronizedPrintf(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSynchronizedFPrintf(
        arg1: MPI_Comm,
        arg2: *mut FILE,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSynchronizedFlush(arg1: MPI_Comm, arg2: *mut FILE) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSynchronizedFGets(
        arg1: MPI_Comm,
        arg2: *mut FILE,
        arg3: size_t,
        arg4: *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStartMatlab(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut *mut FILE,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStartJava(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut *mut FILE,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetPetscDir(arg1: *mut *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub static mut PETSC_CONTAINER_CLASSID: PetscClassId;
}
extern "C" {
    pub fn PetscContainerGetPointer(
        arg1: PetscContainer,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscContainerSetPointer(
        arg1: PetscContainer,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscContainerDestroy(arg1: *mut PetscContainer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscContainerCreate(arg1: MPI_Comm, arg2: *mut PetscContainer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscContainerSetUserDestroy(
        arg1: PetscContainer,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscContainerUserDestroyDefault(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscGlobalRank: PetscMPIInt;
}
extern "C" {
    pub static mut PetscGlobalSize: PetscMPIInt;
}
extern "C" {
    pub fn PetscIntView(arg1: PetscInt, arg2: *const PetscInt, arg3: PetscViewer)
        -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRealView(
        arg1: PetscInt,
        arg2: *const PetscReal,
        arg3: PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscScalarView(
        arg1: PetscInt,
        arg2: *const PetscScalar,
        arg3: PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: size_t,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum idtype_t {
    P_ALL = 0,
    P_PID = 1,
    P_PGID = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type __m64 = [::std::os::raw::c_longlong; 1usize];
pub type __v1di = [::std::os::raw::c_longlong; 1usize];
pub type __v2si = [::std::os::raw::c_int; 2usize];
pub type __v4hi = [::std::os::raw::c_short; 4usize];
pub type __v8qi = [::std::os::raw::c_char; 8usize];
pub type __v4si = [::std::os::raw::c_int; 4usize];
pub type __v4sf = [f32; 4usize];
pub type __m128 = [f32; 4usize];
pub type __m128_u = [f32; 4usize];
pub type __v4su = [::std::os::raw::c_uint; 4usize];
extern "C" {
    pub fn _mm_sfence();
}
extern "C" {
    pub fn _mm_getcsr() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_setcsr(__i: ::std::os::raw::c_uint);
}
pub type __m128d = [f64; 2usize];
pub type __m128i = [::std::os::raw::c_longlong; 2usize];
pub type __m128d_u = [f64; 2usize];
pub type __m128i_u = [::std::os::raw::c_longlong; 2usize];
pub type __v2df = [f64; 2usize];
pub type __v2di = [::std::os::raw::c_longlong; 2usize];
pub type __v8hi = [::std::os::raw::c_short; 8usize];
pub type __v16qi = [::std::os::raw::c_char; 16usize];
pub type __v2du = [::std::os::raw::c_ulonglong; 2usize];
pub type __v8hu = [::std::os::raw::c_ushort; 8usize];
pub type __v16qu = [::std::os::raw::c_uchar; 16usize];
pub type __v16qs = [::std::os::raw::c_schar; 16usize];
extern "C" {
    pub fn _mm_clflush(__p: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _mm_lfence();
}
extern "C" {
    pub fn _mm_mfence();
}
extern "C" {
    pub fn _mm_pause();
}
extern "C" {
    pub fn MPIU_File_write_all(
        arg1: MPI_File,
        arg2: *mut ::std::os::raw::c_void,
        arg3: PetscMPIInt,
        arg4: MPI_Datatype,
        arg5: *mut MPI_Status,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MPIU_File_read_all(
        arg1: MPI_File,
        arg2: *mut ::std::os::raw::c_void,
        arg3: PetscMPIInt,
        arg4: MPI_Datatype,
        arg5: *mut MPI_Status,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MPIU_File_write_at(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: *mut ::std::os::raw::c_void,
        arg4: PetscMPIInt,
        arg5: MPI_Datatype,
        arg6: *mut MPI_Status,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MPIU_File_read_at(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: *mut ::std::os::raw::c_void,
        arg4: PetscMPIInt,
        arg5: MPI_Datatype,
        arg6: *mut MPI_Status,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MPIU_File_write_at_all(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: *mut ::std::os::raw::c_void,
        arg4: PetscMPIInt,
        arg5: MPI_Datatype,
        arg6: *mut MPI_Status,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MPIU_File_read_at_all(
        arg1: MPI_File,
        arg2: MPI_Offset,
        arg3: *mut ::std::os::raw::c_void,
        arg4: PetscMPIInt,
        arg5: MPI_Datatype,
        arg6: *mut MPI_Status,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetArchType(arg1: *mut ::std::os::raw::c_char, arg2: size_t) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetHostName(arg1: *mut ::std::os::raw::c_char, arg2: size_t) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetUserName(arg1: *mut ::std::os::raw::c_char, arg2: size_t) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetProgramName(arg1: *mut ::std::os::raw::c_char, arg2: size_t) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSetProgramName(arg1: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetDate(arg1: *mut ::std::os::raw::c_char, arg2: size_t) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetVersion(arg1: *mut ::std::os::raw::c_char, arg2: size_t) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetVersionNumber(
        arg1: *mut PetscInt,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortedInt(
        arg1: PetscInt,
        arg2: *const PetscInt,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortedMPIInt(
        arg1: PetscInt,
        arg2: *const PetscMPIInt,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortedReal(
        arg1: PetscInt,
        arg2: *const PetscReal,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortInt(arg1: PetscInt, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortReverseInt(arg1: PetscInt, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortedRemoveDupsInt(arg1: *mut PetscInt, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortRemoveDupsInt(arg1: *mut PetscInt, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscCheckDupsInt(
        arg1: PetscInt,
        arg2: *const PetscInt,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFindInt(
        arg1: PetscInt,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFindMPIInt(
        arg1: PetscMPIInt,
        arg2: PetscInt,
        arg3: *const PetscMPIInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortIntWithPermutation(
        arg1: PetscInt,
        arg2: *const PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortStrWithPermutation(
        arg1: PetscInt,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortIntWithArray(
        arg1: PetscInt,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortIntWithArrayPair(
        arg1: PetscInt,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortMPIInt(arg1: PetscInt, arg2: *mut PetscMPIInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortRemoveDupsMPIInt(arg1: *mut PetscInt, arg2: *mut PetscMPIInt)
        -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortMPIIntWithArray(
        arg1: PetscMPIInt,
        arg2: *mut PetscMPIInt,
        arg3: *mut PetscMPIInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortMPIIntWithIntArray(
        arg1: PetscMPIInt,
        arg2: *mut PetscMPIInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortIntWithScalarArray(
        arg1: PetscInt,
        arg2: *mut PetscInt,
        arg3: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortIntWithDataArray(
        arg1: PetscInt,
        arg2: *mut PetscInt,
        arg3: *mut ::std::os::raw::c_void,
        arg4: size_t,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortReal(arg1: PetscInt, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortRealWithArrayInt(
        arg1: PetscInt,
        arg2: *mut PetscReal,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortRealWithPermutation(
        arg1: PetscInt,
        arg2: *const PetscReal,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortRemoveDupsReal(arg1: *mut PetscInt, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFindReal(
        arg1: PetscReal,
        arg2: PetscInt,
        arg3: *const PetscReal,
        arg4: PetscReal,
        arg5: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortSplit(
        arg1: PetscInt,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSortSplitReal(
        arg1: PetscInt,
        arg2: PetscInt,
        arg3: *mut PetscReal,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscProcessTree(
        arg1: PetscInt,
        arg2: *const PetscBool,
        arg3: *const PetscInt,
        arg4: *mut PetscInt,
        arg5: *mut *mut PetscInt,
        arg6: *mut *mut PetscInt,
        arg7: *mut *mut PetscInt,
        arg8: *mut *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMergeIntArrayPair(
        arg1: PetscInt,
        arg2: *const PetscInt,
        arg3: *const PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
        arg6: *const PetscInt,
        arg7: *mut PetscInt,
        arg8: *mut *mut PetscInt,
        arg9: *mut *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMergeIntArray(
        arg1: PetscInt,
        arg2: *const PetscInt,
        arg3: PetscInt,
        arg4: *const PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMergeMPIIntArray(
        arg1: PetscInt,
        arg2: *const PetscMPIInt,
        arg3: PetscInt,
        arg4: *const PetscMPIInt,
        arg5: *mut PetscInt,
        arg6: *mut *mut PetscMPIInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscParallelSortedInt(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscTimSort(
        arg1: PetscInt,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscIntSortSemiOrdered(arg1: PetscInt, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMPIIntSortSemiOrdered(arg1: PetscInt, arg2: *mut PetscMPIInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRealSortSemiOrdered(arg1: PetscInt, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscTimSortWithArray(
        arg1: PetscInt,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
        arg4: *mut ::std::os::raw::c_void,
        arg5: size_t,
        arg6: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg7: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscIntSortSemiOrderedWithArray(
        arg1: PetscInt,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMPIIntSortSemiOrderedWithArray(
        arg1: PetscInt,
        arg2: *mut PetscMPIInt,
        arg3: *mut PetscMPIInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRealSortSemiOrderedWithArrayInt(
        arg1: PetscInt,
        arg2: *mut PetscReal,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSetDisplay() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetDisplay(arg1: *mut ::std::os::raw::c_char, arg2: size_t) -> PetscErrorCode;
}
pub type PetscRandomType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut PETSC_RANDOM_CLASSID: PetscClassId;
}
extern "C" {
    pub fn PetscRandomInitializePackage() -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscRandomList: PetscFunctionList;
}
extern "C" {
    pub fn PetscRandomRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: PetscRandom) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomSetType(arg1: PetscRandom, arg2: PetscRandomType) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomSetFromOptions(arg1: PetscRandom) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomGetType(arg1: PetscRandom, arg2: *mut PetscRandomType) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomViewFromOptions(
        arg1: PetscRandom,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomView(arg1: PetscRandom, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomCreate(arg1: MPI_Comm, arg2: *mut PetscRandom) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomGetValue(arg1: PetscRandom, arg2: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomGetValueReal(arg1: PetscRandom, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomGetValues(
        arg1: PetscRandom,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomGetValuesReal(
        arg1: PetscRandom,
        arg2: PetscInt,
        arg3: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomGetInterval(
        arg1: PetscRandom,
        arg2: *mut PetscScalar,
        arg3: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomSetInterval(
        arg1: PetscRandom,
        arg2: PetscScalar,
        arg3: PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomSetSeed(arg1: PetscRandom, arg2: ::std::os::raw::c_ulong) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomGetSeed(
        arg1: PetscRandom,
        arg2: *mut ::std::os::raw::c_ulong,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomSeed(arg1: PetscRandom) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRandomDestroy(arg1: *mut PetscRandom) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetFullPath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetRelativePath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetWorkingDirectory(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetRealPath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetHomeDirectory(arg1: *mut ::std::os::raw::c_char, arg2: size_t)
        -> PetscErrorCode;
}
extern "C" {
    pub fn PetscTestFile(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscTestDirectory(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMkdir(arg1: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscMkdtemp(arg1: *mut ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscRMTree(arg1: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscBinaryRead(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: PetscInt,
        arg4: *mut PetscInt,
        arg5: PetscDataType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscBinarySynchronizedRead(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: PetscInt,
        arg5: *mut PetscInt,
        arg6: PetscDataType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscBinaryWrite(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: PetscInt,
        arg4: PetscDataType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscBinarySynchronizedWrite(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_void,
        arg4: PetscInt,
        arg5: PetscDataType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscBinaryOpen(
        arg1: *const ::std::os::raw::c_char,
        arg2: PetscFileMode,
        arg3: *mut ::std::os::raw::c_int,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscBinaryClose(arg1: ::std::os::raw::c_int) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSharedTmp(arg1: MPI_Comm, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSharedWorkingDirectory(arg1: MPI_Comm, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGetTmp(
        arg1: MPI_Comm,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscFileRetrieve(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: size_t,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLs(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: size_t,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOpenSocket(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscBinarySeek(
        arg1: ::std::os::raw::c_int,
        arg2: off_t,
        arg3: PetscBinarySeekType,
        arg4: *mut off_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscBinarySynchronizedSeek(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
        arg4: PetscBinarySeekType,
        arg5: *mut off_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscByteSwap(
        arg1: *mut ::std::os::raw::c_void,
        arg2: PetscDataType,
        arg3: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSetDebugTerminal(arg1: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSetDebugger(arg1: *const ::std::os::raw::c_char, arg2: PetscBool)
        -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSetDefaultDebugger() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSetDebuggerFromString(arg1: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscAttachDebugger() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscStopForDebugger() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscWaitOnError() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGatherNumberOfMessages(
        arg1: MPI_Comm,
        arg2: *const PetscMPIInt,
        arg3: *const PetscMPIInt,
        arg4: *mut PetscMPIInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGatherMessageLengths(
        arg1: MPI_Comm,
        arg2: PetscMPIInt,
        arg3: PetscMPIInt,
        arg4: *const PetscMPIInt,
        arg5: *mut *mut PetscMPIInt,
        arg6: *mut *mut PetscMPIInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGatherMessageLengths2(
        arg1: MPI_Comm,
        arg2: PetscMPIInt,
        arg3: PetscMPIInt,
        arg4: *const PetscMPIInt,
        arg5: *const PetscMPIInt,
        arg6: *mut *mut PetscMPIInt,
        arg7: *mut *mut PetscMPIInt,
        arg8: *mut *mut PetscMPIInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPostIrecvInt(
        arg1: MPI_Comm,
        arg2: PetscMPIInt,
        arg3: PetscMPIInt,
        arg4: *const PetscMPIInt,
        arg5: *const PetscMPIInt,
        arg6: *mut *mut *mut PetscInt,
        arg7: *mut *mut MPI_Request,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPostIrecvScalar(
        arg1: MPI_Comm,
        arg2: PetscMPIInt,
        arg3: PetscMPIInt,
        arg4: *const PetscMPIInt,
        arg5: *const PetscMPIInt,
        arg6: *mut *mut *mut PetscScalar,
        arg7: *mut *mut MPI_Request,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscCommBuildTwoSided(
        arg1: MPI_Comm,
        arg2: PetscMPIInt,
        arg3: MPI_Datatype,
        arg4: PetscMPIInt,
        arg5: *const PetscMPIInt,
        arg6: *const ::std::os::raw::c_void,
        arg7: *mut PetscMPIInt,
        arg8: *mut *mut PetscMPIInt,
        arg9: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscCommBuildTwoSidedF(
        arg1: MPI_Comm,
        arg2: PetscMPIInt,
        arg3: MPI_Datatype,
        arg4: PetscMPIInt,
        arg5: *const PetscMPIInt,
        arg6: *const ::std::os::raw::c_void,
        arg7: *mut PetscMPIInt,
        arg8: *mut *mut PetscMPIInt,
        arg9: *mut ::std::os::raw::c_void,
        arg10: PetscMPIInt,
        send: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: MPI_Comm,
                arg2: *const PetscMPIInt,
                arg3: PetscMPIInt,
                arg4: PetscMPIInt,
                arg5: *mut ::std::os::raw::c_void,
                arg6: *mut MPI_Request,
                arg7: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        recv: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: MPI_Comm,
                arg2: *const PetscMPIInt,
                arg3: PetscMPIInt,
                arg4: *mut ::std::os::raw::c_void,
                arg5: *mut MPI_Request,
                arg6: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscCommBuildTwoSidedFReq(
        arg1: MPI_Comm,
        arg2: PetscMPIInt,
        arg3: MPI_Datatype,
        arg4: PetscMPIInt,
        arg5: *const PetscMPIInt,
        arg6: *const ::std::os::raw::c_void,
        arg7: *mut PetscMPIInt,
        arg8: *mut *mut PetscMPIInt,
        arg9: *mut ::std::os::raw::c_void,
        arg10: PetscMPIInt,
        arg11: *mut *mut MPI_Request,
        arg12: *mut *mut MPI_Request,
        send: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: MPI_Comm,
                arg2: *const PetscMPIInt,
                arg3: PetscMPIInt,
                arg4: PetscMPIInt,
                arg5: *mut ::std::os::raw::c_void,
                arg6: *mut MPI_Request,
                arg7: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        recv: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: MPI_Comm,
                arg2: *const PetscMPIInt,
                arg3: PetscMPIInt,
                arg4: *mut ::std::os::raw::c_void,
                arg5: *mut MPI_Request,
                arg6: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscBuildTwoSidedTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn PetscCommBuildTwoSidedSetType(
        arg1: MPI_Comm,
        arg2: PetscBuildTwoSidedType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscCommBuildTwoSidedGetType(
        arg1: MPI_Comm,
        arg2: *mut PetscBuildTwoSidedType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSSEIsEnabled(
        arg1: MPI_Comm,
        arg2: *mut PetscBool,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscObjectComm(arg1: PetscObject) -> MPI_Comm;
}
extern "C" {
    pub static mut PetscSubcommTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscSubcomm {
    pub parent: MPI_Comm,
    pub dupparent: MPI_Comm,
    pub child: MPI_Comm,
    pub n: PetscMPIInt,
    pub color: PetscMPIInt,
    pub subsize: *mut PetscMPIInt,
    pub type_: PetscSubcommType,
    pub subcommprefix: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__n_PetscSubcomm() {
    assert_eq!(
        ::std::mem::size_of::<_n_PetscSubcomm>(),
        56usize,
        concat!("Size of: ", stringify!(_n_PetscSubcomm))
    );
    assert_eq!(
        ::std::mem::align_of::<_n_PetscSubcomm>(),
        8usize,
        concat!("Alignment of ", stringify!(_n_PetscSubcomm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscSubcomm>())).parent as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscSubcomm),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscSubcomm>())).dupparent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscSubcomm),
            "::",
            stringify!(dupparent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscSubcomm>())).child as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscSubcomm),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscSubcomm>())).n as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscSubcomm),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscSubcomm>())).color as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscSubcomm),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscSubcomm>())).subsize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscSubcomm),
            "::",
            stringify!(subsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscSubcomm>())).type_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscSubcomm),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscSubcomm>())).subcommprefix as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscSubcomm),
            "::",
            stringify!(subcommprefix)
        )
    );
}
extern "C" {
    pub fn PetscSubcommCreate(arg1: MPI_Comm, arg2: *mut PetscSubcomm) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSubcommDestroy(arg1: *mut PetscSubcomm) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSubcommSetNumber(arg1: PetscSubcomm, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSubcommSetType(arg1: PetscSubcomm, arg2: PetscSubcommType) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSubcommSetTypeGeneral(
        arg1: PetscSubcomm,
        arg2: PetscMPIInt,
        arg3: PetscMPIInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSubcommView(arg1: PetscSubcomm, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSubcommSetFromOptions(arg1: PetscSubcomm) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSubcommSetOptionsPrefix(
        arg1: PetscSubcomm,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSubcommGetParent(arg1: PetscSubcomm, arg2: *mut MPI_Comm) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSubcommGetContiguousParent(
        arg1: PetscSubcomm,
        arg2: *mut MPI_Comm,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSubcommGetChild(arg1: PetscSubcomm, arg2: *mut MPI_Comm) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscHeapCreate(arg1: PetscInt, arg2: *mut PetscHeap) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscHeapAdd(arg1: PetscHeap, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscHeapPop(
        arg1: PetscHeap,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscHeapPeek(
        arg1: PetscHeap,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscHeapStash(arg1: PetscHeap, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscHeapUnstash(arg1: PetscHeap) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscHeapDestroy(arg1: *mut PetscHeap) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscHeapView(arg1: PetscHeap, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscProcessPlacementView(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscShmCommGet(arg1: MPI_Comm, arg2: *mut PetscShmComm) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscShmCommGlobalToLocal(
        arg1: PetscShmComm,
        arg2: PetscMPIInt,
        arg3: *mut PetscMPIInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscShmCommLocalToGlobal(
        arg1: PetscShmComm,
        arg2: PetscMPIInt,
        arg3: *mut PetscMPIInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscShmCommGetMpiShmComm(arg1: PetscShmComm, arg2: *mut MPI_Comm) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOmpCtrlCreate(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: *mut PetscOmpCtrl,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOmpCtrlGetOmpComms(
        arg1: PetscOmpCtrl,
        arg2: *mut MPI_Comm,
        arg3: *mut MPI_Comm,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOmpCtrlDestroy(arg1: *mut PetscOmpCtrl) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOmpCtrlBarrier(arg1: PetscOmpCtrl) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOmpCtrlOmpRegionOnMasterBegin(arg1: PetscOmpCtrl) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOmpCtrlOmpRegionOnMasterEnd(arg1: PetscOmpCtrl) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSegBufferCreate(
        arg1: size_t,
        arg2: size_t,
        arg3: *mut PetscSegBuffer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSegBufferDestroy(arg1: *mut PetscSegBuffer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSegBufferGet(
        arg1: PetscSegBuffer,
        arg2: size_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSegBufferExtractAlloc(
        arg1: PetscSegBuffer,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSegBufferExtractTo(
        arg1: PetscSegBuffer,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSegBufferExtractInPlace(
        arg1: PetscSegBuffer,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSegBufferGetSize(arg1: PetscSegBuffer, arg2: *mut size_t) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSegBufferUnuse(arg1: PetscSegBuffer, arg2: size_t) -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscOptionsHelpPrintedSingleton: PetscOptionsHelpPrinted;
}
extern "C" {
    pub fn PetscOptionsHelpPrintedDestroy(arg1: *mut PetscOptionsHelpPrinted) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsHelpPrintedCreate(arg1: *mut PetscOptionsHelpPrinted) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsHelpPrintedCheck(
        arg1: PetscOptionsHelpPrinted,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscVSNPrintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut size_t,
        arg5: *mut __va_list_tag,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscVFPrintf: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut FILE,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut __va_list_tag,
        ) -> PetscErrorCode,
    >;
}
extern "C" {
    pub static mut PetscCitationsList: PetscSegBuffer;
}
extern "C" {
    pub fn PetscURLShorten(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGoogleDriveAuthorize(
        arg1: MPI_Comm,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGoogleDriveRefresh(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGoogleDriveUpload(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscBoxAuthorize(
        arg1: MPI_Comm,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscBoxRefresh(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscGlobusGetTransfers(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscTextBelt(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscTellMyCell(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPullJSONValue(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: size_t,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscPushJSONValue(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MPIU_Win_allocate_shared(
        arg1: MPI_Aint,
        arg2: PetscMPIInt,
        arg3: MPI_Info,
        arg4: MPI_Comm,
        arg5: *mut ::std::os::raw::c_void,
        arg6: *mut MPI_Win,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MPIU_Win_shared_query(
        arg1: MPI_Win,
        arg2: PetscMPIInt,
        arg3: *mut MPI_Aint,
        arg4: *mut PetscMPIInt,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscHasExternalPackage(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PetscBool,
    ) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscSF {
    _unused: [u8; 0],
}
pub type PetscSF = *mut _p_PetscSF;
pub type PetscSFType = *const ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PetscSFNode {
    pub rank: PetscInt,
    pub index: PetscInt,
}
#[test]
fn bindgen_test_layout_PetscSFNode() {
    assert_eq!(
        ::std::mem::size_of::<PetscSFNode>(),
        8usize,
        concat!("Size of: ", stringify!(PetscSFNode))
    );
    assert_eq!(
        ::std::mem::align_of::<PetscSFNode>(),
        4usize,
        concat!("Alignment of ", stringify!(PetscSFNode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscSFNode>())).rank as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscSFNode),
            "::",
            stringify!(rank)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscSFNode>())).index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscSFNode),
            "::",
            stringify!(index)
        )
    );
}
pub type VecScatter = PetscSF;
pub type VecScatterType = PetscSFType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscSection {
    _unused: [u8; 0],
}
pub type PetscSection = *mut _p_PetscSection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscSectionSym {
    _unused: [u8; 0],
}
pub type PetscSectionSym = *mut _p_PetscSectionSym;
pub type PetscSectionSymType = *const ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_IS {
    _unused: [u8; 0],
}
pub type IS = *mut _p_IS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_ISLocalToGlobalMapping {
    _unused: [u8; 0],
}
pub type ISLocalToGlobalMapping = *mut _p_ISLocalToGlobalMapping;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_ISColoring {
    _unused: [u8; 0],
}
pub type ISColoring = *mut _n_ISColoring;
pub type PetscLayout = *mut _n_PetscLayout;
extern "C" {
    pub static mut IS_CLASSID: PetscClassId;
}
extern "C" {
    pub fn ISInitializePackage() -> PetscErrorCode;
}
pub type ISType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut ISList: PetscFunctionList;
}
extern "C" {
    pub fn ISSetType(arg1: IS, arg2: ISType) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGetType(arg1: IS, arg2: *mut ISType) -> PetscErrorCode;
}
extern "C" {
    pub fn ISRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: IS) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISCreate(arg1: MPI_Comm, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISDestroy(arg1: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISSetPermutation(arg1: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISPermutation(arg1: IS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn ISSetIdentity(arg1: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISIdentity(arg1: IS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn ISContiguousLocal(
        arg1: IS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscInt,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ISInfo {
    IS_INFO_MIN = -1,
    IS_SORTED = 0,
    IS_UNIQUE = 1,
    IS_PERMUTATION = 2,
    IS_INTERVAL = 3,
    IS_IDENTITY = 4,
    IS_INFO_MAX = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ISInfoType {
    IS_LOCAL = 0,
    IS_GLOBAL = 1,
}
extern "C" {
    pub fn ISSetInfo(
        arg1: IS,
        arg2: ISInfo,
        arg3: ISInfoType,
        arg4: PetscBool,
        arg5: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGetInfo(
        arg1: IS,
        arg2: ISInfo,
        arg3: ISInfoType,
        arg4: PetscBool,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISClearInfoCache(arg1: IS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGetIndices(arg1: IS, arg2: *mut *const PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISRestoreIndices(arg1: IS, arg2: *mut *const PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGetTotalIndices(arg1: IS, arg2: *mut *const PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISRestoreTotalIndices(arg1: IS, arg2: *mut *const PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGetNonlocalIndices(arg1: IS, arg2: *mut *const PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISRestoreNonlocalIndices(arg1: IS, arg2: *mut *const PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGetNonlocalIS(arg1: IS, is: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISRestoreNonlocalIS(arg1: IS, is: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGetSize(arg1: IS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGetLocalSize(arg1: IS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISInvertPermutation(arg1: IS, arg2: PetscInt, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISView(arg1: IS, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn ISViewFromOptions(
        arg1: IS,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLoad(arg1: IS, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn ISEqual(arg1: IS, arg2: IS, arg3: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn ISEqualUnsorted(arg1: IS, arg2: IS, arg3: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn ISSort(arg1: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISSortRemoveDups(arg1: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISSorted(arg1: IS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn ISDifference(arg1: IS, arg2: IS, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISSum(arg1: IS, arg2: IS, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISExpand(arg1: IS, arg2: IS, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISIntersect(arg1: IS, arg2: IS, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGetMinMax(arg1: IS, arg2: *mut PetscInt, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocate(arg1: IS, arg2: PetscInt, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGetPointRange(
        arg1: IS,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISRestorePointRange(
        arg1: IS,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGetPointSubrange(
        arg1: IS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGetBlockSize(arg1: IS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISSetBlockSize(arg1: IS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISToGeneral(arg1: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISDuplicate(arg1: IS, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISCopy(arg1: IS, arg2: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISAllGather(arg1: IS, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISComplement(arg1: IS, arg2: PetscInt, arg3: PetscInt, arg4: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISConcatenate(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: *const IS,
        arg4: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISListToPair(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: *mut IS,
        arg4: *mut IS,
        arg5: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISPairToList(
        arg1: IS,
        arg2: IS,
        arg3: *mut PetscInt,
        arg4: *mut *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISEmbed(arg1: IS, arg2: IS, arg3: PetscBool, arg4: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISSortPermutation(arg1: IS, arg2: PetscBool, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISOnComm(arg1: IS, arg2: MPI_Comm, arg3: PetscCopyMode, arg4: *mut IS)
        -> PetscErrorCode;
}
extern "C" {
    pub fn ISRenumber(arg1: IS, arg2: IS, arg3: *mut PetscInt, arg4: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISCreateSubIS(arg1: IS, arg2: IS, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISCreateGeneral(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscCopyMode,
        arg5: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGeneralSetIndices(
        arg1: IS,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscCopyMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGeneralFilter(arg1: IS, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISCreateBlock(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *const PetscInt,
        arg5: PetscCopyMode,
        arg6: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISBlockSetIndices(
        arg1: IS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *const PetscInt,
        arg5: PetscCopyMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISBlockGetIndices(arg1: IS, arg2: *mut *const PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISBlockRestoreIndices(arg1: IS, arg2: *mut *const PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISBlockGetLocalSize(arg1: IS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISBlockGetSize(arg1: IS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISCreateStride(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISStrideSetStride(
        arg1: IS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISStrideGetInfo(arg1: IS, arg2: *mut PetscInt, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub static mut IS_LTOGM_CLASSID: PetscClassId;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ISGlobalToLocalMappingMode {
    IS_GTOLM_MASK = 0,
    IS_GTOLM_DROP = 1,
}
pub type ISLocalToGlobalMappingType = *const ::std::os::raw::c_char;
extern "C" {
    pub fn ISLocalToGlobalMappingSetType(
        arg1: ISLocalToGlobalMapping,
        arg2: ISLocalToGlobalMappingType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: ISLocalToGlobalMapping) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingRegisterAll() -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingCreate(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *const PetscInt,
        arg5: PetscCopyMode,
        arg6: *mut ISLocalToGlobalMapping,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingCreateIS(
        arg1: IS,
        arg2: *mut ISLocalToGlobalMapping,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingCreateSF(
        arg1: PetscSF,
        arg2: PetscInt,
        arg3: *mut ISLocalToGlobalMapping,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingSetFromOptions(arg1: ISLocalToGlobalMapping) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingSetUp(arg1: ISLocalToGlobalMapping) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingView(
        arg1: ISLocalToGlobalMapping,
        arg2: PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingViewFromOptions(
        arg1: ISLocalToGlobalMapping,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingDestroy(arg1: *mut ISLocalToGlobalMapping) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingApply(
        arg1: ISLocalToGlobalMapping,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingApplyBlock(
        arg1: ISLocalToGlobalMapping,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingApplyIS(
        arg1: ISLocalToGlobalMapping,
        arg2: IS,
        arg3: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGlobalToLocalMappingApply(
        arg1: ISLocalToGlobalMapping,
        arg2: ISGlobalToLocalMappingMode,
        arg3: PetscInt,
        arg4: *const PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGlobalToLocalMappingApplyBlock(
        arg1: ISLocalToGlobalMapping,
        arg2: ISGlobalToLocalMappingMode,
        arg3: PetscInt,
        arg4: *const PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGlobalToLocalMappingApplyIS(
        arg1: ISLocalToGlobalMapping,
        arg2: ISGlobalToLocalMappingMode,
        arg3: IS,
        arg4: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingGetSize(
        arg1: ISLocalToGlobalMapping,
        arg2: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingGetNodeInfo(
        arg1: ISLocalToGlobalMapping,
        arg2: *mut PetscInt,
        arg3: *mut *mut PetscInt,
        arg4: *mut *mut *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingRestoreNodeInfo(
        arg1: ISLocalToGlobalMapping,
        arg2: *mut PetscInt,
        arg3: *mut *mut PetscInt,
        arg4: *mut *mut *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingGetInfo(
        arg1: ISLocalToGlobalMapping,
        arg2: *mut PetscInt,
        arg3: *mut *mut PetscInt,
        arg4: *mut *mut PetscInt,
        arg5: *mut *mut *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingRestoreInfo(
        arg1: ISLocalToGlobalMapping,
        arg2: *mut PetscInt,
        arg3: *mut *mut PetscInt,
        arg4: *mut *mut PetscInt,
        arg5: *mut *mut *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingGetBlockInfo(
        arg1: ISLocalToGlobalMapping,
        arg2: *mut PetscInt,
        arg3: *mut *mut PetscInt,
        arg4: *mut *mut PetscInt,
        arg5: *mut *mut *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingRestoreBlockInfo(
        arg1: ISLocalToGlobalMapping,
        arg2: *mut PetscInt,
        arg3: *mut *mut PetscInt,
        arg4: *mut *mut PetscInt,
        arg5: *mut *mut *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingGetIndices(
        arg1: ISLocalToGlobalMapping,
        arg2: *mut *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingRestoreIndices(
        arg1: ISLocalToGlobalMapping,
        arg2: *mut *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingGetBlockIndices(
        arg1: ISLocalToGlobalMapping,
        arg2: *mut *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingRestoreBlockIndices(
        arg1: ISLocalToGlobalMapping,
        arg2: *mut *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingConcatenate(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: *const ISLocalToGlobalMapping,
        arg4: *mut ISLocalToGlobalMapping,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingGetBlockSize(
        arg1: ISLocalToGlobalMapping,
        arg2: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingSetBlockSize(
        arg1: ISLocalToGlobalMapping,
        arg2: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISLocalToGlobalMappingDuplicate(
        arg1: ISLocalToGlobalMapping,
        arg2: *mut ISLocalToGlobalMapping,
    ) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ISColoringType {
    IS_COLORING_GLOBAL = 0,
    IS_COLORING_LOCAL = 1,
}
extern "C" {
    pub static mut ISColoringTypes: [*const ::std::os::raw::c_char; 0usize];
}
pub type ISColoringValue = ::std::os::raw::c_ushort;
extern "C" {
    pub fn ISAllGatherColors(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: *mut ISColoringValue,
        arg4: *mut PetscInt,
        arg5: *mut *mut ISColoringValue,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISColoringCreate(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *const ISColoringValue,
        arg5: PetscCopyMode,
        arg6: *mut ISColoring,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISColoringDestroy(arg1: *mut ISColoring) -> PetscErrorCode;
}
extern "C" {
    pub fn ISColoringView(arg1: ISColoring, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn ISColoringViewFromOptions(
        arg1: ISColoring,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISColoringGetIS(
        arg1: ISColoring,
        arg2: PetscCopyMode,
        arg3: *mut PetscInt,
        arg4: *mut *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISColoringRestoreIS(
        arg1: ISColoring,
        arg2: PetscCopyMode,
        arg3: *mut *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISColoringReference(arg1: ISColoring) -> PetscErrorCode;
}
extern "C" {
    pub fn ISColoringSetType(arg1: ISColoring, arg2: ISColoringType) -> PetscErrorCode;
}
extern "C" {
    pub fn ISColoringGetType(arg1: ISColoring, arg2: *mut ISColoringType) -> PetscErrorCode;
}
extern "C" {
    pub fn ISColoringGetColors(
        arg1: ISColoring,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut *const ISColoringValue,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISBuildTwoSided(arg1: IS, arg2: IS, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISPartitioningToNumbering(arg1: IS, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn ISPartitioningCount(arg1: IS, arg2: PetscInt, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn ISCompressIndicesGeneral(
        arg1: PetscInt,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: *const IS,
        arg6: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISCompressIndicesSorted(
        arg1: PetscInt,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *const IS,
        arg5: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISExpandIndicesGeneral(
        arg1: PetscInt,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: *const IS,
        arg6: *mut IS,
    ) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscLayout {
    pub comm: MPI_Comm,
    pub size: PetscMPIInt,
    pub n: PetscInt,
    pub N: PetscInt,
    pub rstart: PetscInt,
    pub rend: PetscInt,
    pub range: *mut PetscInt,
    pub range_alloc: PetscBool,
    pub bs: PetscInt,
    pub refcnt: PetscInt,
    pub mapping: ISLocalToGlobalMapping,
    pub setupcalled: PetscBool,
    pub oldn: PetscInt,
    pub oldN: PetscInt,
    pub oldbs: PetscInt,
}
#[test]
fn bindgen_test_layout__n_PetscLayout() {
    assert_eq!(
        ::std::mem::size_of::<_n_PetscLayout>(),
        80usize,
        concat!("Size of: ", stringify!(_n_PetscLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<_n_PetscLayout>(),
        8usize,
        concat!("Alignment of ", stringify!(_n_PetscLayout))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscLayout>())).comm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscLayout),
            "::",
            stringify!(comm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscLayout>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscLayout),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscLayout>())).n as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscLayout),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscLayout>())).N as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscLayout),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscLayout>())).rstart as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscLayout),
            "::",
            stringify!(rstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscLayout>())).rend as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscLayout),
            "::",
            stringify!(rend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscLayout>())).range as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscLayout),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscLayout>())).range_alloc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscLayout),
            "::",
            stringify!(range_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscLayout>())).bs as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscLayout),
            "::",
            stringify!(bs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscLayout>())).refcnt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscLayout),
            "::",
            stringify!(refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscLayout>())).mapping as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscLayout),
            "::",
            stringify!(mapping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscLayout>())).setupcalled as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscLayout),
            "::",
            stringify!(setupcalled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscLayout>())).oldn as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscLayout),
            "::",
            stringify!(oldn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscLayout>())).oldN as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscLayout),
            "::",
            stringify!(oldN)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_PetscLayout>())).oldbs as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_PetscLayout),
            "::",
            stringify!(oldbs)
        )
    );
}
extern "C" {
    pub fn PetscLayoutCreate(arg1: MPI_Comm, arg2: *mut PetscLayout) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutCreateFromSizes(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: *mut PetscLayout,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutCreateFromRanges(
        arg1: MPI_Comm,
        arg2: *const PetscInt,
        arg3: PetscCopyMode,
        arg4: PetscInt,
        arg5: *mut PetscLayout,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutSetUp(arg1: PetscLayout) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutDestroy(arg1: *mut PetscLayout) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutDuplicate(arg1: PetscLayout, arg2: *mut PetscLayout) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutReference(arg1: PetscLayout, arg2: *mut PetscLayout) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutSetLocalSize(arg1: PetscLayout, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutGetLocalSize(arg1: PetscLayout, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutSetSize(arg1: PetscLayout, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutGetSize(arg1: PetscLayout, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutSetBlockSize(arg1: PetscLayout, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutGetBlockSize(arg1: PetscLayout, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutGetRange(
        arg1: PetscLayout,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutGetRanges(arg1: PetscLayout, arg2: *mut *const PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutCompare(
        arg1: PetscLayout,
        arg2: PetscLayout,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutSetISLocalToGlobalMapping(
        arg1: PetscLayout,
        arg2: ISLocalToGlobalMapping,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscLayoutMapLocal(
        arg1: PetscLayout,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *mut PetscInt,
        arg5: *mut *mut PetscInt,
        arg6: *mut *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscParallelSortInt(
        arg1: PetscLayout,
        arg2: PetscLayout,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISGetLayout(arg1: IS, arg2: *mut PetscLayout) -> PetscErrorCode;
}
impl PetscMemType {
    pub const PETSC_MEMTYPE_CUDA: PetscMemType = PetscMemType::PETSC_MEMTYPE_DEVICE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscMemType {
    PETSC_MEMTYPE_HOST = 0,
    PETSC_MEMTYPE_DEVICE = 1,
    PETSC_MEMTYPE_NVSHMEM = 17,
    PETSC_MEMTYPE_HIP = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscOffloadMask {
    PETSC_OFFLOAD_UNALLOCATED = 0,
    PETSC_OFFLOAD_CPU = 1,
    PETSC_OFFLOAD_GPU = 2,
    PETSC_OFFLOAD_BOTH = 3,
    PETSC_OFFLOAD_VECKOKKOS = 256,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscDeviceKind {
    PETSC_DEVICE_INVALID = 0,
    PETSC_DEVICE_CUDA = 1,
    PETSC_DEVICE_HIP = 2,
    PETSC_DEVICE_MAX = 3,
}
extern "C" {
    pub static mut PetscDeviceKinds: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscDevice {
    _unused: [u8; 0],
}
pub type PetscDevice = *mut _n_PetscDevice;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscStreamType {
    PETSC_STREAM_GLOBAL_BLOCKING = 0,
    PETSC_STREAM_DEFAULT_BLOCKING = 1,
    PETSC_STREAM_GLOBAL_NONBLOCKING = 2,
    PETSC_STREAM_MAX = 3,
}
extern "C" {
    pub static mut PetscStreamTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscDeviceContextJoinMode {
    PETSC_DEVICE_CONTEXT_JOIN_DESTROY = 0,
    PETSC_DEVICE_CONTEXT_JOIN_SYNC = 1,
    PETSC_DEVICE_CONTEXT_JOIN_NO_SYNC = 2,
}
extern "C" {
    pub static mut PetscDeviceContextJoinModes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscDeviceContext {
    _unused: [u8; 0],
}
pub type PetscDeviceContext = *mut _n_PetscDeviceContext;
pub type PetscDrawType = *const ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscDraw {
    _unused: [u8; 0],
}
pub type PetscDraw = *mut _p_PetscDraw;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscDrawAxis {
    _unused: [u8; 0],
}
pub type PetscDrawAxis = *mut _p_PetscDrawAxis;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscDrawLG {
    _unused: [u8; 0],
}
pub type PetscDrawLG = *mut _p_PetscDrawLG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscDrawSP {
    _unused: [u8; 0],
}
pub type PetscDrawSP = *mut _p_PetscDrawSP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscDrawHG {
    _unused: [u8; 0],
}
pub type PetscDrawHG = *mut _p_PetscDrawHG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscDrawBar {
    _unused: [u8; 0],
}
pub type PetscDrawBar = *mut _p_PetscDrawBar;
extern "C" {
    pub static mut PETSC_VIEWER_CLASSID: PetscClassId;
}
pub type PetscViewerType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut PetscViewerList: PetscFunctionList;
}
extern "C" {
    pub fn PetscViewerInitializePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: PetscViewer) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerCreate(arg1: MPI_Comm, arg2: *mut PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerSetFromOptions(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIIOpenWithFILE(
        arg1: MPI_Comm,
        arg2: *mut FILE,
        arg3: *mut PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIIOpen(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIISetFILE(arg1: PetscViewer, arg2: *mut FILE) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryOpen(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: PetscFileMode,
        arg4: *mut PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerADIOSOpen(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: PetscFileMode,
        arg4: *mut PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryGetFlowControl(
        arg1: PetscViewer,
        arg2: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinarySetFlowControl(arg1: PetscViewer, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinarySetUseMPIIO(arg1: PetscViewer, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryGetUseMPIIO(arg1: PetscViewer, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryGetMPIIODescriptor(
        arg1: PetscViewer,
        arg2: *mut MPI_File,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryGetMPIIOOffset(
        arg1: PetscViewer,
        arg2: *mut MPI_Offset,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryAddMPIIOOffset(arg1: PetscViewer, arg2: MPI_Offset) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerSocketOpen(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerStringOpen(
        arg1: MPI_Comm,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
        arg4: *mut PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawOpen(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: *mut PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawSetDrawType(arg1: PetscViewer, arg2: PetscDrawType) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawGetDrawType(
        arg1: PetscViewer,
        arg2: *mut PetscDrawType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawSetTitle(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawGetTitle(
        arg1: PetscViewer,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawGetDraw(
        arg1: PetscViewer,
        arg2: PetscInt,
        arg3: *mut PetscDraw,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawBaseAdd(arg1: PetscViewer, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawBaseSet(arg1: PetscViewer, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawGetDrawLG(
        arg1: PetscViewer,
        arg2: PetscInt,
        arg3: *mut PetscDrawLG,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawGetDrawAxis(
        arg1: PetscViewer,
        arg2: PetscInt,
        arg3: *mut PetscDrawAxis,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerMathematicaOpen(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerSiloOpen(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerMatlabOpen(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: PetscFileMode,
        arg4: *mut PetscViewer,
    ) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscViewerGLVisType {
    PETSC_VIEWER_GLVIS_DUMP = 0,
    PETSC_VIEWER_GLVIS_SOCKET = 1,
}
extern "C" {
    pub fn PetscViewerGLVisOpen(
        arg1: MPI_Comm,
        arg2: PetscViewerGLVisType,
        arg3: *const ::std::os::raw::c_char,
        arg4: PetscInt,
        arg5: *mut PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerGLVisSetPrecision(arg1: PetscViewer, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerGLVisSetSnapId(arg1: PetscViewer, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerGLVisSetFields(
        arg1: PetscViewer,
        arg2: PetscInt,
        arg3: *mut *const ::std::os::raw::c_char,
        arg4: *mut PetscInt,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PetscObject,
                arg2: PetscInt,
                arg3: *mut PetscObject,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg6: *mut PetscObject,
        arg7: *mut ::std::os::raw::c_void,
        arg8: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerGetType(arg1: PetscViewer, arg2: *mut PetscViewerType) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerSetType(arg1: PetscViewer, arg2: PetscViewerType) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDestroy(arg1: *mut PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerGetSubViewer(
        arg1: PetscViewer,
        arg2: MPI_Comm,
        arg3: *mut PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerRestoreSubViewer(
        arg1: PetscViewer,
        arg2: MPI_Comm,
        arg3: *mut PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerSetUp(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerView(arg1: PetscViewer, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerViewFromOptions(
        arg1: PetscViewer,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerSetOptionsPrefix(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerAppendOptionsPrefix(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerGetOptionsPrefix(
        arg1: PetscViewer,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerReadable(arg1: PetscViewer, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerWritable(arg1: PetscViewer, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerCheckReadable(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerCheckWritable(arg1: PetscViewer) -> PetscErrorCode;
}
impl PetscViewerFormat {
    pub const PETSC_VIEWER_ASCII_VTK: PetscViewerFormat =
        PetscViewerFormat::PETSC_VIEWER_ASCII_VTK_DEPRECATED;
}
impl PetscViewerFormat {
    pub const PETSC_VIEWER_ASCII_VTK_CELL: PetscViewerFormat =
        PetscViewerFormat::PETSC_VIEWER_ASCII_VTK_CELL_DEPRECATED;
}
impl PetscViewerFormat {
    pub const PETSC_VIEWER_ASCII_VTK_COORDS: PetscViewerFormat =
        PetscViewerFormat::PETSC_VIEWER_ASCII_VTK_COORDS_DEPRECATED;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscViewerFormat {
    PETSC_VIEWER_DEFAULT = 0,
    PETSC_VIEWER_ASCII_MATLAB = 1,
    PETSC_VIEWER_ASCII_MATHEMATICA = 2,
    PETSC_VIEWER_ASCII_IMPL = 3,
    PETSC_VIEWER_ASCII_INFO = 4,
    PETSC_VIEWER_ASCII_INFO_DETAIL = 5,
    PETSC_VIEWER_ASCII_COMMON = 6,
    PETSC_VIEWER_ASCII_SYMMODU = 7,
    PETSC_VIEWER_ASCII_INDEX = 8,
    PETSC_VIEWER_ASCII_DENSE = 9,
    PETSC_VIEWER_ASCII_MATRIXMARKET = 10,
    PETSC_VIEWER_ASCII_VTK_DEPRECATED = 11,
    PETSC_VIEWER_ASCII_VTK_CELL_DEPRECATED = 12,
    PETSC_VIEWER_ASCII_VTK_COORDS_DEPRECATED = 13,
    PETSC_VIEWER_ASCII_PCICE = 14,
    PETSC_VIEWER_ASCII_PYTHON = 15,
    PETSC_VIEWER_ASCII_FACTOR_INFO = 16,
    PETSC_VIEWER_ASCII_LATEX = 17,
    PETSC_VIEWER_ASCII_XML = 18,
    PETSC_VIEWER_ASCII_FLAMEGRAPH = 19,
    PETSC_VIEWER_ASCII_GLVIS = 20,
    PETSC_VIEWER_ASCII_CSV = 21,
    PETSC_VIEWER_DRAW_BASIC = 22,
    PETSC_VIEWER_DRAW_LG = 23,
    PETSC_VIEWER_DRAW_LG_XRANGE = 24,
    PETSC_VIEWER_DRAW_CONTOUR = 25,
    PETSC_VIEWER_DRAW_PORTS = 26,
    PETSC_VIEWER_VTK_VTS = 27,
    PETSC_VIEWER_VTK_VTR = 28,
    PETSC_VIEWER_VTK_VTU = 29,
    PETSC_VIEWER_BINARY_MATLAB = 30,
    PETSC_VIEWER_NATIVE = 31,
    PETSC_VIEWER_HDF5_PETSC = 32,
    PETSC_VIEWER_HDF5_VIZ = 33,
    PETSC_VIEWER_HDF5_XDMF = 34,
    PETSC_VIEWER_HDF5_MAT = 35,
    PETSC_VIEWER_NOFORMAT = 36,
    PETSC_VIEWER_LOAD_BALANCE = 37,
    PETSC_VIEWER_FAILED = 38,
}
extern "C" {
    pub static mut PetscViewerFormats: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn PetscViewerSetFormat(arg1: PetscViewer, arg2: PetscViewerFormat) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerPushFormat(arg1: PetscViewer, arg2: PetscViewerFormat) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerPopFormat(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerGetFormat(arg1: PetscViewer, arg2: *mut PetscViewerFormat) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerFlush(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsPushGetViewerOff(arg1: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsPopGetViewerOff() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetViewerOff(arg1: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetViewer(
        arg1: MPI_Comm,
        arg2: PetscOptions,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut PetscViewer,
        arg6: *mut PetscViewerFormat,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsViewer_Private(
        arg1: *mut PetscOptionItems,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut PetscViewer,
        arg6: *mut PetscViewerFormat,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PetscViewerAndFormat {
    pub viewer: PetscViewer,
    pub format: PetscViewerFormat,
    pub lg: PetscDrawLG,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_PetscViewerAndFormat() {
    assert_eq!(
        ::std::mem::size_of::<PetscViewerAndFormat>(),
        32usize,
        concat!("Size of: ", stringify!(PetscViewerAndFormat))
    );
    assert_eq!(
        ::std::mem::align_of::<PetscViewerAndFormat>(),
        8usize,
        concat!("Alignment of ", stringify!(PetscViewerAndFormat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscViewerAndFormat>())).viewer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscViewerAndFormat),
            "::",
            stringify!(viewer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscViewerAndFormat>())).format as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscViewerAndFormat),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscViewerAndFormat>())).lg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscViewerAndFormat),
            "::",
            stringify!(lg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscViewerAndFormat>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscViewerAndFormat),
            "::",
            stringify!(data)
        )
    );
}
extern "C" {
    pub fn PetscViewerAndFormatCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerAndFormatDestroy(arg1: *mut *mut PetscViewerAndFormat) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIIGetPointer(arg1: PetscViewer, arg2: *mut *mut FILE) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerFileGetMode(arg1: PetscViewer, arg2: *mut PetscFileMode) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerFileSetMode(arg1: PetscViewer, arg2: PetscFileMode) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerRead(
        arg1: PetscViewer,
        arg2: *mut ::std::os::raw::c_void,
        arg3: PetscInt,
        arg4: *mut PetscInt,
        arg5: PetscDataType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIIPrintf(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIISynchronizedPrintf(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIIPushSynchronized(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIIPopSynchronized(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIIPushTab(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIIPopTab(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIIUseTabs(arg1: PetscViewer, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIISetTab(arg1: PetscViewer, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIIGetTab(arg1: PetscViewer, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIIAddTab(arg1: PetscViewer, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIISubtractTab(arg1: PetscViewer, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerASCIIRead(
        arg1: PetscViewer,
        arg2: *mut ::std::os::raw::c_void,
        arg3: PetscInt,
        arg4: *mut PetscInt,
        arg5: PetscDataType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryGetDescriptor(
        arg1: PetscViewer,
        arg2: *mut ::std::os::raw::c_int,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryGetInfoPointer(
        arg1: PetscViewer,
        arg2: *mut *mut FILE,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryRead(
        arg1: PetscViewer,
        arg2: *mut ::std::os::raw::c_void,
        arg3: PetscInt,
        arg4: *mut PetscInt,
        arg5: PetscDataType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryWrite(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_void,
        arg3: PetscInt,
        arg4: PetscDataType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryReadAll(
        arg1: PetscViewer,
        arg2: *mut ::std::os::raw::c_void,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscDataType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryWriteAll(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_void,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscDataType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerStringSPrintf(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerStringSetString(
        arg1: PetscViewer,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerStringGetStringRead(
        arg1: PetscViewer,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: *mut size_t,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerStringSetOwnString(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawClear(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawSetHold(arg1: PetscViewer, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawGetHold(arg1: PetscViewer, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawSetPause(arg1: PetscViewer, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawGetPause(arg1: PetscViewer, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawSetInfo(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawResize(
        arg1: PetscViewer,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawSetBounds(
        arg1: PetscViewer,
        arg2: PetscInt,
        arg3: *const PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerDrawGetBounds(
        arg1: PetscViewer,
        arg2: *mut PetscInt,
        arg3: *mut *const PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerSocketSetConnection(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinarySkipInfo(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinarySetSkipInfo(arg1: PetscViewer, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryGetSkipInfo(arg1: PetscViewer, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinarySetSkipOptions(arg1: PetscViewer, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryGetSkipOptions(
        arg1: PetscViewer,
        arg2: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinarySetSkipHeader(arg1: PetscViewer, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryGetSkipHeader(
        arg1: PetscViewer,
        arg2: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryReadStringArray(
        arg1: PetscViewer,
        arg2: *mut *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerBinaryWriteStringArray(
        arg1: PetscViewer,
        arg2: *const *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerFileSetName(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerFileGetName(
        arg1: PetscViewer,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerVUGetPointer(arg1: PetscViewer, arg2: *mut *mut FILE) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerVUSetVecSeen(arg1: PetscViewer, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerVUGetVecSeen(arg1: PetscViewer, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerVUPrintDeferred(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerVUFlushDeferred(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerMathematicaInitializePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerMathematicaFinalizePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerMathematicaGetName(
        arg1: PetscViewer,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerMathematicaSetName(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerMathematicaClearName(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerMathematicaSkipPackets(
        arg1: PetscViewer,
        arg2: ::std::os::raw::c_int,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerSiloGetName(
        arg1: PetscViewer,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerSiloSetName(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerSiloClearName(arg1: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerSiloGetMeshName(
        arg1: PetscViewer,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerSiloSetMeshName(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerSiloClearMeshName(arg1: PetscViewer) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscViewerVTKFieldType {
    PETSC_VTK_INVALID = 0,
    PETSC_VTK_POINT_FIELD = 1,
    PETSC_VTK_POINT_VECTOR_FIELD = 2,
    PETSC_VTK_CELL_FIELD = 3,
    PETSC_VTK_CELL_VECTOR_FIELD = 4,
}
extern "C" {
    pub fn PetscViewerVTKAddField(
        arg1: PetscViewer,
        arg2: PetscObject,
        PetscViewerVTKWriteFunction: ::std::option::Option<
            unsafe extern "C" fn(arg1: PetscObject, arg2: PetscViewer) -> PetscErrorCode,
        >,
        arg3: PetscInt,
        arg4: PetscViewerVTKFieldType,
        arg5: PetscBool,
        arg6: PetscObject,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerVTKGetDM(arg1: PetscViewer, arg2: *mut PetscObject) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerVTKOpen(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: PetscFileMode,
        arg4: *mut PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PETSC_VIEWER_STDOUT_(arg1: MPI_Comm) -> PetscViewer;
}
extern "C" {
    pub fn PetscViewerASCIIGetStdout(arg1: MPI_Comm, arg2: *mut PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PETSC_VIEWER_STDERR_(arg1: MPI_Comm) -> PetscViewer;
}
extern "C" {
    pub fn PetscViewerASCIIGetStderr(arg1: MPI_Comm, arg2: *mut PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PETSC_VIEWER_DRAW_(arg1: MPI_Comm) -> PetscViewer;
}
extern "C" {
    pub fn PETSC_VIEWER_SOCKET_(arg1: MPI_Comm) -> PetscViewer;
}
extern "C" {
    pub fn PETSC_VIEWER_BINARY_(arg1: MPI_Comm) -> PetscViewer;
}
extern "C" {
    pub fn PETSC_VIEWER_MATLAB_(arg1: MPI_Comm) -> PetscViewer;
}
extern "C" {
    pub fn PETSC_VIEWER_HDF5_(arg1: MPI_Comm) -> PetscViewer;
}
extern "C" {
    pub fn PETSC_VIEWER_GLVIS_(arg1: MPI_Comm) -> PetscViewer;
}
extern "C" {
    pub fn PETSC_VIEWER_EXODUSII_(arg1: MPI_Comm) -> PetscViewer;
}
extern "C" {
    pub static mut PETSC_VIEWER_MATHEMATICA_WORLD_PRIVATE: PetscViewer;
}
extern "C" {
    pub fn PetscViewerFlowControlStart(
        arg1: PetscViewer,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerFlowControlStepMain(
        arg1: PetscViewer,
        arg2: PetscInt,
        arg3: *mut PetscInt,
        arg4: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerFlowControlEndMain(arg1: PetscViewer, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerFlowControlStepWorker(
        arg1: PetscViewer,
        arg2: PetscMPIInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerFlowControlEndWorker(
        arg1: PetscViewer,
        arg2: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerMatlabPutArray(
        arg1: PetscViewer,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const PetscScalar,
        arg5: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerMatlabGetArray(
        arg1: PetscViewer,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut PetscScalar,
        arg5: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerMatlabPutVariable(
        arg1: PetscViewer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_PetscViewers {
    _unused: [u8; 0],
}
pub type PetscViewers = *mut _n_PetscViewers;
extern "C" {
    pub fn PetscViewersCreate(arg1: MPI_Comm, arg2: *mut PetscViewers) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewersDestroy(arg1: *mut PetscViewers) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewersGetViewer(
        arg1: PetscViewers,
        arg2: PetscInt,
        arg3: *mut PetscViewer,
    ) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_Vec {
    _unused: [u8; 0],
}
pub type Vec = *mut _p_Vec;
impl ScatterMode {
    pub const SCATTER_LOCAL: ScatterMode = ScatterMode::SCATTER_FORWARD_LOCAL;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ScatterMode {
    SCATTER_FORWARD = 0,
    SCATTER_REVERSE = 1,
    SCATTER_FORWARD_LOCAL = 2,
    SCATTER_REVERSE_LOCAL = 3,
}
pub type VecType = *const ::std::os::raw::c_char;
extern "C" {
    pub fn VecScatterSetType(arg1: VecScatter, arg2: VecScatterType) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScatterGetType(arg1: VecScatter, arg2: *mut VecScatterType) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScatterSetFromOptions(arg1: VecScatter) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScatterRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: VecScatter) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScatterCreate(
        arg1: Vec,
        arg2: IS,
        arg3: Vec,
        arg4: IS,
        arg5: *mut VecScatter,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut VEC_CLASSID: PetscClassId;
}
extern "C" {
    pub static mut PETSCSF_CLASSID: PetscClassId;
}
extern "C" {
    pub fn VecInitializePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn VecFinalizePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn VecCreate(arg1: MPI_Comm, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCreateSeq(arg1: MPI_Comm, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCreateMPI(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCreateSeqWithArray(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *const PetscScalar,
        arg5: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCreateMPIWithArray(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: *const PetscScalar,
        arg6: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCreateShared(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCreateNode(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetFromOptions(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecViewFromOptions(
        arg1: Vec,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetUp(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecDestroy(arg1: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecZeroEntries(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetOptionsPrefix(arg1: Vec, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn VecAppendOptionsPrefix(arg1: Vec, arg2: *const ::std::os::raw::c_char)
        -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetOptionsPrefix(
        arg1: Vec,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetSizes(arg1: Vec, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn VecDotNorm2(
        arg1: Vec,
        arg2: Vec,
        arg3: *mut PetscScalar,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecDot(arg1: Vec, arg2: Vec, arg3: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecDotRealPart(arg1: Vec, arg2: Vec, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTDot(arg1: Vec, arg2: Vec, arg3: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecMDot(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *const Vec,
        arg4: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecMTDot(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *const Vec,
        arg4: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetSubVector(arg1: Vec, arg2: IS, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreSubVector(arg1: Vec, arg2: IS, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecConcatenate(
        arg1: PetscInt,
        arg2: *const Vec,
        arg3: *mut Vec,
        arg4: *mut *mut IS,
    ) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NormType {
    NORM_1 = 0,
    NORM_2 = 1,
    NORM_FROBENIUS = 2,
    NORM_INFINITY = 3,
    NORM_1_AND_2 = 4,
}
extern "C" {
    pub static mut NormTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ReductionType {
    REDUCTION_SUM_REALPART = 10,
    REDUCTION_MEAN_REALPART = 11,
    REDUCTION_SUM_IMAGINARYPART = 12,
    REDUCTION_MEAN_IMAGINARYPART = 13,
}
extern "C" {
    pub fn VecNorm(arg1: Vec, arg2: NormType, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn VecNormAvailable(
        arg1: Vec,
        arg2: NormType,
        arg3: *mut PetscBool,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecNormalize(arg1: Vec, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSum(arg1: Vec, arg2: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecMean(arg1: Vec, arg2: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecMax(arg1: Vec, arg2: *mut PetscInt, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn VecMin(arg1: Vec, arg2: *mut PetscInt, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScale(arg1: Vec, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCopy(arg1: Vec, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetRandom(arg1: Vec, arg2: PetscRandom) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSet(arg1: Vec, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetInf(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSwap(arg1: Vec, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecAXPY(arg1: Vec, arg2: PetscScalar, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecAXPBY(arg1: Vec, arg2: PetscScalar, arg3: PetscScalar, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecMAXPY(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *const PetscScalar,
        arg4: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecAYPX(arg1: Vec, arg2: PetscScalar, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecWAXPY(arg1: Vec, arg2: PetscScalar, arg3: Vec, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecAXPBYPCZ(
        arg1: Vec,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscScalar,
        arg5: Vec,
        arg6: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecPointwiseMax(arg1: Vec, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecPointwiseMaxAbs(arg1: Vec, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecPointwiseMin(arg1: Vec, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecPointwiseMult(arg1: Vec, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecPointwiseDivide(arg1: Vec, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecMaxPointwiseDivide(arg1: Vec, arg2: Vec, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn VecShift(arg1: Vec, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecReciprocal(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecPermute(arg1: Vec, arg2: IS, arg3: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSqrtAbs(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecLog(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecExp(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecAbs(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecDuplicate(arg1: Vec, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecDuplicateVecs(arg1: Vec, arg2: PetscInt, arg3: *mut *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecDestroyVecs(arg1: PetscInt, arg2: *mut *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStrideNormAll(arg1: Vec, arg2: NormType, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStrideMaxAll(arg1: Vec, arg2: *mut PetscInt, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStrideMinAll(arg1: Vec, arg2: *mut PetscInt, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStrideScaleAll(arg1: Vec, arg2: *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecUniqueEntries(
        arg1: Vec,
        arg2: *mut PetscInt,
        arg3: *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStrideNorm(
        arg1: Vec,
        arg2: PetscInt,
        arg3: NormType,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStrideMax(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStrideMin(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStrideScale(arg1: Vec, arg2: PetscInt, arg3: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStrideSet(arg1: Vec, arg2: PetscInt, arg3: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStrideGather(
        arg1: Vec,
        arg2: PetscInt,
        arg3: Vec,
        arg4: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStrideScatter(
        arg1: Vec,
        arg2: PetscInt,
        arg3: Vec,
        arg4: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStrideGatherAll(arg1: Vec, arg2: *mut Vec, arg3: InsertMode) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStrideScatterAll(arg1: *mut Vec, arg2: Vec, arg3: InsertMode) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStrideSubSetScatter(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscInt,
        arg5: Vec,
        arg6: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStrideSubSetGather(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscInt,
        arg5: Vec,
        arg6: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetValues(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscScalar,
        arg5: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetValues(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecAssemblyBegin(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecAssemblyEnd(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStashSetInitialSize(arg1: Vec, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStashView(arg1: Vec, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStashViewFromOptions(
        arg1: Vec,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStashGetInfo(
        arg1: Vec,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetBlockSize(arg1: Vec, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetBlockSize(arg1: Vec, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetValuesBlocked(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscScalar,
        arg5: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut VecList: PetscFunctionList;
}
extern "C" {
    pub fn VecSetType(arg1: Vec, arg2: VecType) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetType(arg1: Vec, arg2: *mut VecType) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: Vec) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScatterBegin(
        arg1: VecScatter,
        arg2: Vec,
        arg3: Vec,
        arg4: InsertMode,
        arg5: ScatterMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScatterEnd(
        arg1: VecScatter,
        arg2: Vec,
        arg3: Vec,
        arg4: InsertMode,
        arg5: ScatterMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScatterDestroy(arg1: *mut VecScatter) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScatterSetUp(arg1: VecScatter) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScatterCopy(arg1: VecScatter, arg2: *mut VecScatter) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScatterView(arg1: VecScatter, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScatterViewFromOptions(
        arg1: VecScatter,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScatterRemap(
        arg1: VecScatter,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScatterGetMerged(arg1: VecScatter, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArray4d(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: PetscInt,
        arg9: PetscInt,
        arg10: *mut *mut *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArray4d(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: PetscInt,
        arg9: PetscInt,
        arg10: *mut *mut *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArray3d(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: *mut *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArray3d(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: *mut *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArray2d(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArray2d(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArray1d(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArray1d(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArray4dWrite(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: PetscInt,
        arg9: PetscInt,
        arg10: *mut *mut *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArray4dWrite(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: PetscInt,
        arg9: PetscInt,
        arg10: *mut *mut *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArray3dWrite(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: *mut *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArray3dWrite(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: *mut *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArray2dWrite(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArray2dWrite(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArray1dWrite(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArray1dWrite(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArray4dRead(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: PetscInt,
        arg9: PetscInt,
        arg10: *mut *mut *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArray4dRead(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: PetscInt,
        arg9: PetscInt,
        arg10: *mut *mut *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArray3dRead(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: *mut *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArray3dRead(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: *mut *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArray2dRead(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArray2dRead(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArray1dRead(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArray1dRead(
        arg1: Vec,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecPlaceArray(arg1: Vec, arg2: *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecResetArray(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecReplaceArray(arg1: Vec, arg2: *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArrays(
        arg1: *const Vec,
        arg2: PetscInt,
        arg3: *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArrays(
        arg1: *const Vec,
        arg2: PetscInt,
        arg3: *mut *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecView(arg1: Vec, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn VecEqual(arg1: Vec, arg2: Vec, arg3: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn VecLoad(arg1: Vec, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetSize(arg1: Vec, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetLocalSize(arg1: Vec, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetOwnershipRange(
        arg1: Vec,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetOwnershipRanges(arg1: Vec, arg2: *mut *const PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetLocalToGlobalMapping(arg1: Vec, arg2: ISLocalToGlobalMapping) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetValuesLocal(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscScalar,
        arg5: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCUDAGetArray(arg1: Vec, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCUDARestoreArray(arg1: Vec, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCUDAGetArrayRead(arg1: Vec, arg2: *mut *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCUDARestoreArrayRead(arg1: Vec, arg2: *mut *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCUDAGetArrayWrite(arg1: Vec, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCUDARestoreArrayWrite(arg1: Vec, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCUDAPlaceArray(arg1: Vec, arg2: *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCUDAReplaceArray(arg1: Vec, arg2: *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCUDAResetArray(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecHIPGetArray(arg1: Vec, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecHIPRestoreArray(arg1: Vec, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecHIPGetArrayRead(arg1: Vec, arg2: *mut *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecHIPRestoreArrayRead(arg1: Vec, arg2: *mut *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecHIPGetArrayWrite(arg1: Vec, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecHIPRestoreArrayWrite(arg1: Vec, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecHIPPlaceArray(arg1: Vec, arg2: *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecHIPReplaceArray(arg1: Vec, arg2: *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecHIPResetArray(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecViennaCLGetCLContext(arg1: Vec, arg2: *mut usize) -> PetscErrorCode;
}
extern "C" {
    pub fn VecViennaCLGetCLQueue(arg1: Vec, arg2: *mut usize) -> PetscErrorCode;
}
extern "C" {
    pub fn VecViennaCLGetCLMemRead(arg1: Vec, arg2: *mut usize) -> PetscErrorCode;
}
extern "C" {
    pub fn VecViennaCLGetCLMemWrite(arg1: Vec, arg2: *mut usize) -> PetscErrorCode;
}
extern "C" {
    pub fn VecViennaCLRestoreCLMemWrite(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecViennaCLGetCLMem(arg1: Vec, arg2: *mut usize) -> PetscErrorCode;
}
extern "C" {
    pub fn VecViennaCLRestoreCLMem(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetValuesBlockedLocal(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscScalar,
        arg5: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetLocalToGlobalMapping(
        arg1: Vec,
        arg2: *mut ISLocalToGlobalMapping,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecDotBegin(arg1: Vec, arg2: Vec, arg3: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecDotEnd(arg1: Vec, arg2: Vec, arg3: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTDotBegin(arg1: Vec, arg2: Vec, arg3: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTDotEnd(arg1: Vec, arg2: Vec, arg3: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecNormBegin(arg1: Vec, arg2: NormType, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn VecNormEnd(arg1: Vec, arg2: NormType, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn VecMDotBegin(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *const Vec,
        arg4: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecMDotEnd(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *const Vec,
        arg4: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecMTDotBegin(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *const Vec,
        arg4: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecMTDotEnd(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *const Vec,
        arg4: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscCommSplitReductionBegin(arg1: MPI_Comm) -> PetscErrorCode;
}
extern "C" {
    pub fn VecBindToCPU(arg1: Vec, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn VecBoundToCPU(arg1: Vec, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetPinnedMemoryMin(arg1: Vec, arg2: size_t) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetPinnedMemoryMin(arg1: Vec, arg2: *mut size_t) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetOffloadMask(arg1: Vec, arg2: *mut PetscOffloadMask) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum VecOption {
    VEC_IGNORE_OFF_PROC_ENTRIES = 0,
    VEC_IGNORE_NEGATIVE_INDICES = 1,
    VEC_SUBSET_OFF_PROC_ENTRIES = 2,
}
extern "C" {
    pub fn VecSetOption(arg1: Vec, arg2: VecOption, arg3: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArray(arg1: Vec, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArrayWrite(arg1: Vec, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArrayRead(arg1: Vec, arg2: *mut *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArray(arg1: Vec, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArrayWrite(arg1: Vec, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArrayRead(arg1: Vec, arg2: *mut *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetLocalVector(arg1: Vec, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreLocalVector(arg1: Vec, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetLocalVectorRead(arg1: Vec, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreLocalVectorRead(arg1: Vec, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArrayAndMemType(
        arg1: Vec,
        arg2: *mut *mut PetscScalar,
        arg3: *mut PetscMemType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArrayAndMemType(arg1: Vec, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetArrayReadAndMemType(
        arg1: Vec,
        arg2: *mut *const PetscScalar,
        arg3: *mut PetscMemType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRestoreArrayReadAndMemType(
        arg1: Vec,
        arg2: *mut *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecLockReadPush(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecLockReadPop(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecLockGet(arg1: Vec, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn VecLockPush(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecLockPop(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecValidValues(arg1: Vec, arg2: PetscInt, arg3: PetscBool) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum VecOperation {
    VECOP_DUPLICATE = 0,
    VECOP_VIEW = 33,
    VECOP_LOAD = 41,
    VECOP_VIEWNATIVE = 68,
    VECOP_LOADNATIVE = 69,
}
extern "C" {
    pub fn VecSetOperation(
        arg1: Vec,
        arg2: VecOperation,
        arg3: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecMPISetGhost(arg1: Vec, arg2: PetscInt, arg3: *const PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCreateGhost(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
        arg6: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCreateGhostWithArray(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
        arg6: *const PetscScalar,
        arg7: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCreateGhostBlock(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *const PetscInt,
        arg7: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCreateGhostBlockWithArray(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *const PetscInt,
        arg7: *const PetscScalar,
        arg8: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGhostGetLocalForm(arg1: Vec, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGhostRestoreLocalForm(arg1: Vec, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGhostIsLocalForm(arg1: Vec, arg2: Vec, arg3: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGhostUpdateBegin(arg1: Vec, arg2: InsertMode, arg3: ScatterMode) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGhostUpdateEnd(arg1: Vec, arg2: InsertMode, arg3: ScatterMode) -> PetscErrorCode;
}
extern "C" {
    pub fn VecConjugate(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecImaginaryPart(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecRealPart(arg1: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScatterCreateToAll(
        arg1: Vec,
        arg2: *mut VecScatter,
        arg3: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecScatterCreateToZero(
        arg1: Vec,
        arg2: *mut VecScatter,
        arg3: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn ISComplementVec(arg1: IS, arg2: Vec, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn VecPow(arg1: Vec, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecMedian(arg1: Vec, arg2: Vec, arg3: Vec, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecWhichInactive(
        arg1: Vec,
        arg2: Vec,
        arg3: Vec,
        arg4: Vec,
        arg5: PetscBool,
        arg6: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecWhichBetween(arg1: Vec, arg2: Vec, arg3: Vec, arg4: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn VecWhichBetweenOrEqual(arg1: Vec, arg2: Vec, arg3: Vec, arg4: *mut IS)
        -> PetscErrorCode;
}
extern "C" {
    pub fn VecWhichGreaterThan(arg1: Vec, arg2: Vec, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn VecWhichLessThan(arg1: Vec, arg2: Vec, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn VecWhichEqual(arg1: Vec, arg2: Vec, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn VecISAXPY(arg1: Vec, arg2: IS, arg3: PetscScalar, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecISCopy(arg1: Vec, arg2: IS, arg3: ScatterMode, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecISSet(arg1: Vec, arg2: IS, arg3: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn VecBoundGradientProjection(
        arg1: Vec,
        arg2: Vec,
        arg3: Vec,
        arg4: Vec,
        arg5: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStepBoundInfo(
        arg1: Vec,
        arg2: Vec,
        arg3: Vec,
        arg4: Vec,
        arg5: *mut PetscReal,
        arg6: *mut PetscReal,
        arg7: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStepMax(arg1: Vec, arg2: Vec, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn VecStepMaxBounded(
        arg1: Vec,
        arg2: Vec,
        arg3: Vec,
        arg4: Vec,
        arg5: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerMathematicaGetVector(arg1: PetscViewer, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerMathematicaPutVector(arg1: PetscViewer, arg2: Vec) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_Vecs {
    pub n: PetscInt,
    pub v: Vec,
}
#[test]
fn bindgen_test_layout__n_Vecs() {
    assert_eq!(
        ::std::mem::size_of::<_n_Vecs>(),
        16usize,
        concat!("Size of: ", stringify!(_n_Vecs))
    );
    assert_eq!(
        ::std::mem::align_of::<_n_Vecs>(),
        8usize,
        concat!("Alignment of ", stringify!(_n_Vecs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_Vecs>())).n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_Vecs),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_Vecs>())).v as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_Vecs),
            "::",
            stringify!(v)
        )
    );
}
pub type Vecs = *mut _n_Vecs;
extern "C" {
    pub fn VecsDestroy(arg1: Vecs) -> PetscErrorCode;
}
extern "C" {
    pub fn VecsCreateSeq(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut Vecs,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecsCreateSeqWithArray(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut Vecs,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecsDuplicate(arg1: Vecs, arg2: *mut Vecs) -> PetscErrorCode;
}
extern "C" {
    pub fn VecNestGetSubVecs(arg1: Vec, arg2: *mut PetscInt, arg3: *mut *mut Vec)
        -> PetscErrorCode;
}
extern "C" {
    pub fn VecNestGetSubVec(arg1: Vec, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecNestSetSubVecs(
        arg1: Vec,
        arg2: PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecNestSetSubVec(arg1: Vec, arg2: PetscInt, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCreateNest(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: *mut IS,
        arg4: *mut Vec,
        arg5: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecNestGetSize(arg1: Vec, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscOptionsGetVec(
        arg1: PetscOptions,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: Vec,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecChop(arg1: Vec, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetLayout(arg1: Vec, arg2: *mut PetscLayout) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetLayout(arg1: Vec, arg2: PetscLayout) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSectionVecView(arg1: PetscSection, arg2: Vec, arg3: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn VecGetValuesSection(
        arg1: Vec,
        arg2: PetscSection,
        arg3: PetscInt,
        arg4: *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetValuesSection(
        arg1: Vec,
        arg2: PetscSection,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscSectionVecNorm(
        arg1: PetscSection,
        arg2: PetscSection,
        arg3: Vec,
        arg4: NormType,
        arg5: *mut PetscReal,
    ) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_VecTagger {
    _unused: [u8; 0],
}
pub type VecTagger = *mut _p_VecTagger;
pub type VecTaggerType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut VEC_TAGGER_CLASSID: PetscClassId;
}
extern "C" {
    pub static mut VecTaggerList: PetscFunctionList;
}
extern "C" {
    pub fn VecTaggerRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: VecTagger) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerCreate(arg1: MPI_Comm, arg2: *mut VecTagger) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerSetBlockSize(arg1: VecTagger, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerGetBlockSize(arg1: VecTagger, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerSetType(arg1: VecTagger, arg2: VecTaggerType) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerGetType(arg1: VecTagger, arg2: *mut VecTaggerType) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerSetInvert(arg1: VecTagger, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerGetInvert(arg1: VecTagger, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerSetFromOptions(arg1: VecTagger) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerSetUp(arg1: VecTagger) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerView(arg1: VecTagger, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerComputeIS(arg1: VecTagger, arg2: Vec, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerDestroy(arg1: *mut VecTagger) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VecTaggerBox {
    pub min: PetscScalar,
    pub max: PetscScalar,
}
#[test]
fn bindgen_test_layout_VecTaggerBox() {
    assert_eq!(
        ::std::mem::size_of::<VecTaggerBox>(),
        32usize,
        concat!("Size of: ", stringify!(VecTaggerBox))
    );
    assert_eq!(
        ::std::mem::align_of::<VecTaggerBox>(),
        8usize,
        concat!("Alignment of ", stringify!(VecTaggerBox))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VecTaggerBox>())).min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VecTaggerBox),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VecTaggerBox>())).max as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VecTaggerBox),
            "::",
            stringify!(max)
        )
    );
}
extern "C" {
    pub fn VecTaggerComputeBoxes(
        arg1: VecTagger,
        arg2: Vec,
        arg3: *mut PetscInt,
        arg4: *mut *mut VecTaggerBox,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerAbsoluteSetBox(arg1: VecTagger, arg2: *mut VecTaggerBox) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerAbsoluteGetBox(
        arg1: VecTagger,
        arg2: *mut *const VecTaggerBox,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerRelativeSetBox(arg1: VecTagger, arg2: *mut VecTaggerBox) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerRelativeGetBox(
        arg1: VecTagger,
        arg2: *mut *const VecTaggerBox,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerCDFSetBox(arg1: VecTagger, arg2: *mut VecTaggerBox) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerCDFGetBox(arg1: VecTagger, arg2: *mut *const VecTaggerBox) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum VecTaggerCDFMethod {
    VECTAGGER_CDF_GATHER = 0,
    VECTAGGER_CDF_ITERATIVE = 1,
    VECTAGGER_CDF_NUM_METHODS = 2,
}
extern "C" {
    pub static mut VecTaggerCDFMethods: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn VecTaggerCDFSetMethod(arg1: VecTagger, arg2: VecTaggerCDFMethod) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerCDFGetMethod(arg1: VecTagger, arg2: *mut VecTaggerCDFMethod) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerCDFIterativeSetTolerances(
        arg1: VecTagger,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerCDFIterativeGetTolerances(
        arg1: VecTagger,
        arg2: *mut PetscInt,
        arg3: *mut PetscReal,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerOrSetSubs(
        arg1: VecTagger,
        arg2: PetscInt,
        arg3: *mut VecTagger,
        arg4: PetscCopyMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerOrGetSubs(
        arg1: VecTagger,
        arg2: *mut PetscInt,
        arg3: *mut *mut VecTagger,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerAndSetSubs(
        arg1: VecTagger,
        arg2: PetscInt,
        arg3: *mut VecTagger,
        arg4: PetscCopyMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerAndGetSubs(
        arg1: VecTagger,
        arg2: *mut PetscInt,
        arg3: *mut *mut VecTagger,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerInitializePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn VecTaggerFinalizePackage() -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_Mat {
    _unused: [u8; 0],
}
pub type Mat = *mut _p_Mat;
pub type MatType = *const ::std::os::raw::c_char;
pub type MatSolverType = *const ::std::os::raw::c_char;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatFactorType {
    MAT_FACTOR_NONE = 0,
    MAT_FACTOR_LU = 1,
    MAT_FACTOR_CHOLESKY = 2,
    MAT_FACTOR_ILU = 3,
    MAT_FACTOR_ICC = 4,
    MAT_FACTOR_ILUDT = 5,
    MAT_FACTOR_QR = 6,
    MAT_FACTOR_NUM_TYPES = 7,
}
extern "C" {
    pub static mut MatFactorTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn MatGetFactor(
        arg1: Mat,
        arg2: MatSolverType,
        arg3: MatFactorType,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetFactorAvailable(
        arg1: Mat,
        arg2: MatSolverType,
        arg3: MatFactorType,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFactorGetCanUseOrdering(arg1: Mat, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFactorGetSolverType(arg1: Mat, arg2: *mut MatSolverType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetFactorType(arg1: Mat, arg2: *mut MatFactorType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetFactorType(arg1: Mat, arg2: MatFactorType) -> PetscErrorCode;
}
pub type MatSolverFunction = ::std::option::Option<
    unsafe extern "C" fn(arg1: Mat, arg2: MatFactorType, arg3: *mut Mat) -> PetscErrorCode,
>;
extern "C" {
    pub fn MatSolverTypeRegister(
        arg1: MatSolverType,
        arg2: MatType,
        arg3: MatFactorType,
        arg4: MatSolverFunction,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSolverTypeGet(
        arg1: MatSolverType,
        arg2: MatType,
        arg3: MatFactorType,
        arg4: *mut PetscBool,
        arg5: *mut PetscBool,
        arg6: *mut MatSolverFunction,
    ) -> PetscErrorCode;
}
pub type MatSolverPackage = MatSolverType;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatProductType {
    MATPRODUCT_UNSPECIFIED = 0,
    MATPRODUCT_AB = 1,
    MATPRODUCT_AtB = 2,
    MATPRODUCT_ABt = 3,
    MATPRODUCT_PtAP = 4,
    MATPRODUCT_RARt = 5,
    MATPRODUCT_ABC = 6,
}
extern "C" {
    pub static mut MatProductTypes: [*const ::std::os::raw::c_char; 0usize];
}
pub type MatProductAlgorithm = *const ::std::os::raw::c_char;
extern "C" {
    pub fn MatProductCreate(arg1: Mat, arg2: Mat, arg3: Mat, arg4: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatProductCreateWithMat(arg1: Mat, arg2: Mat, arg3: Mat, arg4: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatProductSetType(arg1: Mat, arg2: MatProductType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatProductSetAlgorithm(arg1: Mat, arg2: MatProductAlgorithm) -> PetscErrorCode;
}
extern "C" {
    pub fn MatProductSetFill(arg1: Mat, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn MatProductSetFromOptions(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatProductSymbolic(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatProductNumeric(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatProductReplaceMats(arg1: Mat, arg2: Mat, arg3: Mat, arg4: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatProductClear(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatProductView(arg1: Mat, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub static mut MAT_CLASSID: PetscClassId;
}
extern "C" {
    pub static mut MAT_COLORING_CLASSID: PetscClassId;
}
extern "C" {
    pub static mut MAT_FDCOLORING_CLASSID: PetscClassId;
}
extern "C" {
    pub static mut MAT_TRANSPOSECOLORING_CLASSID: PetscClassId;
}
extern "C" {
    pub static mut MAT_PARTITIONING_CLASSID: PetscClassId;
}
extern "C" {
    pub static mut MAT_COARSEN_CLASSID: PetscClassId;
}
extern "C" {
    pub static mut MAT_NULLSPACE_CLASSID: PetscClassId;
}
extern "C" {
    pub static mut MATMFFD_CLASSID: PetscClassId;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatReuse {
    MAT_INITIAL_MATRIX = 0,
    MAT_REUSE_MATRIX = 1,
    MAT_IGNORE_MATRIX = 2,
    MAT_INPLACE_MATRIX = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatCreateSubMatrixOption {
    MAT_DO_NOT_GET_VALUES = 0,
    MAT_GET_VALUES = 1,
}
extern "C" {
    pub fn MatInitializePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreate(arg1: MPI_Comm, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetSizes(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetType(arg1: Mat, arg2: MatType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetVecType(arg1: Mat, arg2: *mut VecType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetVecType(arg1: Mat, arg2: VecType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetFromOptions(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatViewFromOptions(
        arg1: Mat,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: Mat) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatRegisterRootName(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetOptionsPrefix(arg1: Mat, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn MatAppendOptionsPrefix(arg1: Mat, arg2: *const ::std::os::raw::c_char)
        -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetOptionsPrefix(
        arg1: Mat,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetErrorIfFailure(arg1: Mat, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub static mut MatList: PetscFunctionList;
}
extern "C" {
    pub static mut MatColoringList: PetscFunctionList;
}
extern "C" {
    pub static mut MatPartitioningList: PetscFunctionList;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatStructure {
    DIFFERENT_NONZERO_PATTERN = 0,
    SUBSET_NONZERO_PATTERN = 1,
    SAME_NONZERO_PATTERN = 2,
    UNKNOWN_NONZERO_PATTERN = 3,
}
extern "C" {
    pub static mut MatStructures: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn MatCreateSeqSELL(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
        arg6: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSELL(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: *const PetscInt,
        arg8: PetscInt,
        arg9: *const PetscInt,
        arg10: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqSELLSetPreallocation(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPISELLSetPreallocation(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSeqDense(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateDense(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut PetscScalar,
        arg7: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSeqAIJ(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
        arg6: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateAIJ(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: *const PetscInt,
        arg8: PetscInt,
        arg9: *const PetscInt,
        arg10: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateMPIAIJWithArrays(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *const PetscInt,
        arg7: *const PetscInt,
        arg8: *const PetscScalar,
        arg9: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatUpdateMPIAIJWithArrays(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *const PetscInt,
        arg7: *const PetscInt,
        arg8: *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateMPIAIJWithSplitArrays(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut PetscInt,
        arg7: *mut PetscInt,
        arg8: *mut PetscScalar,
        arg9: *mut PetscInt,
        arg10: *mut PetscInt,
        arg11: *mut PetscScalar,
        arg12: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateMPIAIJWithSeqAIJ(
        arg1: MPI_Comm,
        arg2: Mat,
        arg3: Mat,
        arg4: *const PetscInt,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSeqBAIJ(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *const PetscInt,
        arg7: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateBAIJ(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: *const PetscInt,
        arg9: PetscInt,
        arg10: *const PetscInt,
        arg11: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateMPIBAIJWithArrays(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: *const PetscInt,
        arg8: *const PetscInt,
        arg9: *const PetscScalar,
        arg10: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetPreallocationCOO(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetValuesCOO(arg1: Mat, arg2: *const PetscScalar, arg3: InsertMode)
        -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateMPIAdj(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut PetscInt,
        arg7: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSeqSBAIJ(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *const PetscInt,
        arg7: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSBAIJ(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: *const PetscInt,
        arg9: PetscInt,
        arg10: *const PetscInt,
        arg11: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateMPISBAIJWithArrays(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: *const PetscInt,
        arg8: *const PetscInt,
        arg9: *const PetscScalar,
        arg10: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqSBAIJSetPreallocationCSR(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscInt,
        arg5: *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPISBAIJSetPreallocationCSR(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscInt,
        arg5: *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatXAIJSetPreallocation(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscInt,
        arg5: *const PetscInt,
        arg6: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateShell(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut ::std::os::raw::c_void,
        arg7: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateCentering(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateNormal(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateNormalHermitian(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateLRC(
        arg1: Mat,
        arg2: Mat,
        arg3: Vec,
        arg4: Mat,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLRCGetMats(
        arg1: Mat,
        arg2: *mut Mat,
        arg3: *mut Mat,
        arg4: *mut Vec,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateIS(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: ISLocalToGlobalMapping,
        arg8: ISLocalToGlobalMapping,
        arg9: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSeqAIJCRL(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
        arg6: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateMPIAIJCRL(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
        arg6: PetscInt,
        arg7: *const PetscInt,
        arg8: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateScatter(arg1: MPI_Comm, arg2: VecScatter, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatScatterSetVecScatter(arg1: Mat, arg2: VecScatter) -> PetscErrorCode;
}
extern "C" {
    pub fn MatScatterGetVecScatter(arg1: Mat, arg2: *mut VecScatter) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateBlockMat(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut PetscInt,
        arg7: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCompositeAddMat(arg1: Mat, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCompositeMerge(arg1: Mat) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatCompositeMergeType {
    MAT_COMPOSITE_MERGE_RIGHT = 0,
    MAT_COMPOSITE_MERGE_LEFT = 1,
}
extern "C" {
    pub fn MatCompositeSetMergeType(arg1: Mat, arg2: MatCompositeMergeType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateComposite(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: *const Mat,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatCompositeType {
    MAT_COMPOSITE_ADDITIVE = 0,
    MAT_COMPOSITE_MULTIPLICATIVE = 1,
}
extern "C" {
    pub fn MatCompositeSetType(arg1: Mat, arg2: MatCompositeType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCompositeGetType(arg1: Mat, arg2: *mut MatCompositeType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCompositeSetMatStructure(arg1: Mat, arg2: MatStructure) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCompositeGetMatStructure(arg1: Mat, arg2: *mut MatStructure) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCompositeGetNumberMat(arg1: Mat, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCompositeGetMat(arg1: Mat, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCompositeSetScalings(arg1: Mat, arg2: *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateFFT(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: MatType,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSeqCUFFT(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateTranspose(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatTransposeGetMat(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateHermitianTranspose(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatHermitianTransposeGetMat(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNormalGetMat(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNormalHermitianGetMat(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSubMatrixVirtual(
        arg1: Mat,
        arg2: IS,
        arg3: IS,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSubMatrixVirtualUpdate(arg1: Mat, arg2: Mat, arg3: IS, arg4: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateLocalRef(arg1: Mat, arg2: IS, arg3: IS, arg4: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateConstantDiagonal(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscScalar,
        arg7: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPythonSetType(arg1: Mat, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn MatResetPreallocation(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetUp(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDestroy(arg1: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetNonzeroState(arg1: Mat, arg2: *mut PetscObjectState) -> PetscErrorCode;
}
extern "C" {
    pub fn MatConjugate(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatRealPart(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatImaginaryPart(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetDiagonalBlock(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetTrace(arg1: Mat, arg2: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatInvertBlockDiagonal(arg1: Mat, arg2: *mut *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatInvertVariableBlockDiagonal(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatInvertBlockDiagonalMat(arg1: Mat, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetValues(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
        arg6: *const PetscScalar,
        arg7: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetValuesBlocked(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
        arg6: *const PetscScalar,
        arg7: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetValuesRow(arg1: Mat, arg2: PetscInt, arg3: *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetValuesRowLocal(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetValuesBatch(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscInt,
        arg5: *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetRandom(arg1: Mat, arg2: PetscRandom) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MatStencil {
    pub k: PetscInt,
    pub j: PetscInt,
    pub i: PetscInt,
    pub c: PetscInt,
}
#[test]
fn bindgen_test_layout_MatStencil() {
    assert_eq!(
        ::std::mem::size_of::<MatStencil>(),
        16usize,
        concat!("Size of: ", stringify!(MatStencil))
    );
    assert_eq!(
        ::std::mem::align_of::<MatStencil>(),
        4usize,
        concat!("Alignment of ", stringify!(MatStencil))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatStencil>())).k as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MatStencil),
            "::",
            stringify!(k)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatStencil>())).j as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MatStencil),
            "::",
            stringify!(j)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatStencil>())).i as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MatStencil),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatStencil>())).c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MatStencil),
            "::",
            stringify!(c)
        )
    );
}
extern "C" {
    pub fn MatSetValuesStencil(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const MatStencil,
        arg4: PetscInt,
        arg5: *const MatStencil,
        arg6: *const PetscScalar,
        arg7: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetValuesBlockedStencil(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const MatStencil,
        arg4: PetscInt,
        arg5: *const MatStencil,
        arg6: *const PetscScalar,
        arg7: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetStencil(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscInt,
        arg5: PetscInt,
    ) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatAssemblyType {
    MAT_FLUSH_ASSEMBLY = 1,
    MAT_FINAL_ASSEMBLY = 0,
}
extern "C" {
    pub fn MatAssemblyBegin(arg1: Mat, arg2: MatAssemblyType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatAssemblyEnd(arg1: Mat, arg2: MatAssemblyType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatAssembled(arg1: Mat, arg2: *mut PetscBool) -> PetscErrorCode;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatOption {
    MAT_OPTION_MIN = -3,
    MAT_UNUSED_NONZERO_LOCATION_ERR = -2,
    MAT_ROW_ORIENTED = -1,
    MAT_SYMMETRIC = 1,
    MAT_STRUCTURALLY_SYMMETRIC = 2,
    MAT_FORCE_DIAGONAL_ENTRIES = 3,
    MAT_IGNORE_OFF_PROC_ENTRIES = 4,
    MAT_USE_HASH_TABLE = 5,
    MAT_KEEP_NONZERO_PATTERN = 6,
    MAT_IGNORE_ZERO_ENTRIES = 7,
    MAT_USE_INODES = 8,
    MAT_HERMITIAN = 9,
    MAT_SYMMETRY_ETERNAL = 10,
    MAT_NEW_NONZERO_LOCATION_ERR = 11,
    MAT_IGNORE_LOWER_TRIANGULAR = 12,
    MAT_ERROR_LOWER_TRIANGULAR = 13,
    MAT_GETROW_UPPERTRIANGULAR = 14,
    MAT_SPD = 15,
    MAT_NO_OFF_PROC_ZERO_ROWS = 16,
    MAT_NO_OFF_PROC_ENTRIES = 17,
    MAT_NEW_NONZERO_LOCATIONS = 18,
    MAT_NEW_NONZERO_ALLOCATION_ERR = 19,
    MAT_SUBSET_OFF_PROC_ENTRIES = 20,
    MAT_SUBMAT_SINGLEIS = 21,
    MAT_STRUCTURE_ONLY = 22,
    MAT_SORTED_FULL = 23,
    MAT_FORM_EXPLICIT_TRANSPOSE = 24,
    MAT_OPTION_MAX = 25,
}
extern "C" {
    pub static mut MatOptions: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn MatSetOption(arg1: Mat, arg2: MatOption, arg3: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetOption(arg1: Mat, arg2: MatOption, arg3: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPropagateSymmetryOptions(arg1: Mat, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetType(arg1: Mat, arg2: *mut MatType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetValues(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
        arg6: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetRow(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut *const PetscInt,
        arg5: *mut *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatRestoreRow(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut *const PetscInt,
        arg5: *mut *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetRowUpperTriangular(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatRestoreRowUpperTriangular(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetColumnVector(arg1: Mat, arg2: Vec, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqAIJGetArray(arg1: Mat, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqAIJGetArrayRead(arg1: Mat, arg2: *mut *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqAIJRestoreArray(arg1: Mat, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqAIJRestoreArrayRead(arg1: Mat, arg2: *mut *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqAIJGetMaxRowNonzeros(arg1: Mat, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqAIJSetValuesLocalFast(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
        arg6: *const PetscScalar,
        arg7: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqAIJSetType(arg1: Mat, arg2: MatType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqAIJKron(arg1: Mat, arg2: Mat, arg3: MatReuse, arg4: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqAIJRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: Mat,
                arg2: MatType,
                arg3: MatReuse,
                arg4: *mut Mat,
            ) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut MatSeqAIJList: PetscFunctionList;
}
extern "C" {
    pub fn MatSeqBAIJGetArray(arg1: Mat, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqBAIJRestoreArray(arg1: Mat, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqSBAIJGetArray(arg1: Mat, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqSBAIJRestoreArray(arg1: Mat, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseGetArray(arg1: Mat, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseRestoreArray(arg1: Mat, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDensePlaceArray(arg1: Mat, arg2: *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseReplaceArray(arg1: Mat, arg2: *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseResetArray(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseGetArrayRead(arg1: Mat, arg2: *mut *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseRestoreArrayRead(arg1: Mat, arg2: *mut *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseGetArrayWrite(arg1: Mat, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseRestoreArrayWrite(arg1: Mat, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetBlockSize(arg1: Mat, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetBlockSize(arg1: Mat, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetBlockSizes(arg1: Mat, arg2: *mut PetscInt, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetBlockSizes(arg1: Mat, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetBlockSizesFromMats(arg1: Mat, arg2: Mat, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetVariableBlockSizes(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetVariableBlockSizes(
        arg1: Mat,
        arg2: *mut PetscInt,
        arg3: *mut *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseGetColumn(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseRestoreColumn(arg1: Mat, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseGetColumnVec(arg1: Mat, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseRestoreColumnVec(arg1: Mat, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseGetColumnVecRead(arg1: Mat, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseRestoreColumnVecRead(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseGetColumnVecWrite(arg1: Mat, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseRestoreColumnVecWrite(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseGetSubMatrix(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseRestoreSubMatrix(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMult(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMultDiagonalBlock(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMultAdd(arg1: Mat, arg2: Vec, arg3: Vec, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMultTranspose(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMultHermitianTranspose(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatIsTranspose(
        arg1: Mat,
        arg2: Mat,
        arg3: PetscReal,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatIsHermitianTranspose(
        arg1: Mat,
        arg2: Mat,
        arg3: PetscReal,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMultTransposeAdd(arg1: Mat, arg2: Vec, arg3: Vec, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMultHermitianTransposeAdd(
        arg1: Mat,
        arg2: Vec,
        arg3: Vec,
        arg4: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMultConstrained(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMultTransposeConstrained(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMatSolve(arg1: Mat, arg2: Mat, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMatSolveTranspose(arg1: Mat, arg2: Mat, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMatTransposeSolve(arg1: Mat, arg2: Mat, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatResidual(arg1: Mat, arg2: Vec, arg3: Vec, arg4: Vec) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatDuplicateOption {
    MAT_DO_NOT_COPY_VALUES = 0,
    MAT_COPY_VALUES = 1,
    MAT_SHARE_NONZERO_PATTERN = 2,
}
extern "C" {
    pub fn MatConvert(arg1: Mat, arg2: MatType, arg3: MatReuse, arg4: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDuplicate(arg1: Mat, arg2: MatDuplicateOption, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCopy(arg1: Mat, arg2: Mat, arg3: MatStructure) -> PetscErrorCode;
}
extern "C" {
    pub fn MatView(arg1: Mat, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn MatIsSymmetric(arg1: Mat, arg2: PetscReal, arg3: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatIsStructurallySymmetric(arg1: Mat, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatIsHermitian(arg1: Mat, arg2: PetscReal, arg3: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatIsSymmetricKnown(
        arg1: Mat,
        arg2: *mut PetscBool,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatIsHermitianKnown(
        arg1: Mat,
        arg2: *mut PetscBool,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMissingDiagonal(
        arg1: Mat,
        arg2: *mut PetscBool,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLoad(arg1: Mat, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetRowIJ(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscBool,
        arg4: PetscBool,
        arg5: *mut PetscInt,
        arg6: *mut *const PetscInt,
        arg7: *mut *const PetscInt,
        arg8: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatRestoreRowIJ(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscBool,
        arg4: PetscBool,
        arg5: *mut PetscInt,
        arg6: *mut *const PetscInt,
        arg7: *mut *const PetscInt,
        arg8: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetColumnIJ(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscBool,
        arg4: PetscBool,
        arg5: *mut PetscInt,
        arg6: *mut *const PetscInt,
        arg7: *mut *const PetscInt,
        arg8: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatRestoreColumnIJ(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscBool,
        arg4: PetscBool,
        arg5: *mut PetscInt,
        arg6: *mut *const PetscInt,
        arg7: *mut *const PetscInt,
        arg8: *mut PetscBool,
    ) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MatInfo {
    pub block_size: PetscLogDouble,
    pub nz_allocated: PetscLogDouble,
    pub nz_used: PetscLogDouble,
    pub nz_unneeded: PetscLogDouble,
    pub memory: PetscLogDouble,
    pub assemblies: PetscLogDouble,
    pub mallocs: PetscLogDouble,
    pub fill_ratio_given: PetscLogDouble,
    pub fill_ratio_needed: PetscLogDouble,
    pub factor_mallocs: PetscLogDouble,
}
#[test]
fn bindgen_test_layout_MatInfo() {
    assert_eq!(
        ::std::mem::size_of::<MatInfo>(),
        80usize,
        concat!("Size of: ", stringify!(MatInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<MatInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(MatInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatInfo>())).block_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MatInfo),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatInfo>())).nz_allocated as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MatInfo),
            "::",
            stringify!(nz_allocated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatInfo>())).nz_used as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MatInfo),
            "::",
            stringify!(nz_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatInfo>())).nz_unneeded as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MatInfo),
            "::",
            stringify!(nz_unneeded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatInfo>())).memory as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MatInfo),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatInfo>())).assemblies as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MatInfo),
            "::",
            stringify!(assemblies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatInfo>())).mallocs as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MatInfo),
            "::",
            stringify!(mallocs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatInfo>())).fill_ratio_given as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(MatInfo),
            "::",
            stringify!(fill_ratio_given)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatInfo>())).fill_ratio_needed as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(MatInfo),
            "::",
            stringify!(fill_ratio_needed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatInfo>())).factor_mallocs as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(MatInfo),
            "::",
            stringify!(factor_mallocs)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatInfoType {
    MAT_LOCAL = 1,
    MAT_GLOBAL_MAX = 2,
    MAT_GLOBAL_SUM = 3,
}
extern "C" {
    pub fn MatGetInfo(arg1: Mat, arg2: MatInfoType, arg3: *mut MatInfo) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetDiagonal(arg1: Mat, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetRowMax(arg1: Mat, arg2: Vec, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetRowMin(arg1: Mat, arg2: Vec, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetRowMaxAbs(arg1: Mat, arg2: Vec, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetRowMinAbs(arg1: Mat, arg2: Vec, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetRowSum(arg1: Mat, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatTranspose(arg1: Mat, arg2: MatReuse, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatHermitianTranspose(arg1: Mat, arg2: MatReuse, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPermute(arg1: Mat, arg2: IS, arg3: IS, arg4: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDiagonalScale(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDiagonalSet(arg1: Mat, arg2: Vec, arg3: InsertMode) -> PetscErrorCode;
}
extern "C" {
    pub fn MatEqual(arg1: Mat, arg2: Mat, arg3: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMultEqual(
        arg1: Mat,
        arg2: Mat,
        arg3: PetscInt,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMultAddEqual(
        arg1: Mat,
        arg2: Mat,
        arg3: PetscInt,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMultTransposeEqual(
        arg1: Mat,
        arg2: Mat,
        arg3: PetscInt,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMultTransposeAddEqual(
        arg1: Mat,
        arg2: Mat,
        arg3: PetscInt,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMatMultEqual(
        arg1: Mat,
        arg2: Mat,
        arg3: Mat,
        arg4: PetscInt,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatTransposeMatMultEqual(
        arg1: Mat,
        arg2: Mat,
        arg3: Mat,
        arg4: PetscInt,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMatTransposeMultEqual(
        arg1: Mat,
        arg2: Mat,
        arg3: Mat,
        arg4: PetscInt,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPtAPMultEqual(
        arg1: Mat,
        arg2: Mat,
        arg3: Mat,
        arg4: PetscInt,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatRARtMultEqual(
        arg1: Mat,
        arg2: Mat,
        arg3: Mat,
        arg4: PetscInt,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatIsLinear(arg1: Mat, arg2: PetscInt, arg3: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNorm(arg1: Mat, arg2: NormType, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetColumnNorms(arg1: Mat, arg2: NormType, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetColumnSums(arg1: Mat, arg2: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetColumnSumsRealPart(arg1: Mat, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetColumnSumsImaginaryPart(arg1: Mat, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetColumnMeans(arg1: Mat, arg2: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetColumnMeansRealPart(arg1: Mat, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetColumnMeansImaginaryPart(arg1: Mat, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetColumnReductions(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatZeroEntries(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetInf(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatZeroRows(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscScalar,
        arg5: Vec,
        arg6: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatZeroRowsIS(
        arg1: Mat,
        arg2: IS,
        arg3: PetscScalar,
        arg4: Vec,
        arg5: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatZeroRowsStencil(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const MatStencil,
        arg4: PetscScalar,
        arg5: Vec,
        arg6: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatZeroRowsColumnsStencil(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const MatStencil,
        arg4: PetscScalar,
        arg5: Vec,
        arg6: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatZeroRowsColumns(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscScalar,
        arg5: Vec,
        arg6: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatZeroRowsColumnsIS(
        arg1: Mat,
        arg2: IS,
        arg3: PetscScalar,
        arg4: Vec,
        arg5: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetSize(arg1: Mat, arg2: *mut PetscInt, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetLocalSize(arg1: Mat, arg2: *mut PetscInt, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetOwnershipRange(
        arg1: Mat,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetOwnershipRanges(arg1: Mat, arg2: *mut *const PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetOwnershipRangeColumn(
        arg1: Mat,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetOwnershipRangesColumn(arg1: Mat, arg2: *mut *const PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetOwnershipIS(arg1: Mat, arg2: *mut IS, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSubMatrices(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const IS,
        arg4: *const IS,
        arg5: MatReuse,
        arg6: *mut *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSubMatricesMPI(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const IS,
        arg4: *const IS,
        arg5: MatReuse,
        arg6: *mut *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDestroyMatrices(arg1: PetscInt, arg2: *mut *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDestroySubMatrices(arg1: PetscInt, arg2: *mut *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSubMatrix(
        arg1: Mat,
        arg2: IS,
        arg3: IS,
        arg4: MatReuse,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetLocalSubMatrix(arg1: Mat, arg2: IS, arg3: IS, arg4: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatRestoreLocalSubMatrix(
        arg1: Mat,
        arg2: IS,
        arg3: IS,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetSeqNonzeroStructure(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDestroySeqNonzeroStructure(arg1: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateMPIAIJSumSeqAIJ(
        arg1: MPI_Comm,
        arg2: Mat,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: MatReuse,
        arg6: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateMPIAIJSumSeqAIJSymbolic(
        arg1: MPI_Comm,
        arg2: Mat,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateMPIAIJSumSeqAIJNumeric(arg1: Mat, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPIAIJGetLocalMat(arg1: Mat, arg2: MatReuse, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPIAIJGetLocalMatCondensed(
        arg1: Mat,
        arg2: MatReuse,
        arg3: *mut IS,
        arg4: *mut IS,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPIAIJGetLocalMatMerge(
        arg1: Mat,
        arg2: MatReuse,
        arg3: *mut IS,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetBrowsOfAcols(
        arg1: Mat,
        arg2: Mat,
        arg3: MatReuse,
        arg4: *mut IS,
        arg5: *mut IS,
        arg6: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetGhosts(
        arg1: Mat,
        arg2: *mut PetscInt,
        arg3: *mut *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatIncreaseOverlap(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *mut IS,
        arg4: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatIncreaseOverlapSplit(
        mat: Mat,
        n: PetscInt,
        is: *mut IS,
        ov: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPIAIJSetUseScalableIncreaseOverlap(arg1: Mat, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMatMult(
        arg1: Mat,
        arg2: Mat,
        arg3: MatReuse,
        arg4: PetscReal,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMatMatMult(
        arg1: Mat,
        arg2: Mat,
        arg3: Mat,
        arg4: MatReuse,
        arg5: PetscReal,
        arg6: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGalerkin(
        arg1: Mat,
        arg2: Mat,
        arg3: Mat,
        arg4: MatReuse,
        arg5: PetscReal,
        arg6: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPtAP(
        arg1: Mat,
        arg2: Mat,
        arg3: MatReuse,
        arg4: PetscReal,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatRARt(
        arg1: Mat,
        arg2: Mat,
        arg3: MatReuse,
        arg4: PetscReal,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatTransposeMatMult(
        arg1: Mat,
        arg2: Mat,
        arg3: MatReuse,
        arg4: PetscReal,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMatTransposeMult(
        arg1: Mat,
        arg2: Mat,
        arg3: MatReuse,
        arg4: PetscReal,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatAXPY(arg1: Mat, arg2: PetscScalar, arg3: Mat, arg4: MatStructure) -> PetscErrorCode;
}
extern "C" {
    pub fn MatAYPX(arg1: Mat, arg2: PetscScalar, arg3: Mat, arg4: MatStructure) -> PetscErrorCode;
}
extern "C" {
    pub fn MatScale(arg1: Mat, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatShift(arg1: Mat, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetLocalToGlobalMapping(
        arg1: Mat,
        arg2: ISLocalToGlobalMapping,
        arg3: ISLocalToGlobalMapping,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetLocalToGlobalMapping(
        arg1: Mat,
        arg2: *mut ISLocalToGlobalMapping,
        arg3: *mut ISLocalToGlobalMapping,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetLayouts(
        arg1: Mat,
        arg2: *mut PetscLayout,
        arg3: *mut PetscLayout,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetLayouts(arg1: Mat, arg2: PetscLayout, arg3: PetscLayout) -> PetscErrorCode;
}
extern "C" {
    pub fn MatZeroRowsLocal(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscScalar,
        arg5: Vec,
        arg6: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatZeroRowsLocalIS(
        arg1: Mat,
        arg2: IS,
        arg3: PetscScalar,
        arg4: Vec,
        arg5: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatZeroRowsColumnsLocal(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscScalar,
        arg5: Vec,
        arg6: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatZeroRowsColumnsLocalIS(
        arg1: Mat,
        arg2: IS,
        arg3: PetscScalar,
        arg4: Vec,
        arg5: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetValuesLocal(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
        arg6: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetValuesLocal(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
        arg6: *const PetscScalar,
        arg7: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetValuesBlockedLocal(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
        arg6: *const PetscScalar,
        arg7: InsertMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatStashSetInitialSize(arg1: Mat, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatStashGetInfo(
        arg1: Mat,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatInterpolate(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatInterpolateAdd(arg1: Mat, arg2: Vec, arg3: Vec, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatRestrict(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMatInterpolate(arg1: Mat, arg2: Mat, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMatInterpolateAdd(arg1: Mat, arg2: Mat, arg3: Mat, arg4: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMatRestrict(arg1: Mat, arg2: Mat, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateVecs(arg1: Mat, arg2: *mut Vec, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateRedundantMatrix(
        arg1: Mat,
        arg2: PetscInt,
        arg3: MPI_Comm,
        arg4: MatReuse,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetMultiProcBlock(
        arg1: Mat,
        arg2: MPI_Comm,
        arg3: MatReuse,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFindZeroDiagonals(arg1: Mat, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFindOffBlockDiagonalEntries(arg1: Mat, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateMPIMatConcatenateSeqMat(
        arg1: MPI_Comm,
        arg2: Mat,
        arg3: PetscInt,
        arg4: MatReuse,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatShellGetContext(arg1: Mat, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn MatInodeAdjustForInodes(arg1: Mat, arg2: *mut IS, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn MatInodeGetInodeSizes(
        arg1: Mat,
        arg2: *mut PetscInt,
        arg3: *mut *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqAIJSetColumnIndices(arg1: Mat, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqBAIJSetColumnIndices(arg1: Mat, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSeqAIJWithArrays(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut PetscScalar,
        arg7: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSeqBAIJWithArrays(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut PetscInt,
        arg7: *mut PetscScalar,
        arg8: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSeqSBAIJWithArrays(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut PetscInt,
        arg7: *mut PetscScalar,
        arg8: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSeqAIJFromTriple(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut PetscScalar,
        arg7: *mut Mat,
        arg8: PetscInt,
        arg9: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqBAIJSetPreallocation(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqSBAIJSetPreallocation(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqAIJSetPreallocation(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqAIJSetTotalPreallocation(arg1: Mat, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPIBAIJSetPreallocation(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *const PetscInt,
        arg5: PetscInt,
        arg6: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPISBAIJSetPreallocation(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *const PetscInt,
        arg5: PetscInt,
        arg6: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPIAIJSetPreallocation(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqAIJSetPreallocationCSR(
        arg1: Mat,
        arg2: *const PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqBAIJSetPreallocationCSR(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscInt,
        arg5: *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPIAIJSetPreallocationCSR(
        arg1: Mat,
        arg2: *const PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPIBAIJSetPreallocationCSR(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscInt,
        arg5: *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPIAdjSetPreallocation(
        arg1: Mat,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPIAdjToSeq(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPIDenseSetPreallocation(arg1: Mat, arg2: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqDenseSetPreallocation(arg1: Mat, arg2: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPIAIJGetSeqAIJ(
        arg1: Mat,
        arg2: *mut Mat,
        arg3: *mut Mat,
        arg4: *mut *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPIBAIJGetSeqBAIJ(
        arg1: Mat,
        arg2: *mut Mat,
        arg3: *mut Mat,
        arg4: *mut *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPIAdjCreateNonemptySubcommMat(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseGetLDA(arg1: Mat, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseSetLDA(arg1: Mat, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDenseGetLocalMatrix(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatBlockMatSetPreallocation(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatStoreValues(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatRetrieveValues(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFindNonzeroRows(arg1: Mat, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFindZeroRows(arg1: Mat, arg2: *mut IS) -> PetscErrorCode;
}
pub type MatOrderingType = *const ::std::os::raw::c_char;
extern "C" {
    pub fn MatGetOrdering(
        arg1: Mat,
        arg2: MatOrderingType,
        arg3: *mut IS,
        arg4: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetOrderingList(arg1: *mut PetscFunctionList) -> PetscErrorCode;
}
extern "C" {
    pub fn MatOrderingRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: Mat,
                arg2: MatOrderingType,
                arg3: *mut IS,
                arg4: *mut IS,
            ) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut MatOrderingList: PetscFunctionList;
}
extern "C" {
    pub fn MatReorderForNonzeroDiagonal(
        arg1: Mat,
        arg2: PetscReal,
        arg3: IS,
        arg4: IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateLaplacian(
        arg1: Mat,
        arg2: PetscReal,
        arg3: PetscBool,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFactorGetPreferredOrdering(
        arg1: Mat,
        arg2: MatFactorType,
        arg3: *mut MatOrderingType,
    ) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatFactorShiftType {
    MAT_SHIFT_NONE = 0,
    MAT_SHIFT_NONZERO = 1,
    MAT_SHIFT_POSITIVE_DEFINITE = 2,
    MAT_SHIFT_INBLOCKS = 3,
}
extern "C" {
    pub static mut MatFactorShiftTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut MatFactorShiftTypesDetail: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatFactorError {
    MAT_FACTOR_NOERROR = 0,
    MAT_FACTOR_STRUCT_ZEROPIVOT = 1,
    MAT_FACTOR_NUMERIC_ZEROPIVOT = 2,
    MAT_FACTOR_OUTMEMORY = 3,
    MAT_FACTOR_OTHER = 4,
}
extern "C" {
    pub fn MatFactorGetError(arg1: Mat, arg2: *mut MatFactorError) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFactorClearError(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFactorGetErrorZeroPivot(
        arg1: Mat,
        arg2: *mut PetscReal,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MatFactorInfo {
    pub diagonal_fill: PetscReal,
    pub usedt: PetscReal,
    pub dt: PetscReal,
    pub dtcol: PetscReal,
    pub dtcount: PetscReal,
    pub fill: PetscReal,
    pub levels: PetscReal,
    pub pivotinblocks: PetscReal,
    pub zeropivot: PetscReal,
    pub shifttype: PetscReal,
    pub shiftamount: PetscReal,
}
#[test]
fn bindgen_test_layout_MatFactorInfo() {
    assert_eq!(
        ::std::mem::size_of::<MatFactorInfo>(),
        88usize,
        concat!("Size of: ", stringify!(MatFactorInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<MatFactorInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(MatFactorInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatFactorInfo>())).diagonal_fill as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MatFactorInfo),
            "::",
            stringify!(diagonal_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatFactorInfo>())).usedt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MatFactorInfo),
            "::",
            stringify!(usedt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatFactorInfo>())).dt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MatFactorInfo),
            "::",
            stringify!(dt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatFactorInfo>())).dtcol as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MatFactorInfo),
            "::",
            stringify!(dtcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatFactorInfo>())).dtcount as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MatFactorInfo),
            "::",
            stringify!(dtcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatFactorInfo>())).fill as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MatFactorInfo),
            "::",
            stringify!(fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatFactorInfo>())).levels as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MatFactorInfo),
            "::",
            stringify!(levels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatFactorInfo>())).pivotinblocks as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(MatFactorInfo),
            "::",
            stringify!(pivotinblocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatFactorInfo>())).zeropivot as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(MatFactorInfo),
            "::",
            stringify!(zeropivot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatFactorInfo>())).shifttype as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(MatFactorInfo),
            "::",
            stringify!(shifttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatFactorInfo>())).shiftamount as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(MatFactorInfo),
            "::",
            stringify!(shiftamount)
        )
    );
}
extern "C" {
    pub fn MatFactorInfoInitialize(arg1: *mut MatFactorInfo) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCholeskyFactor(arg1: Mat, arg2: IS, arg3: *const MatFactorInfo) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCholeskyFactorSymbolic(
        arg1: Mat,
        arg2: Mat,
        arg3: IS,
        arg4: *const MatFactorInfo,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCholeskyFactorNumeric(
        arg1: Mat,
        arg2: Mat,
        arg3: *const MatFactorInfo,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLUFactor(arg1: Mat, arg2: IS, arg3: IS, arg4: *const MatFactorInfo)
        -> PetscErrorCode;
}
extern "C" {
    pub fn MatILUFactor(
        arg1: Mat,
        arg2: IS,
        arg3: IS,
        arg4: *const MatFactorInfo,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLUFactorSymbolic(
        arg1: Mat,
        arg2: Mat,
        arg3: IS,
        arg4: IS,
        arg5: *const MatFactorInfo,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatILUFactorSymbolic(
        arg1: Mat,
        arg2: Mat,
        arg3: IS,
        arg4: IS,
        arg5: *const MatFactorInfo,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatICCFactorSymbolic(
        arg1: Mat,
        arg2: Mat,
        arg3: IS,
        arg4: *const MatFactorInfo,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatICCFactor(arg1: Mat, arg2: IS, arg3: *const MatFactorInfo) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLUFactorNumeric(arg1: Mat, arg2: Mat, arg3: *const MatFactorInfo) -> PetscErrorCode;
}
extern "C" {
    pub fn MatQRFactor(arg1: Mat, arg2: IS, arg3: *const MatFactorInfo) -> PetscErrorCode;
}
extern "C" {
    pub fn MatQRFactorSymbolic(
        arg1: Mat,
        arg2: Mat,
        arg3: IS,
        arg4: *const MatFactorInfo,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatQRFactorNumeric(arg1: Mat, arg2: Mat, arg3: *const MatFactorInfo) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetInertia(
        arg1: Mat,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSolve(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatForwardSolve(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatBackwardSolve(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSolveAdd(arg1: Mat, arg2: Vec, arg3: Vec, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSolveTranspose(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSolveTransposeAdd(arg1: Mat, arg2: Vec, arg3: Vec, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSolves(arg1: Mat, arg2: Vecs, arg3: Vecs) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetUnfactored(arg1: Mat) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatFactorSchurStatus {
    MAT_FACTOR_SCHUR_UNFACTORED = 0,
    MAT_FACTOR_SCHUR_FACTORED = 1,
    MAT_FACTOR_SCHUR_INVERTED = 2,
}
extern "C" {
    pub fn MatFactorSetSchurIS(arg1: Mat, arg2: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFactorGetSchurComplement(
        arg1: Mat,
        arg2: *mut Mat,
        arg3: *mut MatFactorSchurStatus,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFactorRestoreSchurComplement(
        arg1: Mat,
        arg2: *mut Mat,
        arg3: MatFactorSchurStatus,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFactorInvertSchurComplement(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFactorCreateSchurComplement(
        arg1: Mat,
        arg2: *mut Mat,
        arg3: *mut MatFactorSchurStatus,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFactorSolveSchurComplement(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFactorSolveSchurComplementTranspose(
        arg1: Mat,
        arg2: Vec,
        arg3: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFactorFactorizeSchurComplement(arg1: Mat) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatSORType {
    SOR_FORWARD_SWEEP = 1,
    SOR_BACKWARD_SWEEP = 2,
    SOR_SYMMETRIC_SWEEP = 3,
    SOR_LOCAL_FORWARD_SWEEP = 4,
    SOR_LOCAL_BACKWARD_SWEEP = 8,
    SOR_LOCAL_SYMMETRIC_SWEEP = 12,
    SOR_ZERO_INITIAL_GUESS = 16,
    SOR_EISENSTAT = 32,
    SOR_APPLY_UPPER = 64,
    SOR_APPLY_LOWER = 128,
}
extern "C" {
    pub fn MatSOR(
        arg1: Mat,
        arg2: Vec,
        arg3: PetscReal,
        arg4: MatSORType,
        arg5: PetscReal,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: Vec,
    ) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_MatColoring {
    _unused: [u8; 0],
}
pub type MatColoring = *mut _p_MatColoring;
pub type MatColoringType = *const ::std::os::raw::c_char;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatColoringWeightType {
    MAT_COLORING_WEIGHT_RANDOM = 0,
    MAT_COLORING_WEIGHT_LEXICAL = 1,
    MAT_COLORING_WEIGHT_LF = 2,
    MAT_COLORING_WEIGHT_SL = 3,
}
extern "C" {
    pub fn MatColoringCreate(arg1: Mat, arg2: *mut MatColoring) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringGetDegrees(arg1: Mat, arg2: PetscInt, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringDestroy(arg1: *mut MatColoring) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringView(arg1: MatColoring, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringSetType(arg1: MatColoring, arg2: MatColoringType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringSetFromOptions(arg1: MatColoring) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringSetDistance(arg1: MatColoring, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringGetDistance(arg1: MatColoring, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringSetMaxColors(arg1: MatColoring, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringGetMaxColors(arg1: MatColoring, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringApply(arg1: MatColoring, arg2: *mut ISColoring) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: MatColoring) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringPatch(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut ISColoringValue,
        arg5: *mut ISColoring,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringSetWeightType(
        arg1: MatColoring,
        arg2: MatColoringWeightType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringSetWeights(
        arg1: MatColoring,
        arg2: *mut PetscReal,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringCreateWeights(
        arg1: MatColoring,
        arg2: *mut *mut PetscReal,
        lperm: *mut *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatColoringTest(arg1: MatColoring, arg2: ISColoring) -> PetscErrorCode;
}
extern "C" {
    pub fn MatISColoringTest(arg1: Mat, arg2: ISColoring) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_MatFDColoring {
    _unused: [u8; 0],
}
pub type MatFDColoring = *mut _p_MatFDColoring;
extern "C" {
    pub fn MatFDColoringCreate(
        arg1: Mat,
        arg2: ISColoring,
        arg3: *mut MatFDColoring,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFDColoringDestroy(arg1: *mut MatFDColoring) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFDColoringView(arg1: MatFDColoring, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFDColoringSetFunction(
        arg1: MatFDColoring,
        arg2: ::std::option::Option<unsafe extern "C" fn() -> PetscErrorCode>,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFDColoringGetFunction(
        arg1: MatFDColoring,
        arg2: *mut ::std::option::Option<unsafe extern "C" fn() -> PetscErrorCode>,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFDColoringSetParameters(
        arg1: MatFDColoring,
        arg2: PetscReal,
        arg3: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFDColoringSetFromOptions(arg1: MatFDColoring) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFDColoringApply(
        arg1: Mat,
        arg2: MatFDColoring,
        arg3: Vec,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFDColoringSetF(arg1: MatFDColoring, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFDColoringGetPerturbedColumns(
        arg1: MatFDColoring,
        arg2: *mut PetscInt,
        arg3: *mut *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFDColoringSetUp(arg1: Mat, arg2: ISColoring, arg3: MatFDColoring) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFDColoringSetBlockSize(
        arg1: MatFDColoring,
        arg2: PetscInt,
        arg3: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFDColoringSetValues(
        arg1: Mat,
        arg2: MatFDColoring,
        arg3: *const PetscScalar,
    ) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_MatTransposeColoring {
    _unused: [u8; 0],
}
pub type MatTransposeColoring = *mut _p_MatTransposeColoring;
extern "C" {
    pub fn MatTransposeColoringCreate(
        arg1: Mat,
        arg2: ISColoring,
        arg3: *mut MatTransposeColoring,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatTransColoringApplySpToDen(
        arg1: MatTransposeColoring,
        arg2: Mat,
        arg3: Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatTransColoringApplyDenToSp(
        arg1: MatTransposeColoring,
        arg2: Mat,
        arg3: Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatTransposeColoringDestroy(arg1: *mut MatTransposeColoring) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_MatPartitioning {
    _unused: [u8; 0],
}
pub type MatPartitioning = *mut _p_MatPartitioning;
pub type MatPartitioningType = *const ::std::os::raw::c_char;
extern "C" {
    pub fn MatPartitioningCreate(arg1: MPI_Comm, arg2: *mut MatPartitioning) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningSetType(
        arg1: MatPartitioning,
        arg2: MatPartitioningType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningSetNParts(arg1: MatPartitioning, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningSetAdjacency(arg1: MatPartitioning, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningSetVertexWeights(
        arg1: MatPartitioning,
        arg2: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningSetPartitionWeights(
        arg1: MatPartitioning,
        arg2: *const PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningSetUseEdgeWeights(
        arg1: MatPartitioning,
        arg2: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningGetUseEdgeWeights(
        arg1: MatPartitioning,
        arg2: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningApply(arg1: MatPartitioning, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningImprove(arg1: MatPartitioning, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningViewImbalance(arg1: MatPartitioning, arg2: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningApplyND(arg1: MatPartitioning, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningDestroy(arg1: *mut MatPartitioning) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: MatPartitioning) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningView(arg1: MatPartitioning, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningViewFromOptions(
        arg1: MatPartitioning,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningSetFromOptions(arg1: MatPartitioning) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningGetType(
        arg1: MatPartitioning,
        arg2: *mut MatPartitioningType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningParmetisSetRepartition(part: MatPartitioning) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningParmetisSetCoarseSequential(arg1: MatPartitioning) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningParmetisGetEdgeCut(
        arg1: MatPartitioning,
        arg2: *mut PetscInt,
    ) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MPChacoGlobalType {
    MP_CHACO_MULTILEVEL = 1,
    MP_CHACO_SPECTRAL = 2,
    MP_CHACO_LINEAR = 4,
    MP_CHACO_RANDOM = 5,
    MP_CHACO_SCATTERED = 6,
}
extern "C" {
    pub static mut MPChacoGlobalTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MPChacoLocalType {
    MP_CHACO_KERNIGHAN = 1,
    MP_CHACO_NONE = 2,
}
extern "C" {
    pub static mut MPChacoLocalTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MPChacoEigenType {
    MP_CHACO_LANCZOS = 0,
    MP_CHACO_RQI = 1,
}
extern "C" {
    pub static mut MPChacoEigenTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn MatPartitioningChacoSetGlobal(
        arg1: MatPartitioning,
        arg2: MPChacoGlobalType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningChacoGetGlobal(
        arg1: MatPartitioning,
        arg2: *mut MPChacoGlobalType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningChacoSetLocal(
        arg1: MatPartitioning,
        arg2: MPChacoLocalType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningChacoGetLocal(
        arg1: MatPartitioning,
        arg2: *mut MPChacoLocalType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningChacoSetCoarseLevel(
        arg1: MatPartitioning,
        arg2: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningChacoSetEigenSolver(
        arg1: MatPartitioning,
        arg2: MPChacoEigenType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningChacoGetEigenSolver(
        arg1: MatPartitioning,
        arg2: *mut MPChacoEigenType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningChacoSetEigenTol(
        arg1: MatPartitioning,
        arg2: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningChacoGetEigenTol(
        arg1: MatPartitioning,
        arg2: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningChacoSetEigenNumber(
        arg1: MatPartitioning,
        arg2: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningChacoGetEigenNumber(
        arg1: MatPartitioning,
        arg2: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningPartySetGlobal(
        arg1: MatPartitioning,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningPartySetLocal(
        arg1: MatPartitioning,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningPartySetCoarseLevel(
        arg1: MatPartitioning,
        arg2: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningPartySetBipart(arg1: MatPartitioning, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningPartySetMatchOptimization(
        arg1: MatPartitioning,
        arg2: PetscBool,
    ) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MPPTScotchStrategyType {
    MP_PTSCOTCH_DEFAULT = 0,
    MP_PTSCOTCH_QUALITY = 1,
    MP_PTSCOTCH_SPEED = 2,
    MP_PTSCOTCH_BALANCE = 3,
    MP_PTSCOTCH_SAFETY = 4,
    MP_PTSCOTCH_SCALABILITY = 5,
}
extern "C" {
    pub static mut MPPTScotchStrategyTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn MatPartitioningPTScotchSetImbalance(
        arg1: MatPartitioning,
        arg2: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningPTScotchGetImbalance(
        arg1: MatPartitioning,
        arg2: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningPTScotchSetStrategy(
        arg1: MatPartitioning,
        arg2: MPPTScotchStrategyType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningPTScotchGetStrategy(
        arg1: MatPartitioning,
        arg2: *mut MPPTScotchStrategyType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningHierarchicalGetFineparts(
        arg1: MatPartitioning,
        arg2: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningHierarchicalGetCoarseparts(
        arg1: MatPartitioning,
        arg2: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningHierarchicalSetNcoarseparts(
        arg1: MatPartitioning,
        arg2: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPartitioningHierarchicalSetNfineparts(
        arg1: MatPartitioning,
        arg2: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMeshToVertexGraph(arg1: Mat, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMeshToCellGraph(arg1: Mat, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatOperation {
    MATOP_SET_VALUES = 0,
    MATOP_GET_ROW = 1,
    MATOP_RESTORE_ROW = 2,
    MATOP_MULT = 3,
    MATOP_MULT_ADD = 4,
    MATOP_MULT_TRANSPOSE = 5,
    MATOP_MULT_TRANSPOSE_ADD = 6,
    MATOP_SOLVE = 7,
    MATOP_SOLVE_ADD = 8,
    MATOP_SOLVE_TRANSPOSE = 9,
    MATOP_SOLVE_TRANSPOSE_ADD = 10,
    MATOP_LUFACTOR = 11,
    MATOP_CHOLESKYFACTOR = 12,
    MATOP_SOR = 13,
    MATOP_TRANSPOSE = 14,
    MATOP_GETINFO = 15,
    MATOP_EQUAL = 16,
    MATOP_GET_DIAGONAL = 17,
    MATOP_DIAGONAL_SCALE = 18,
    MATOP_NORM = 19,
    MATOP_ASSEMBLY_BEGIN = 20,
    MATOP_ASSEMBLY_END = 21,
    MATOP_SET_OPTION = 22,
    MATOP_ZERO_ENTRIES = 23,
    MATOP_ZERO_ROWS = 24,
    MATOP_LUFACTOR_SYMBOLIC = 25,
    MATOP_LUFACTOR_NUMERIC = 26,
    MATOP_CHOLESKY_FACTOR_SYMBOLIC = 27,
    MATOP_CHOLESKY_FACTOR_NUMERIC = 28,
    MATOP_SETUP_PREALLOCATION = 29,
    MATOP_ILUFACTOR_SYMBOLIC = 30,
    MATOP_ICCFACTOR_SYMBOLIC = 31,
    MATOP_GET_DIAGONAL_BLOCK = 32,
    MATOP_FREE_INTER_STRUCT = 33,
    MATOP_DUPLICATE = 34,
    MATOP_FORWARD_SOLVE = 35,
    MATOP_BACKWARD_SOLVE = 36,
    MATOP_ILUFACTOR = 37,
    MATOP_ICCFACTOR = 38,
    MATOP_AXPY = 39,
    MATOP_CREATE_SUBMATRICES = 40,
    MATOP_INCREASE_OVERLAP = 41,
    MATOP_GET_VALUES = 42,
    MATOP_COPY = 43,
    MATOP_GET_ROW_MAX = 44,
    MATOP_SCALE = 45,
    MATOP_SHIFT = 46,
    MATOP_DIAGONAL_SET = 47,
    MATOP_ZERO_ROWS_COLUMNS = 48,
    MATOP_SET_RANDOM = 49,
    MATOP_GET_ROW_IJ = 50,
    MATOP_RESTORE_ROW_IJ = 51,
    MATOP_GET_COLUMN_IJ = 52,
    MATOP_RESTORE_COLUMN_IJ = 53,
    MATOP_FDCOLORING_CREATE = 54,
    MATOP_COLORING_PATCH = 55,
    MATOP_SET_UNFACTORED = 56,
    MATOP_PERMUTE = 57,
    MATOP_SET_VALUES_BLOCKED = 58,
    MATOP_CREATE_SUBMATRIX = 59,
    MATOP_DESTROY = 60,
    MATOP_VIEW = 61,
    MATOP_CONVERT_FROM = 62,
    MATOP_MATMAT_MULT = 63,
    MATOP_MATMAT_MULT_SYMBOLIC = 64,
    MATOP_MATMAT_MULT_NUMERIC = 65,
    MATOP_SET_LOCAL_TO_GLOBAL_MAP = 66,
    MATOP_SET_VALUES_LOCAL = 67,
    MATOP_ZERO_ROWS_LOCAL = 68,
    MATOP_GET_ROW_MAX_ABS = 69,
    MATOP_GET_ROW_MIN_ABS = 70,
    MATOP_CONVERT = 71,
    MATOP_SET_COLORING = 72,
    MATOP_SET_VALUES_ADIFOR = 74,
    MATOP_FD_COLORING_APPLY = 75,
    MATOP_SET_FROM_OPTIONS = 76,
    MATOP_MULT_CONSTRAINED = 77,
    MATOP_MULT_TRANSPOSE_CONSTRAIN = 78,
    MATOP_FIND_ZERO_DIAGONALS = 79,
    MATOP_MULT_MULTIPLE = 80,
    MATOP_SOLVE_MULTIPLE = 81,
    MATOP_GET_INERTIA = 82,
    MATOP_LOAD = 83,
    MATOP_IS_SYMMETRIC = 84,
    MATOP_IS_HERMITIAN = 85,
    MATOP_IS_STRUCTURALLY_SYMMETRIC = 86,
    MATOP_SET_VALUES_BLOCKEDLOCAL = 87,
    MATOP_CREATE_VECS = 88,
    MATOP_MAT_MULT = 89,
    MATOP_MAT_MULT_SYMBOLIC = 90,
    MATOP_MAT_MULT_NUMERIC = 91,
    MATOP_PTAP = 92,
    MATOP_PTAP_SYMBOLIC = 93,
    MATOP_PTAP_NUMERIC = 94,
    MATOP_MAT_TRANSPOSE_MULT = 95,
    MATOP_MAT_TRANSPOSE_MULT_SYMBO = 96,
    MATOP_MAT_TRANSPOSE_MULT_NUMER = 97,
    MATOP_PRODUCTSETFROMOPTIONS = 99,
    MATOP_PRODUCTSYMBOLIC = 100,
    MATOP_PRODUCTNUMERIC = 101,
    MATOP_CONJUGATE = 102,
    MATOP_SET_VALUES_ROW = 104,
    MATOP_REAL_PART = 105,
    MATOP_IMAGINARY_PART = 106,
    MATOP_GET_ROW_UPPER_TRIANGULAR = 107,
    MATOP_RESTORE_ROW_UPPER_TRIANG = 108,
    MATOP_MAT_SOLVE = 109,
    MATOP_MAT_SOLVE_TRANSPOSE = 110,
    MATOP_GET_ROW_MIN = 111,
    MATOP_GET_COLUMN_VECTOR = 112,
    MATOP_MISSING_DIAGONAL = 113,
    MATOP_GET_SEQ_NONZERO_STRUCTUR = 114,
    MATOP_CREATE = 115,
    MATOP_GET_GHOSTS = 116,
    MATOP_GET_LOCAL_SUB_MATRIX = 117,
    MATOP_RESTORE_LOCALSUB_MATRIX = 118,
    MATOP_MULT_DIAGONAL_BLOCK = 119,
    MATOP_HERMITIAN_TRANSPOSE = 120,
    MATOP_MULT_HERMITIAN_TRANSPOSE = 121,
    MATOP_MULT_HERMITIAN_TRANS_ADD = 122,
    MATOP_GET_MULTI_PROC_BLOCK = 123,
    MATOP_FIND_NONZERO_ROWS = 124,
    MATOP_GET_COLUMN_NORMS = 125,
    MATOP_INVERT_BLOCK_DIAGONAL = 126,
    MATOP_CREATE_SUB_MATRICES_MPI = 128,
    MATOP_SET_VALUES_BATCH = 129,
    MATOP_TRANSPOSE_MAT_MULT = 130,
    MATOP_TRANSPOSE_MAT_MULT_SYMBO = 131,
    MATOP_TRANSPOSE_MAT_MULT_NUMER = 132,
    MATOP_TRANSPOSE_COLORING_CREAT = 133,
    MATOP_TRANS_COLORING_APPLY_SPT = 134,
    MATOP_TRANS_COLORING_APPLY_DEN = 135,
    MATOP_RART = 136,
    MATOP_RART_SYMBOLIC = 137,
    MATOP_RART_NUMERIC = 138,
    MATOP_SET_BLOCK_SIZES = 139,
    MATOP_AYPX = 140,
    MATOP_RESIDUAL = 141,
    MATOP_FDCOLORING_SETUP = 142,
    MATOP_MPICONCATENATESEQ = 144,
    MATOP_DESTROYSUBMATRICES = 145,
    MATOP_TRANSPOSE_SOLVE = 146,
    MATOP_GET_VALUES_LOCAL = 147,
}
extern "C" {
    pub fn MatSetOperation(
        arg1: Mat,
        arg2: MatOperation,
        arg3: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetOperation(
        arg1: Mat,
        arg2: MatOperation,
        arg3: *mut ::std::option::Option<unsafe extern "C" fn()>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatHasOperation(arg1: Mat, arg2: MatOperation, arg3: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatHasCongruentLayouts(arg1: Mat, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatShellSetOperation(
        arg1: Mat,
        arg2: MatOperation,
        arg3: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatShellGetOperation(
        arg1: Mat,
        arg2: MatOperation,
        arg3: *mut ::std::option::Option<unsafe extern "C" fn()>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatShellSetContext(arg1: Mat, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn MatShellSetVecType(arg1: Mat, arg2: VecType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatShellTestMult(
        arg1: Mat,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: Vec,
                arg3: Vec,
            ) -> PetscErrorCode,
        >,
        arg3: Vec,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatShellTestMultTranspose(
        arg1: Mat,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: Vec,
                arg3: Vec,
            ) -> PetscErrorCode,
        >,
        arg3: Vec,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatShellSetManageScalingShifts(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatShellSetMatProductOperation(
        arg1: Mat,
        arg2: MatProductType,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: Mat,
                arg2: Mat,
                arg3: Mat,
                arg4: *mut *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: Mat,
                arg2: Mat,
                arg3: Mat,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
        arg6: MatType,
        arg7: MatType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatIsShell(arg1: Mat, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPIBAIJSetHashTableFactor(arg1: Mat, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn MatISSetLocalMatType(arg1: Mat, arg2: MatType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatISSetPreallocation(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: PetscInt,
        arg5: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatISStoreL2L(arg1: Mat, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatISFixLocalEmpty(arg1: Mat, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatISGetLocalMat(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatISRestoreLocalMat(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatISSetLocalMat(arg1: Mat, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatISGetMPIXAIJ(arg1: Mat, arg2: MatReuse, arg3: *mut Mat) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_MatNullSpace {
    _unused: [u8; 0],
}
pub type MatNullSpace = *mut _p_MatNullSpace;
extern "C" {
    pub fn MatNullSpaceCreate(
        arg1: MPI_Comm,
        arg2: PetscBool,
        arg3: PetscInt,
        arg4: *const Vec,
        arg5: *mut MatNullSpace,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNullSpaceSetFunction(
        arg1: MatNullSpace,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: MatNullSpace,
                arg2: Vec,
                arg3: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNullSpaceDestroy(arg1: *mut MatNullSpace) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNullSpaceRemove(arg1: MatNullSpace, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetNullSpace(arg1: Mat, arg2: *mut MatNullSpace) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetTransposeNullSpace(arg1: Mat, arg2: *mut MatNullSpace) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetTransposeNullSpace(arg1: Mat, arg2: MatNullSpace) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetNullSpace(arg1: Mat, arg2: MatNullSpace) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSetNearNullSpace(arg1: Mat, arg2: MatNullSpace) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetNearNullSpace(arg1: Mat, arg2: *mut MatNullSpace) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNullSpaceTest(arg1: MatNullSpace, arg2: Mat, arg3: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNullSpaceView(arg1: MatNullSpace, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNullSpaceGetVecs(
        arg1: MatNullSpace,
        arg2: *mut PetscBool,
        arg3: *mut PetscInt,
        arg4: *mut *const Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNullSpaceCreateRigidBody(arg1: Vec, arg2: *mut MatNullSpace) -> PetscErrorCode;
}
extern "C" {
    pub fn MatReorderingSeqSBAIJ(arg1: Mat, arg2: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMPISBAIJSetHashTableFactor(arg1: Mat, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSeqSBAIJSetColumnIndices(arg1: Mat, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateMAIJ(arg1: Mat, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMAIJRedimension(arg1: Mat, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMAIJGetAIJ(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatComputeOperator(arg1: Mat, arg2: MatType, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatComputeOperatorTranspose(arg1: Mat, arg2: MatType, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateKAIJ(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *const PetscScalar,
        arg5: *const PetscScalar,
        arg6: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatKAIJGetAIJ(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatKAIJGetS(
        arg1: Mat,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatKAIJGetSRead(
        arg1: Mat,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatKAIJRestoreS(arg1: Mat, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatKAIJRestoreSRead(arg1: Mat, arg2: *mut *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatKAIJGetT(
        arg1: Mat,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatKAIJGetTRead(
        arg1: Mat,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatKAIJRestoreT(arg1: Mat, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatKAIJRestoreTRead(arg1: Mat, arg2: *mut *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatKAIJSetAIJ(arg1: Mat, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatKAIJSetS(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatKAIJSetT(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *const PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatKAIJGetScaledIdentity(arg1: Mat, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatDiagonalScaleLocal(arg1: Mat, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateMFFD(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDSetBase(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDSetFunction(
        arg1: Mat,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: Vec,
                arg3: Vec,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDSetFunctioni(
        arg1: Mat,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: PetscInt,
                arg3: Vec,
                arg4: *mut PetscScalar,
            ) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDSetFunctioniBase(
        arg1: Mat,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: Vec) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDSetHHistory(arg1: Mat, arg2: *mut PetscScalar, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDResetHHistory(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDSetFunctionError(arg1: Mat, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDSetPeriod(arg1: Mat, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDGetH(arg1: Mat, arg2: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDSetOptionsPrefix(
        arg1: Mat,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDCheckPositivity(
        arg1: *mut ::std::os::raw::c_void,
        arg2: Vec,
        arg3: Vec,
        arg4: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDSetCheckh(
        arg1: Mat,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut PetscScalar,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_MatMFFD {
    _unused: [u8; 0],
}
pub type MatMFFD = *mut _p_MatMFFD;
pub type MatMFFDType = *const ::std::os::raw::c_char;
extern "C" {
    pub fn MatMFFDSetType(arg1: Mat, arg2: MatMFFDType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: MatMFFD) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDDSSetUmin(arg1: Mat, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDWPSetComputeNormU(arg1: Mat, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatFDColoringSetType(arg1: MatFDColoring, arg2: MatMFFDType) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerMathematicaPutMatrix(
        arg1: PetscViewer,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PetscViewerMathematicaPutCSRMatrix(
        arg1: PetscViewer,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatBindToCPU(arg1: Mat, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatBoundToCPU(arg1: Mat, arg2: *mut PetscBool) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_SplitCSRMat {
    _unused: [u8; 0],
}
pub type PetscSplitCSRDataStructure = *mut _n_SplitCSRMat;
extern "C" {
    pub fn MatCUSPARSEGetDeviceMatWrite(
        arg1: Mat,
        arg2: *mut PetscSplitCSRDataStructure,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateNest(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: *const IS,
        arg4: PetscInt,
        arg5: *const IS,
        arg6: *const Mat,
        arg7: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNestGetSize(arg1: Mat, arg2: *mut PetscInt, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNestGetISs(arg1: Mat, arg2: *mut IS, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNestGetLocalISs(arg1: Mat, arg2: *mut IS, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNestGetSubMats(
        arg1: Mat,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut *mut *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNestGetSubMat(
        arg1: Mat,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNestSetVecType(arg1: Mat, arg2: VecType) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNestSetSubMats(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *const IS,
        arg4: PetscInt,
        arg5: *const IS,
        arg6: *const Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNestSetSubMat(arg1: Mat, arg2: PetscInt, arg3: PetscInt, arg4: Mat)
        -> PetscErrorCode;
}
extern "C" {
    pub fn MatChop(arg1: Mat, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn MatComputeBandwidth(arg1: Mat, arg2: PetscReal, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSubdomainsCreateCoalesce(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatPreallocatorPreallocate(arg1: Mat, arg2: PetscBool, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatHeaderReplace(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_RG {
    _unused: [u8; 0],
}
pub type RG = *mut _p_RG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_SlepcSC {
    pub map: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: PetscObject,
            arg2: PetscInt,
            arg3: *mut PetscScalar,
            arg4: *mut PetscScalar,
        ) -> PetscErrorCode,
    >,
    pub mapobj: PetscObject,
    pub comparison: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: PetscScalar,
            arg2: PetscScalar,
            arg3: PetscScalar,
            arg4: PetscScalar,
            arg5: *mut PetscInt,
            arg6: *mut ::std::os::raw::c_void,
        ) -> PetscErrorCode,
    >,
    pub comparisonctx: *mut ::std::os::raw::c_void,
    pub rg: RG,
}
#[test]
fn bindgen_test_layout__n_SlepcSC() {
    assert_eq!(
        ::std::mem::size_of::<_n_SlepcSC>(),
        40usize,
        concat!("Size of: ", stringify!(_n_SlepcSC))
    );
    assert_eq!(
        ::std::mem::align_of::<_n_SlepcSC>(),
        8usize,
        concat!("Alignment of ", stringify!(_n_SlepcSC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_SlepcSC>())).map as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_SlepcSC),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_SlepcSC>())).mapobj as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_SlepcSC),
            "::",
            stringify!(mapobj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_SlepcSC>())).comparison as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_SlepcSC),
            "::",
            stringify!(comparison)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_SlepcSC>())).comparisonctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_SlepcSC),
            "::",
            stringify!(comparisonctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_n_SlepcSC>())).rg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_n_SlepcSC),
            "::",
            stringify!(rg)
        )
    );
}
pub type SlepcSC = *mut _n_SlepcSC;
extern "C" {
    pub fn SlepcSCCompare(
        arg1: SlepcSC,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscScalar,
        arg5: PetscScalar,
        arg6: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcSortEigenvalues(
        arg1: SlepcSC,
        n: PetscInt,
        eigr: *mut PetscScalar,
        eigi: *mut PetscScalar,
        perm: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcMap_ST(
        arg1: PetscObject,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
        arg4: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcCompareLargestMagnitude(
        arg1: PetscScalar,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscScalar,
        arg5: *mut PetscInt,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcCompareSmallestMagnitude(
        arg1: PetscScalar,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscScalar,
        arg5: *mut PetscInt,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcCompareLargestReal(
        arg1: PetscScalar,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscScalar,
        arg5: *mut PetscInt,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcCompareSmallestReal(
        arg1: PetscScalar,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscScalar,
        arg5: *mut PetscInt,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcCompareLargestImaginary(
        arg1: PetscScalar,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscScalar,
        arg5: *mut PetscInt,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcCompareSmallestImaginary(
        arg1: PetscScalar,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscScalar,
        arg5: *mut PetscInt,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcCompareTargetMagnitude(
        arg1: PetscScalar,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscScalar,
        arg5: *mut PetscInt,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcCompareTargetReal(
        arg1: PetscScalar,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscScalar,
        arg5: *mut PetscInt,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcCompareTargetImaginary(
        arg1: PetscScalar,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscScalar,
        arg5: *mut PetscInt,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcCompareSmallestPosReal(
        arg1: PetscScalar,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscScalar,
        arg5: *mut PetscInt,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateTile(
        arg1: PetscScalar,
        arg2: Mat,
        arg3: PetscScalar,
        arg4: Mat,
        arg5: PetscScalar,
        arg6: Mat,
        arg7: PetscScalar,
        arg8: Mat,
        arg9: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateVecsEmpty(arg1: Mat, arg2: *mut Vec, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatNormEstimate(arg1: Mat, arg2: Vec, arg3: Vec, arg4: *mut PetscReal)
        -> PetscErrorCode;
}
extern "C" {
    pub fn VecCreateComp(
        arg1: MPI_Comm,
        arg2: *mut PetscInt,
        arg3: PetscInt,
        arg4: VecType,
        arg5: Vec,
        arg6: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCreateCompWithVecs(
        arg1: *mut Vec,
        arg2: PetscInt,
        arg3: Vec,
        arg4: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCompGetSubVecs(
        arg1: Vec,
        arg2: *mut PetscInt,
        arg3: *mut *const Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCompSetSubVecs(arg1: Vec, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecNormalizeComplex(
        arg1: Vec,
        arg2: Vec,
        arg3: PetscBool,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCheckOrthogonality(
        arg1: *mut Vec,
        arg2: PetscInt,
        arg3: *mut Vec,
        arg4: PetscInt,
        arg5: Mat,
        arg6: PetscViewer,
        arg7: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecCheckOrthonormality(
        arg1: *mut Vec,
        arg2: PetscInt,
        arg3: *mut Vec,
        arg4: PetscInt,
        arg5: Mat,
        arg6: PetscViewer,
        arg7: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn VecDuplicateEmpty(arg1: Vec, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn VecSetRandomNormal(arg1: Vec, arg2: PetscRandom, arg3: Vec, arg4: Vec)
        -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _n_SlepcConvMon {
    _unused: [u8; 0],
}
pub type SlepcConvMon = *mut _n_SlepcConvMon;
extern "C" {
    pub fn SlepcInitialize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcInitializeNoPointers(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcInitializeNoArguments() -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcFinalize() -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcInitializeFortran() -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcInitialized(arg1: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcFinalized(arg1: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcGetVersion(arg1: *mut ::std::os::raw::c_char, arg2: size_t) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcGetVersionNumber(
        arg1: *mut PetscInt,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcHasExternalPackage(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SlepcSNPrintfScalar(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: PetscScalar,
        arg4: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut SlepcInitializeCalled: PetscBool;
}
extern "C" {
    pub static mut SlepcFinalizeCalled: PetscBool;
}
extern "C" {
    pub fn SlepcDebugViewMatrix(
        arg1: PetscInt,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
        arg4: *mut PetscScalar,
        arg5: PetscInt,
        arg6: *const ::std::os::raw::c_char,
        arg7: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVInitializePackage() -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_BV {
    _unused: [u8; 0],
}
pub type BV = *mut _p_BV;
pub type BVType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut BV_CLASSID: PetscClassId;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum BVOrthogType {
    BV_ORTHOG_CGS = 0,
    BV_ORTHOG_MGS = 1,
}
extern "C" {
    pub static mut BVOrthogTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum BVOrthogRefineType {
    BV_ORTHOG_REFINE_IFNEEDED = 0,
    BV_ORTHOG_REFINE_NEVER = 1,
    BV_ORTHOG_REFINE_ALWAYS = 2,
}
extern "C" {
    pub static mut BVOrthogRefineTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum BVOrthogBlockType {
    BV_ORTHOG_BLOCK_GS = 0,
    BV_ORTHOG_BLOCK_CHOL = 1,
    BV_ORTHOG_BLOCK_TSQR = 2,
    BV_ORTHOG_BLOCK_TSQRCHOL = 3,
    BV_ORTHOG_BLOCK_SVQB = 4,
}
extern "C" {
    pub static mut BVOrthogBlockTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum BVMatMultType {
    BV_MATMULT_VECS = 0,
    BV_MATMULT_MAT = 1,
    BV_MATMULT_MAT_SAVE = 2,
}
extern "C" {
    pub static mut BVMatMultTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn BVCreate(arg1: MPI_Comm, arg2: *mut BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVDestroy(arg1: *mut BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetType(arg1: BV, arg2: BVType) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetType(arg1: BV, arg2: *mut BVType) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetSizes(arg1: BV, arg2: PetscInt, arg3: PetscInt, arg4: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetSizesFromVec(arg1: BV, arg2: Vec, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetSizes(
        arg1: BV,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVResize(arg1: BV, arg2: PetscInt, arg3: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetFromOptions(arg1: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVView(arg1: BV, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn BVViewFromOptions(
        arg1: BV,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetColumn(arg1: BV, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn BVRestoreColumn(arg1: BV, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetSplit(arg1: BV, arg2: *mut BV, arg3: *mut BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVRestoreSplit(arg1: BV, arg2: *mut BV, arg3: *mut BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetArray(arg1: BV, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn BVRestoreArray(arg1: BV, arg2: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetArrayRead(arg1: BV, arg2: *mut *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn BVRestoreArrayRead(arg1: BV, arg2: *mut *const PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn BVCreateVec(arg1: BV, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetActiveColumns(arg1: BV, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetActiveColumns(arg1: BV, arg2: *mut PetscInt, arg3: *mut PetscInt)
        -> PetscErrorCode;
}
extern "C" {
    pub fn BVInsertVec(arg1: BV, arg2: PetscInt, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn BVInsertVecs(
        arg1: BV,
        arg2: PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut Vec,
        arg5: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVInsertConstraints(arg1: BV, arg2: *mut PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetNumConstraints(arg1: BV, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetNumConstraints(arg1: BV, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetDefiniteTolerance(arg1: BV, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetDefiniteTolerance(arg1: BV, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn BVDuplicate(arg1: BV, arg2: *mut BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVDuplicateResize(arg1: BV, arg2: PetscInt, arg3: *mut BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVCopy(arg1: BV, arg2: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVCopyVec(arg1: BV, arg2: PetscInt, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn BVCopyColumn(arg1: BV, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetMatrix(arg1: BV, arg2: Mat, arg3: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetMatrix(arg1: BV, arg2: *mut Mat, arg3: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn BVApplyMatrix(arg1: BV, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn BVApplyMatrixBV(arg1: BV, arg2: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetCachedBV(arg1: BV, arg2: *mut BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetSignature(arg1: BV, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetSignature(arg1: BV, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetBufferVec(arg1: BV, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetBufferVec(arg1: BV, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn BVMult(
        arg1: BV,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: BV,
        arg5: Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVMultVec(
        arg1: BV,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: Vec,
        arg5: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVMultColumn(
        arg1: BV,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscInt,
        arg5: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVMultInPlace(arg1: BV, arg2: Mat, arg3: PetscInt, arg4: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn BVMultInPlaceHermitianTranspose(
        arg1: BV,
        arg2: Mat,
        arg3: PetscInt,
        arg4: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVMatMult(arg1: BV, arg2: Mat, arg3: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVMatMultTranspose(arg1: BV, arg2: Mat, arg3: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVMatMultHermitianTranspose(arg1: BV, arg2: Mat, arg3: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVMatMultColumn(arg1: BV, arg2: Mat, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn BVMatMultTransposeColumn(arg1: BV, arg2: Mat, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn BVMatMultHermitianTransposeColumn(arg1: BV, arg2: Mat, arg3: PetscInt)
        -> PetscErrorCode;
}
extern "C" {
    pub fn BVMatProject(arg1: BV, arg2: Mat, arg3: BV, arg4: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn BVMatArnoldi(
        arg1: BV,
        arg2: Mat,
        arg3: Mat,
        arg4: PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut PetscReal,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVMatLanczos(
        arg1: BV,
        arg2: Mat,
        arg3: *mut PetscReal,
        arg4: *mut PetscReal,
        arg5: PetscInt,
        arg6: *mut PetscInt,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVDot(arg1: BV, arg2: BV, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn BVDotVec(arg1: BV, arg2: Vec, arg3: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn BVDotVecBegin(arg1: BV, arg2: Vec, arg3: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn BVDotVecEnd(arg1: BV, arg2: Vec, arg3: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn BVDotColumn(arg1: BV, arg2: PetscInt, arg3: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn BVDotColumnBegin(arg1: BV, arg2: PetscInt, arg3: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn BVDotColumnEnd(arg1: BV, arg2: PetscInt, arg3: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn BVScale(arg1: BV, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn BVScaleColumn(arg1: BV, arg2: PetscInt, arg3: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn BVNorm(arg1: BV, arg2: NormType, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn BVNormVec(arg1: BV, arg2: Vec, arg3: NormType, arg4: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn BVNormVecBegin(
        arg1: BV,
        arg2: Vec,
        arg3: NormType,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVNormVecEnd(
        arg1: BV,
        arg2: Vec,
        arg3: NormType,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVNormColumn(
        arg1: BV,
        arg2: PetscInt,
        arg3: NormType,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVNormColumnBegin(
        arg1: BV,
        arg2: PetscInt,
        arg3: NormType,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVNormColumnEnd(
        arg1: BV,
        arg2: PetscInt,
        arg3: NormType,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVNormalize(arg1: BV, arg2: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetRandom(arg1: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetRandomNormal(arg1: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetRandomSign(arg1: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetRandomColumn(arg1: BV, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetRandomCond(arg1: BV, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetRandomContext(arg1: BV, arg2: PetscRandom) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetRandomContext(arg1: BV, arg2: *mut PetscRandom) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetOrthogonalization(
        arg1: BV,
        arg2: BVOrthogType,
        arg3: BVOrthogRefineType,
        arg4: PetscReal,
        arg5: BVOrthogBlockType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetOrthogonalization(
        arg1: BV,
        arg2: *mut BVOrthogType,
        arg3: *mut BVOrthogRefineType,
        arg4: *mut PetscReal,
        arg5: *mut BVOrthogBlockType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVOrthogonalize(arg1: BV, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn BVOrthogonalizeVec(
        arg1: BV,
        arg2: Vec,
        arg3: *mut PetscScalar,
        arg4: *mut PetscReal,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVOrthogonalizeColumn(
        arg1: BV,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
        arg4: *mut PetscReal,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVOrthonormalizeColumn(
        arg1: BV,
        arg2: PetscInt,
        arg3: PetscBool,
        arg4: *mut PetscReal,
        arg5: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVOrthogonalizeSomeColumn(
        arg1: BV,
        arg2: PetscInt,
        arg3: *mut PetscBool,
        arg4: *mut PetscScalar,
        arg5: *mut PetscReal,
        arg6: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVBiorthogonalizeColumn(arg1: BV, arg2: BV, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn BVBiorthonormalizeColumn(
        arg1: BV,
        arg2: BV,
        arg3: PetscInt,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetMatMultMethod(arg1: BV, arg2: BVMatMultType) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetMatMultMethod(arg1: BV, arg2: *mut BVMatMultType) -> PetscErrorCode;
}
extern "C" {
    pub fn BVCreateFromMat(arg1: Mat, arg2: *mut BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVCreateMat(arg1: BV, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetMat(arg1: BV, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn BVRestoreMat(arg1: BV, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn BVScatter(arg1: BV, arg2: BV, arg3: VecScatter, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSumQuadrature(
        arg1: BV,
        arg2: BV,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut PetscScalar,
        arg7: *mut PetscScalar,
        arg8: VecScatter,
        arg9: PetscSubcomm,
        arg10: PetscInt,
        arg11: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVDotQuadrature(
        arg1: BV,
        arg2: BV,
        arg3: *mut PetscScalar,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: *mut PetscScalar,
        arg8: *mut PetscScalar,
        arg9: PetscSubcomm,
        arg10: PetscInt,
        arg11: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVTraceQuadrature(
        arg1: BV,
        arg2: BV,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: *mut PetscScalar,
        arg6: VecScatter,
        arg7: PetscSubcomm,
        arg8: PetscInt,
        arg9: PetscBool,
        arg10: *mut PetscReal,
    ) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum BVSVDMethod {
    BV_SVD_METHOD_REFINE = 0,
    BV_SVD_METHOD_QR = 1,
    BV_SVD_METHOD_QR_CAA = 2,
}
extern "C" {
    pub static mut BVSVDMethods: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn BVSVDAndRank(
        arg1: BV,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscReal,
        arg5: BVSVDMethod,
        arg6: *mut PetscScalar,
        arg7: *mut PetscReal,
        arg8: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn BVCreateTensor(arg1: BV, arg2: PetscInt, arg3: *mut BV) -> PetscErrorCode;
}
extern "C" {
    pub fn BVTensorBuildFirstColumn(arg1: BV, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn BVTensorCompress(arg1: BV, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn BVTensorGetDegree(arg1: BV, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn BVTensorGetFactors(arg1: BV, arg2: *mut BV, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn BVTensorRestoreFactors(arg1: BV, arg2: *mut BV, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn BVSetOptionsPrefix(arg1: BV, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn BVAppendOptionsPrefix(arg1: BV, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn BVGetOptionsPrefix(arg1: BV, arg2: *mut *const ::std::os::raw::c_char)
        -> PetscErrorCode;
}
extern "C" {
    pub static mut BVList: PetscFunctionList;
}
extern "C" {
    pub fn BVRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: BV) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_DM {
    _unused: [u8; 0],
}
pub type DM = *mut _p_DM;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DMBoundaryType {
    DM_BOUNDARY_NONE = 0,
    DM_BOUNDARY_GHOSTED = 1,
    DM_BOUNDARY_MIRROR = 2,
    DM_BOUNDARY_PERIODIC = 3,
    DM_BOUNDARY_TWIST = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DMBoundaryConditionType {
    DM_BC_ESSENTIAL = 1,
    DM_BC_ESSENTIAL_FIELD = 5,
    DM_BC_NATURAL = 2,
    DM_BC_NATURAL_FIELD = 6,
    DM_BC_ESSENTIAL_BD_FIELD = 9,
    DM_BC_NATURAL_RIEMANN = 10,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DMPointLocationType {
    DM_POINTLOCATION_NONE = 0,
    DM_POINTLOCATION_NEAREST = 1,
    DM_POINTLOCATION_REMOVE = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DMAdaptationStrategy {
    DM_ADAPTATION_INITIAL = 0,
    DM_ADAPTATION_SEQUENTIAL = 1,
    DM_ADAPTATION_MULTILEVEL = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DMAdaptationCriterion {
    DM_ADAPTATION_NONE = 0,
    DM_ADAPTATION_REFINE = 1,
    DM_ADAPTATION_LABEL = 2,
    DM_ADAPTATION_METRIC = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DMAdaptFlag {
    DM_ADAPT_DETERMINE = -1,
    DM_ADAPT_KEEP = 0,
    DM_ADAPT_REFINE = 1,
    DM_ADAPT_COARSEN = 2,
    DM_ADAPT_COARSEN_LAST = 3,
    DM_ADAPT_RESERVED_COUNT = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DMDirection {
    DM_X = 0,
    DM_Y = 1,
    DM_Z = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DMEnclosureType {
    DM_ENC_EQUALITY = 0,
    DM_ENC_SUPERMESH = 1,
    DM_ENC_SUBMESH = 2,
    DM_ENC_NONE = 3,
    DM_ENC_UNKNOWN = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DMPolytopeType {
    DM_POLYTOPE_POINT = 0,
    DM_POLYTOPE_SEGMENT = 1,
    DM_POLYTOPE_POINT_PRISM_TENSOR = 2,
    DM_POLYTOPE_TRIANGLE = 3,
    DM_POLYTOPE_QUADRILATERAL = 4,
    DM_POLYTOPE_SEG_PRISM_TENSOR = 5,
    DM_POLYTOPE_TETRAHEDRON = 6,
    DM_POLYTOPE_HEXAHEDRON = 7,
    DM_POLYTOPE_TRI_PRISM = 8,
    DM_POLYTOPE_TRI_PRISM_TENSOR = 9,
    DM_POLYTOPE_QUAD_PRISM_TENSOR = 10,
    DM_POLYTOPE_PYRAMID = 11,
    DM_POLYTOPE_FV_GHOST = 12,
    DM_POLYTOPE_INTERIOR_GHOST = 13,
    DM_POLYTOPE_UNKNOWN = 14,
    DM_NUM_POLYTOPES = 15,
}
extern "C" {
    pub static mut DMPolytopeTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PetscUnit {
    PETSC_UNIT_LENGTH = 0,
    PETSC_UNIT_MASS = 1,
    PETSC_UNIT_TIME = 2,
    PETSC_UNIT_CURRENT = 3,
    PETSC_UNIT_TEMPERATURE = 4,
    PETSC_UNIT_AMOUNT = 5,
    PETSC_UNIT_LUMINOSITY = 6,
    NUM_PETSC_UNITS = 7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_DMField {
    _unused: [u8; 0],
}
pub type DMField = *mut _p_DMField;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_UniversalLabel {
    _unused: [u8; 0],
}
pub type DMUniversalLabel = *mut _p_UniversalLabel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PC {
    _unused: [u8; 0],
}
pub type PC = *mut _p_PC;
pub type PCType = *const ::std::os::raw::c_char;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCSide {
    PC_SIDE_DEFAULT = -1,
    PC_LEFT = 0,
    PC_RIGHT = 1,
    PC_SYMMETRIC = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCRichardsonConvergedReason {
    PCRICHARDSON_CONVERGED_RTOL = 2,
    PCRICHARDSON_CONVERGED_ATOL = 3,
    PCRICHARDSON_CONVERGED_ITS = 4,
    PCRICHARDSON_DIVERGED_DTOL = -4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCJacobiType {
    PC_JACOBI_DIAGONAL = 0,
    PC_JACOBI_ROWMAX = 1,
    PC_JACOBI_ROWSUM = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCASMType {
    PC_ASM_BASIC = 3,
    PC_ASM_RESTRICT = 1,
    PC_ASM_INTERPOLATE = 2,
    PC_ASM_NONE = 0,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCGASMType {
    PC_GASM_BASIC = 3,
    PC_GASM_RESTRICT = 1,
    PC_GASM_INTERPOLATE = 2,
    PC_GASM_NONE = 0,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCCompositeType {
    PC_COMPOSITE_ADDITIVE = 0,
    PC_COMPOSITE_MULTIPLICATIVE = 1,
    PC_COMPOSITE_SYMMETRIC_MULTIPLICATIVE = 2,
    PC_COMPOSITE_SPECIAL = 3,
    PC_COMPOSITE_SCHUR = 4,
    PC_COMPOSITE_GKB = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCFieldSplitSchurPreType {
    PC_FIELDSPLIT_SCHUR_PRE_SELF = 0,
    PC_FIELDSPLIT_SCHUR_PRE_SELFP = 1,
    PC_FIELDSPLIT_SCHUR_PRE_A11 = 2,
    PC_FIELDSPLIT_SCHUR_PRE_USER = 3,
    PC_FIELDSPLIT_SCHUR_PRE_FULL = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCFieldSplitSchurFactType {
    PC_FIELDSPLIT_SCHUR_FACT_DIAG = 0,
    PC_FIELDSPLIT_SCHUR_FACT_LOWER = 1,
    PC_FIELDSPLIT_SCHUR_FACT_UPPER = 2,
    PC_FIELDSPLIT_SCHUR_FACT_FULL = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCPARMSGlobalType {
    PC_PARMS_GLOBAL_RAS = 0,
    PC_PARMS_GLOBAL_SCHUR = 1,
    PC_PARMS_GLOBAL_BJ = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCPARMSLocalType {
    PC_PARMS_LOCAL_ILU0 = 0,
    PC_PARMS_LOCAL_ILUK = 1,
    PC_PARMS_LOCAL_ILUT = 2,
    PC_PARMS_LOCAL_ARMS = 3,
}
pub type PCGAMGType = *const ::std::os::raw::c_char;
pub type PCGAMGClassicalType = *const ::std::os::raw::c_char;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCMGType {
    PC_MG_MULTIPLICATIVE = 0,
    PC_MG_ADDITIVE = 1,
    PC_MG_FULL = 2,
    PC_MG_KASKADE = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCMGCycleType {
    PC_MG_CYCLE_V = 1,
    PC_MG_CYCLE_W = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCMGGalerkinType {
    PC_MG_GALERKIN_BOTH = 0,
    PC_MG_GALERKIN_PMAT = 1,
    PC_MG_GALERKIN_MAT = 2,
    PC_MG_GALERKIN_NONE = 3,
    PC_MG_GALERKIN_EXTERNAL = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCExoticType {
    PC_EXOTIC_FACE = 0,
    PC_EXOTIC_WIREBASKET = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCBDDCInterfaceExtType {
    PC_BDDC_INTERFACE_EXT_DIRICHLET = 0,
    PC_BDDC_INTERFACE_EXT_LUMP = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCMGCoarseSpaceType {
    PCMG_POLYNOMIAL = 0,
    PCMG_HARMONIC = 1,
    PCMG_EIGENVECTOR = 2,
    PCMG_GENERALIZED_EIGENVECTOR = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCPatchConstructType {
    PC_PATCH_STAR = 0,
    PC_PATCH_VANKA = 1,
    PC_PATCH_PARDECOMP = 2,
    PC_PATCH_USER = 3,
    PC_PATCH_PYTHON = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCDeflationSpaceType {
    PC_DEFLATION_SPACE_HAAR = 0,
    PC_DEFLATION_SPACE_DB2 = 1,
    PC_DEFLATION_SPACE_DB4 = 2,
    PC_DEFLATION_SPACE_DB8 = 3,
    PC_DEFLATION_SPACE_DB16 = 4,
    PC_DEFLATION_SPACE_BIORTH22 = 5,
    PC_DEFLATION_SPACE_MEYER = 6,
    PC_DEFLATION_SPACE_AGGREGATION = 7,
    PC_DEFLATION_SPACE_USER = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCHPDDMCoarseCorrectionType {
    PC_HPDDM_COARSE_CORRECTION_DEFLATED = 0,
    PC_HPDDM_COARSE_CORRECTION_ADDITIVE = 1,
    PC_HPDDM_COARSE_CORRECTION_BALANCED = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCFailedReason {
    PC_SETUP_ERROR = -1,
    PC_NOERROR = 0,
    PC_FACTOR_STRUCT_ZEROPIVOT = 1,
    PC_FACTOR_NUMERIC_ZEROPIVOT = 2,
    PC_FACTOR_OUTMEMORY = 3,
    PC_FACTOR_OTHER = 4,
    PC_SUBPC_ERROR = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PCGAMGLayoutType {
    PCGAMG_LAYOUT_COMPACT = 0,
    PCGAMG_LAYOUT_SPREAD = 1,
}
extern "C" {
    pub fn PCInitializePackage() -> PetscErrorCode;
}
extern "C" {
    pub static mut PCList: PetscFunctionList;
}
extern "C" {
    pub static mut PC_CLASSID: PetscClassId;
}
extern "C" {
    pub static PCSides: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut PCJacobiTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PCASMTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PCGASMTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PCCompositeTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PCFieldSplitSchurPreTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PCFieldSplitSchurFactTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PCPARMSGlobalTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PCPARMSLocalTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PCMGTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PCMGCycleTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PCMGGalerkinTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PCMGCoarseSpaceTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PCExoticTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PCPatchConstructTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PCDeflationTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static PCFailedReasons: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn PCCreate(arg1: MPI_Comm, arg2: *mut PC) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetType(arg1: PC, arg2: PCType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGetType(arg1: PC, arg2: *mut PCType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetUp(arg1: PC) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetFailedReason(arg1: PC, arg2: PCFailedReason) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGetFailedReason(arg1: PC, arg2: *mut PCFailedReason) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGetFailedReasonRank(arg1: PC, arg2: *mut PCFailedReason) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetUpOnBlocks(arg1: PC) -> PetscErrorCode;
}
extern "C" {
    pub fn PCApply(arg1: PC, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMatApply(arg1: PC, arg2: Mat, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCApplySymmetricLeft(arg1: PC, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PCApplySymmetricRight(arg1: PC, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PCApplyBAorAB(arg1: PC, arg2: PCSide, arg3: Vec, arg4: Vec, arg5: Vec)
        -> PetscErrorCode;
}
extern "C" {
    pub fn PCApplyTranspose(arg1: PC, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PCApplyTransposeExists(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCApplyBAorABTranspose(
        arg1: PC,
        arg2: PCSide,
        arg3: Vec,
        arg4: Vec,
        arg5: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetReusePreconditioner(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGetReusePreconditioner(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetErrorIfFailure(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCApplyRichardson(
        arg1: PC,
        arg2: Vec,
        arg3: Vec,
        arg4: Vec,
        arg5: PetscReal,
        arg6: PetscReal,
        arg7: PetscReal,
        arg8: PetscInt,
        arg9: PetscBool,
        arg10: *mut PetscInt,
        arg11: *mut PCRichardsonConvergedReason,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCApplyRichardsonExists(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetUseAmat(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGetUseAmat(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: PC) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCReset(arg1: PC) -> PetscErrorCode;
}
extern "C" {
    pub fn PCDestroy(arg1: *mut PC) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetFromOptions(arg1: PC) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorGetMatrix(arg1: PC, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetModifySubMatrices(
        arg1: PC,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PC,
                arg2: PetscInt,
                arg3: *const IS,
                arg4: *const IS,
                arg5: *mut Mat,
                arg6: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCModifySubMatrices(
        arg1: PC,
        arg2: PetscInt,
        arg3: *const IS,
        arg4: *const IS,
        arg5: *mut Mat,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetOperators(arg1: PC, arg2: Mat, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGetOperators(arg1: PC, arg2: *mut Mat, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGetOperatorsSet(
        arg1: PC,
        arg2: *mut PetscBool,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCView(arg1: PC, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PCLoad(arg1: PC, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PCViewFromOptions(
        arg1: PC,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetOptionsPrefix(arg1: PC, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PCAppendOptionsPrefix(arg1: PC, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGetOptionsPrefix(arg1: PC, arg2: *mut *const ::std::os::raw::c_char)
        -> PetscErrorCode;
}
extern "C" {
    pub fn PCComputeOperator(arg1: PC, arg2: MatType, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGetDiagonalScale(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCDiagonalScaleLeft(arg1: PC, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PCDiagonalScaleRight(arg1: PC, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetDiagonalScale(arg1: PC, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetDM(arg1: PC, arg2: DM) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGetDM(arg1: PC, arg2: *mut DM) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGetInterpolations(
        arg1: PC,
        arg2: *mut PetscInt,
        arg3: *mut *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGetCoarseOperators(pc: PC, arg1: *mut PetscInt, arg2: *mut *mut Mat)
        -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetCoordinates(
        arg1: PC,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetApplicationContext(arg1: PC, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGetApplicationContext(arg1: PC, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn PCJacobiSetType(arg1: PC, arg2: PCJacobiType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCJacobiGetType(arg1: PC, arg2: *mut PCJacobiType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCJacobiSetUseAbs(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCJacobiGetUseAbs(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCJacobiSetFixDiagonal(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCJacobiGetFixDiagonal(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSORSetSymmetric(arg1: PC, arg2: MatSORType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSORGetSymmetric(arg1: PC, arg2: *mut MatSORType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSORSetOmega(arg1: PC, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSORGetOmega(arg1: PC, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSORSetIterations(arg1: PC, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSORGetIterations(arg1: PC, arg2: *mut PetscInt, arg3: *mut PetscInt)
        -> PetscErrorCode;
}
extern "C" {
    pub fn PCEisenstatSetOmega(arg1: PC, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PCEisenstatGetOmega(arg1: PC, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PCEisenstatSetNoDiagonalScaling(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCEisenstatGetNoDiagonalScaling(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBJacobiSetTotalBlocks(
        arg1: PC,
        arg2: PetscInt,
        arg3: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBJacobiGetTotalBlocks(
        arg1: PC,
        arg2: *mut PetscInt,
        arg3: *mut *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBJacobiSetLocalBlocks(
        arg1: PC,
        arg2: PetscInt,
        arg3: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBJacobiGetLocalBlocks(
        arg1: PC,
        arg2: *mut PetscInt,
        arg3: *mut *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellSetApply(
        arg1: PC,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: PC, arg2: Vec, arg3: Vec) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellSetMatApply(
        arg1: PC,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: PC, arg2: Mat, arg3: Mat) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellSetApplySymmetricLeft(
        arg1: PC,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: PC, arg2: Vec, arg3: Vec) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellSetApplySymmetricRight(
        arg1: PC,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: PC, arg2: Vec, arg3: Vec) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellSetApplyBA(
        arg1: PC,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PC,
                arg2: PCSide,
                arg3: Vec,
                arg4: Vec,
                arg5: Vec,
            ) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellSetApplyTranspose(
        arg1: PC,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: PC, arg2: Vec, arg3: Vec) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellSetSetUp(
        arg1: PC,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: PC) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellSetApplyRichardson(
        arg1: PC,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PC,
                arg2: Vec,
                arg3: Vec,
                arg4: Vec,
                arg5: PetscReal,
                arg6: PetscReal,
                arg7: PetscReal,
                arg8: PetscInt,
                arg9: PetscBool,
                arg10: *mut PetscInt,
                arg11: *mut PCRichardsonConvergedReason,
            ) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellSetView(
        arg1: PC,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: PC, arg2: PetscViewer) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellSetDestroy(
        arg1: PC,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: PC) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellSetContext(arg1: PC, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellGetContext(arg1: PC, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellSetName(arg1: PC, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellGetName(arg1: PC, arg2: *mut *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorSetZeroPivot(arg1: PC, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorSetShiftType(arg1: PC, arg2: MatFactorShiftType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorSetShiftAmount(arg1: PC, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorSetMatSolverType(arg1: PC, arg2: MatSolverType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorGetMatSolverType(arg1: PC, arg2: *mut MatSolverType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorSetUpMatSolverType(arg1: PC) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorSetFill(arg1: PC, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorSetColumnPivot(arg1: PC, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorReorderForNonzeroDiagonal(arg1: PC, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorSetMatOrderingType(arg1: PC, arg2: MatOrderingType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorSetReuseOrdering(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorSetReuseFill(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorSetUseInPlace(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorGetUseInPlace(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorSetAllowDiagonalFill(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorGetAllowDiagonalFill(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorSetPivotInBlocks(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorSetLevels(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorGetLevels(arg1: PC, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorSetDropTolerance(
        arg1: PC,
        arg2: PetscReal,
        arg3: PetscReal,
        arg4: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorGetZeroPivot(arg1: PC, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorGetShiftAmount(arg1: PC, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFactorGetShiftType(arg1: PC, arg2: *mut MatFactorShiftType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMSetLocalSubdomains(
        arg1: PC,
        arg2: PetscInt,
        arg3: *mut IS,
        arg4: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMSetTotalSubdomains(
        arg1: PC,
        arg2: PetscInt,
        arg3: *mut IS,
        arg4: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMSetOverlap(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMSetDMSubdomains(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMGetDMSubdomains(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMSetSortIndices(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMSetType(arg1: PC, arg2: PCASMType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMGetType(arg1: PC, arg2: *mut PCASMType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMSetLocalType(arg1: PC, arg2: PCCompositeType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMGetLocalType(arg1: PC, arg2: *mut PCCompositeType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMCreateSubdomains(arg1: Mat, arg2: PetscInt, arg3: *mut *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMDestroySubdomains(arg1: PetscInt, arg2: *mut IS, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMCreateSubdomains2D(
        arg1: PetscInt,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: *mut PetscInt,
        arg8: *mut *mut IS,
        arg9: *mut *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMGetLocalSubdomains(
        arg1: PC,
        arg2: *mut PetscInt,
        arg3: *mut *mut IS,
        arg4: *mut *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMGetLocalSubmatrices(
        arg1: PC,
        arg2: *mut PetscInt,
        arg3: *mut *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMGetSubMatType(arg1: PC, arg2: *mut MatType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMSetSubMatType(arg1: PC, arg2: MatType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGASMSetTotalSubdomains(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGASMSetSubdomains(
        arg1: PC,
        arg2: PetscInt,
        arg3: *mut IS,
        arg4: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGASMSetOverlap(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGASMSetUseDMSubdomains(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGASMGetUseDMSubdomains(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGASMSetSortIndices(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGASMSetType(arg1: PC, arg2: PCGASMType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGASMCreateSubdomains(
        arg1: Mat,
        arg2: PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGASMDestroySubdomains(
        arg1: PetscInt,
        arg2: *mut *mut IS,
        arg3: *mut *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGASMCreateSubdomains2D(
        arg1: PC,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: *mut PetscInt,
        arg9: *mut *mut IS,
        arg10: *mut *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGASMGetSubdomains(
        arg1: PC,
        arg2: *mut PetscInt,
        arg3: *mut *mut IS,
        arg4: *mut *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGASMGetSubmatrices(
        arg1: PC,
        arg2: *mut PetscInt,
        arg3: *mut *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCCompositeSetType(arg1: PC, arg2: PCCompositeType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCCompositeGetType(arg1: PC, arg2: *mut PCCompositeType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCCompositeAddPCType(arg1: PC, arg2: PCType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCCompositeAddPC(arg1: PC, arg2: PC) -> PetscErrorCode;
}
extern "C" {
    pub fn PCCompositeGetNumberPC(arg1: PC, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCCompositeGetPC(arg1: PC, arg2: PetscInt, arg3: *mut PC) -> PetscErrorCode;
}
extern "C" {
    pub fn PCCompositeSpecialSetAlpha(arg1: PC, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn PCRedundantSetNumber(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCRedundantSetScatter(arg1: PC, arg2: VecScatter, arg3: VecScatter) -> PetscErrorCode;
}
extern "C" {
    pub fn PCRedundantGetOperators(arg1: PC, arg2: *mut Mat, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSPAISetEpsilon(arg1: PC, arg2: f64) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSPAISetNBSteps(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSPAISetMax(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSPAISetMaxNew(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSPAISetBlockSize(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSPAISetCacheSize(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSPAISetVerbose(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSPAISetSp(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHYPRESetType(arg1: PC, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHYPREGetType(arg1: PC, arg2: *mut *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHYPRESetDiscreteGradient(arg1: PC, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHYPRESetDiscreteCurl(arg1: PC, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHYPRESetInterpolations(
        arg1: PC,
        arg2: PetscInt,
        arg3: Mat,
        arg4: *mut Mat,
        arg5: Mat,
        arg6: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHYPRESetEdgeConstantVectors(
        arg1: PC,
        arg2: Vec,
        arg3: Vec,
        arg4: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHYPRESetAlphaPoissonMatrix(arg1: PC, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHYPRESetBetaPoissonMatrix(arg1: PC, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSetFields(
        arg1: PC,
        arg2: *const ::std::os::raw::c_char,
        arg3: PetscInt,
        arg4: *const PetscInt,
        arg5: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSetType(arg1: PC, arg2: PCCompositeType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitGetType(arg1: PC, arg2: *mut PCCompositeType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSetBlockSize(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSetIS(
        arg1: PC,
        arg2: *const ::std::os::raw::c_char,
        arg3: IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitGetIS(
        arg1: PC,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitGetISByIndex(arg1: PC, arg2: PetscInt, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitRestrictIS(arg1: PC, arg2: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSetDMSplits(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitGetDMSplits(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSetDiagUseAmat(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitGetDiagUseAmat(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSetOffDiagUseAmat(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitGetOffDiagUseAmat(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSchurPrecondition(
        arg1: PC,
        arg2: PCFieldSplitSchurPreType,
        arg3: Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSetSchurPre(
        arg1: PC,
        arg2: PCFieldSplitSchurPreType,
        arg3: Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitGetSchurPre(
        arg1: PC,
        arg2: *mut PCFieldSplitSchurPreType,
        arg3: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSetSchurFactType(
        arg1: PC,
        arg2: PCFieldSplitSchurFactType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSetSchurScale(arg1: PC, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitGetSchurBlocks(
        arg1: PC,
        arg2: *mut Mat,
        arg3: *mut Mat,
        arg4: *mut Mat,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSchurGetS(arg1: PC, S: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSchurRestoreS(arg1: PC, S: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitGetDetectSaddlePoint(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSetDetectSaddlePoint(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSetGKBTol(arg1: PC, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSetGKBNu(arg1: PC, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSetGKBMaxit(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSetGKBDelay(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGalerkinSetRestriction(arg1: PC, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGalerkinSetInterpolation(arg1: PC, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGalerkinSetComputeSubmatrix(
        arg1: PC,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PC,
                arg2: Mat,
                arg3: Mat,
                arg4: *mut Mat,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPythonSetType(arg1: PC, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPARMSSetGlobal(arg1: PC, arg2: PCPARMSGlobalType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPARMSSetLocal(arg1: PC, arg2: PCPARMSLocalType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPARMSSetSolveTolerances(arg1: PC, arg2: PetscReal, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPARMSSetSolveRestart(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPARMSSetNonsymPerm(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPARMSSetFill(
        arg1: PC,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetType(arg1: PC, arg2: PCGAMGType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGGetType(arg1: PC, arg2: *mut PCGAMGType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetProcEqLim(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetRepartition(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetUseSAEstEig(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetEstEigKSPMaxIt(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetEstEigKSPType(arg1: PC, arg2: *mut ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetEigenvalues(arg1: PC, arg2: PetscReal, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGASMSetUseAggs(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetUseParallelCoarseGridSolve(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetCpuPinCoarseGrids(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetCoarseGridLayoutType(arg1: PC, arg2: PCGAMGLayoutType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetThreshold(arg1: PC, arg2: *mut PetscReal, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetRankReductionFactors(
        arg1: PC,
        arg2: *mut PetscInt,
        arg3: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetThresholdScale(arg1: PC, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetCoarseEqLim(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetNlevels(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetNSmooths(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetSymGraph(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetSquareGraph(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGSetReuseInterpolation(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGFinalizePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGInitializePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGRegister(
        arg1: PCGAMGType,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: PC) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGClassicalSetType(arg1: PC, arg2: PCGAMGClassicalType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGAMGClassicalGetType(arg1: PC, arg2: *mut PCGAMGClassicalType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCSetDiscreteGradient(
        arg1: PC,
        arg2: Mat,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscBool,
        arg6: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCSetDivergenceMat(arg1: PC, arg2: Mat, arg3: PetscBool, arg4: IS)
        -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCSetChangeOfBasisMat(arg1: PC, arg2: Mat, arg3: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCSetPrimalVerticesIS(arg1: PC, arg2: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCSetPrimalVerticesLocalIS(arg1: PC, arg2: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCGetPrimalVerticesIS(arg1: PC, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCGetPrimalVerticesLocalIS(arg1: PC, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCSetCoarseningRatio(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCSetLevels(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCSetDirichletBoundaries(arg1: PC, arg2: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCSetDirichletBoundariesLocal(arg1: PC, arg2: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCGetDirichletBoundaries(arg1: PC, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCGetDirichletBoundariesLocal(arg1: PC, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCSetInterfaceExtType(arg1: PC, arg2: PCBDDCInterfaceExtType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCSetNeumannBoundaries(arg1: PC, arg2: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCSetNeumannBoundariesLocal(arg1: PC, arg2: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCGetNeumannBoundaries(arg1: PC, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCGetNeumannBoundariesLocal(arg1: PC, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCSetDofsSplitting(arg1: PC, arg2: PetscInt, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCSetDofsSplittingLocal(arg1: PC, arg2: PetscInt, arg3: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCSetLocalAdjacencyGraph(
        arg1: PC,
        arg2: PetscInt,
        arg3: *const PetscInt,
        arg4: *const PetscInt,
        arg5: PetscCopyMode,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCCreateFETIDPOperators(
        arg1: PC,
        arg2: PetscBool,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut Mat,
        arg5: *mut PC,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCMatFETIDPGetRHS(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCMatFETIDPGetSolution(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCFinalizePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn PCBDDCInitializePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn PCISSetUseStiffnessScaling(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCISSetSubdomainScalingFactor(arg1: PC, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn PCISSetSubdomainDiagonalScaling(arg1: PC, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub static mut PetscMGLevelId: PetscInt;
}
extern "C" {
    pub fn PCMGSetType(arg1: PC, arg2: PCMGType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGGetType(arg1: PC, arg2: *mut PCMGType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetLevels(arg1: PC, arg2: PetscInt, arg3: *mut MPI_Comm) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGGetLevels(arg1: PC, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetDistinctSmoothUp(arg1: PC) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetNumberSmooth(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetCycleType(arg1: PC, arg2: PCMGCycleType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetCycleTypeOnLevel(arg1: PC, arg2: PetscInt, arg3: PCMGCycleType)
        -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGMultiplicativeSetCycles(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetGalerkin(arg1: PC, arg2: PCMGGalerkinType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGGetGalerkin(arg1: PC, arg2: *mut PCMGGalerkinType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetAdaptInterpolation(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGGetAdaptInterpolation(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetAdaptCR(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGGetAdaptCR(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetRhs(arg1: PC, arg2: PetscInt, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetX(arg1: PC, arg2: PetscInt, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetR(arg1: PC, arg2: PetscInt, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetRestriction(arg1: PC, arg2: PetscInt, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGGetRestriction(arg1: PC, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetInjection(arg1: PC, arg2: PetscInt, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGGetInjection(arg1: PC, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetInterpolation(arg1: PC, arg2: PetscInt, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetOperators(arg1: PC, arg2: PetscInt, arg3: Mat, arg4: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGGetInterpolation(arg1: PC, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetRScale(arg1: PC, arg2: PetscInt, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGGetRScale(arg1: PC, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetResidual(
        arg1: PC,
        arg2: PetscInt,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: Mat, arg2: Vec, arg3: Vec, arg4: Vec) -> PetscErrorCode,
        >,
        arg4: Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGSetResidualTranspose(
        arg1: PC,
        arg2: PetscInt,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: Mat, arg2: Vec, arg3: Vec, arg4: Vec) -> PetscErrorCode,
        >,
        arg4: Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGResidualDefault(arg1: Mat, arg2: Vec, arg3: Vec, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGResidualTransposeDefault(
        arg1: Mat,
        arg2: Vec,
        arg3: Vec,
        arg4: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGMatResidualDefault(arg1: Mat, arg2: Mat, arg3: Mat, arg4: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGMatResidualTransposeDefault(
        arg1: Mat,
        arg2: Mat,
        arg3: Mat,
        arg4: Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHMGSetReuseInterpolation(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHMGSetUseSubspaceCoarsening(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHMGSetInnerPCType(arg1: PC, arg2: PCType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHMGSetCoarseningComponent(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHMGUseMatMAIJ(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCTelescopeGetSubcommType(arg1: PC, arg2: *mut PetscSubcommType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCTelescopeSetSubcommType(arg1: PC, arg2: PetscSubcommType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCTelescopeGetReductionFactor(arg1: PC, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCTelescopeSetReductionFactor(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCTelescopeGetIgnoreDM(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCTelescopeSetIgnoreDM(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCTelescopeGetUseCoarseDM(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCTelescopeSetUseCoarseDM(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCTelescopeGetIgnoreKSPComputeOperators(
        arg1: PC,
        arg2: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCTelescopeSetIgnoreKSPComputeOperators(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCTelescopeGetDM(arg1: PC, arg2: *mut DM) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchSetSaveOperators(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchGetSaveOperators(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchSetPrecomputeElementTensors(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchGetPrecomputeElementTensors(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchSetPartitionOfUnity(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchGetPartitionOfUnity(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchSetSubMatType(arg1: PC, arg2: MatType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchGetSubMatType(arg1: PC, arg2: *mut MatType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchSetCellNumbering(arg1: PC, arg2: PetscSection) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchGetCellNumbering(arg1: PC, arg2: *mut PetscSection) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchSetConstructType(
        arg1: PC,
        arg2: PCPatchConstructType,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PC,
                arg2: *mut PetscInt,
                arg3: *mut *mut IS,
                arg4: *mut IS,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchGetConstructType(
        arg1: PC,
        arg2: *mut PCPatchConstructType,
        arg3: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PC,
                arg2: *mut PetscInt,
                arg3: *mut *mut IS,
                arg4: *mut IS,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg4: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchSetDiscretisationInfo(
        arg1: PC,
        arg2: PetscInt,
        arg3: *mut DM,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut *const PetscInt,
        arg7: *const PetscInt,
        arg8: PetscInt,
        arg9: *const PetscInt,
        arg10: PetscInt,
        arg11: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchSetComputeOperator(
        arg1: PC,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PC,
                arg2: PetscInt,
                arg3: Vec,
                arg4: Mat,
                arg5: IS,
                arg6: PetscInt,
                arg7: *const PetscInt,
                arg8: *const PetscInt,
                arg9: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchSetComputeFunction(
        pc: PC,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PC,
                arg2: PetscInt,
                arg3: Vec,
                arg4: Vec,
                arg5: IS,
                arg6: PetscInt,
                arg7: *const PetscInt,
                arg8: *const PetscInt,
                arg9: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchSetComputeOperatorInteriorFacets(
        arg1: PC,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PC,
                arg2: PetscInt,
                arg3: Vec,
                arg4: Mat,
                arg5: IS,
                arg6: PetscInt,
                arg7: *const PetscInt,
                arg8: *const PetscInt,
                arg9: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPatchSetComputeFunctionInteriorFacets(
        pc: PC,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PC,
                arg2: PetscInt,
                arg3: Vec,
                arg4: Vec,
                arg5: IS,
                arg6: PetscInt,
                arg7: *const PetscInt,
                arg8: *const PetscInt,
                arg9: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCLMVMSetMatLMVM(arg1: PC, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCLMVMGetMatLMVM(arg1: PC, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCLMVMSetIS(arg1: PC, arg2: IS) -> PetscErrorCode;
}
extern "C" {
    pub fn PCLMVMClearIS(arg1: PC) -> PetscErrorCode;
}
extern "C" {
    pub fn PCExoticSetType(arg1: PC, arg2: PCExoticType) -> PetscErrorCode;
}
extern "C" {
    pub fn PCDeflationSetInitOnly(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCDeflationSetLevels(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCDeflationSetReductionFactor(arg1: PC, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCDeflationSetCorrectionFactor(arg1: PC, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn PCDeflationSetSpaceToCompute(
        arg1: PC,
        arg2: PCDeflationSpaceType,
        arg3: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCDeflationSetSpace(arg1: PC, arg2: Mat, arg3: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCDeflationSetProjectionNullSpaceMat(arg1: PC, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCDeflationSetCoarseMat(arg1: PC, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCDeflationGetPC(arg1: PC, arg2: *mut PC) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHPDDMSetAuxiliaryMat(
        arg1: PC,
        arg2: IS,
        arg3: Mat,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: Mat,
                arg2: PetscReal,
                arg3: Vec,
                arg4: Vec,
                arg5: PetscReal,
                arg6: IS,
                arg7: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHPDDMSetRHSMat(arg1: PC, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHPDDMHasNeumannMat(arg1: PC, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHPDDMSetCoarseCorrectionType(
        arg1: PC,
        arg2: PCHPDDMCoarseCorrectionType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHPDDMGetCoarseCorrectionType(
        arg1: PC,
        arg2: *mut PCHPDDMCoarseCorrectionType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHPDDMGetSTShareSubKSP(arg1: PC, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PCHPDDMFinalizePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn PCHPDDMInitializePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn KSPInitializePackage() -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_KSP {
    _unused: [u8; 0],
}
pub type KSP = *mut _p_KSP;
pub type KSPType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut KSP_CLASSID: PetscClassId;
}
extern "C" {
    pub static mut KSPGUESS_CLASSID: PetscClassId;
}
extern "C" {
    pub static mut DMKSP_CLASSID: PetscClassId;
}
extern "C" {
    pub fn KSPCreate(arg1: MPI_Comm, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetType(arg1: KSP, arg2: KSPType) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetType(arg1: KSP, arg2: *mut KSPType) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetUp(arg1: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetUpOnBlocks(arg1: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSolve(arg1: KSP, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSolveTranspose(arg1: KSP, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetUseExplicitTranspose(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMatSolve(arg1: KSP, arg2: Mat, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetMatSolveBatchSize(arg1: KSP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetMatSolveBatchSize(arg1: KSP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPReset(arg1: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPResetViewers(arg1: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPDestroy(arg1: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetReusePreconditioner(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetReusePreconditioner(arg1: KSP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetSkipPCSetFromOptions(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPCheckSolve(arg1: KSP, arg2: PC, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub static mut KSPList: PetscFunctionList;
}
extern "C" {
    pub static mut KSPGuessList: PetscFunctionList;
}
extern "C" {
    pub static mut KSPMonitorList: PetscFunctionList;
}
extern "C" {
    pub static mut KSPMonitorCreateList: PetscFunctionList;
}
extern "C" {
    pub static mut KSPMonitorDestroyList: PetscFunctionList;
}
extern "C" {
    pub fn KSPRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: KSP) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: PetscViewerType,
        arg3: PetscViewerFormat,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: PetscInt,
                arg3: PetscReal,
                arg4: *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PetscViewer,
                arg2: PetscViewerFormat,
                arg3: *mut ::std::os::raw::c_void,
                arg4: *mut *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg6: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut PetscViewerAndFormat) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetPCSide(arg1: KSP, arg2: PCSide) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetPCSide(arg1: KSP, arg2: *mut PCSide) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetTolerances(
        arg1: KSP,
        arg2: PetscReal,
        arg3: PetscReal,
        arg4: PetscReal,
        arg5: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetTolerances(
        arg1: KSP,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
        arg4: *mut PetscReal,
        arg5: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetInitialGuessNonzero(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetInitialGuessNonzero(arg1: KSP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetErrorIfNotConverged(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetErrorIfNotConverged(arg1: KSP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetComputeEigenvalues(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetComputeRitz(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetComputeEigenvalues(arg1: KSP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetComputeSingularValues(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetComputeSingularValues(arg1: KSP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetRhs(arg1: KSP, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetSolution(arg1: KSP, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetResidualNorm(arg1: KSP, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetIterationNumber(arg1: KSP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetTotalIterations(arg1: KSP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPCreateVecs(
        arg1: KSP,
        arg2: PetscInt,
        arg3: *mut *mut Vec,
        arg4: PetscInt,
        arg5: *mut *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetPreSolve(
        arg1: KSP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetPostSolve(
        arg1: KSP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetPC(arg1: KSP, arg2: PC) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetPC(arg1: KSP, arg2: *mut PC) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitor(arg1: KSP, arg2: PetscInt, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorSet(
        arg1: KSP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: PetscInt,
                arg3: PetscReal,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorCancel(arg1: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetMonitorContext(arg1: KSP, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetResidualHistory(
        arg1: KSP,
        arg2: *mut *const PetscReal,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetResidualHistory(
        arg1: KSP,
        arg2: *mut PetscReal,
        arg3: PetscInt,
        arg4: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetErrorHistory(
        arg1: KSP,
        arg2: *mut *const PetscReal,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetErrorHistory(
        arg1: KSP,
        arg2: *mut PetscReal,
        arg3: PetscInt,
        arg4: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPBuildSolutionDefault(arg1: KSP, arg2: Vec, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPBuildResidualDefault(
        arg1: KSP,
        arg2: Vec,
        arg3: Vec,
        arg4: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPDestroyDefault(arg1: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetWorkVecs(arg1: KSP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PCKSPGetKSP(arg1: PC, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn PCKSPSetKSP(arg1: PC, arg2: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn PCBJacobiGetSubKSP(
        arg1: PC,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut *mut KSP,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCASMGetSubKSP(
        arg1: PC,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut *mut KSP,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGASMGetSubKSP(
        arg1: PC,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut *mut KSP,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitGetSubKSP(
        arg1: PC,
        arg2: *mut PetscInt,
        arg3: *mut *mut KSP,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCFieldSplitSchurGetSubKSP(
        arg1: PC,
        arg2: *mut PetscInt,
        arg3: *mut *mut KSP,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGGetSmoother(arg1: PC, arg2: PetscInt, arg3: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGGetSmootherDown(arg1: PC, arg2: PetscInt, arg3: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGGetSmootherUp(arg1: PC, arg2: PetscInt, arg3: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGGetCoarseSolve(arg1: PC, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn PCGalerkinGetKSP(arg1: PC, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn PCDeflationGetCoarseKSP(arg1: PC, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub static mut PCMGCoarseList: PetscFunctionList;
}
extern "C" {
    pub fn PCMGRegisterCoarseSpaceConstructor(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PC,
                arg2: PetscInt,
                arg3: DM,
                arg4: KSP,
                arg5: PetscInt,
                arg6: *const Vec,
                arg7: *mut *mut Vec,
            ) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCMGGetCoarseSpaceConstructor(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PC,
                arg2: PetscInt,
                arg3: DM,
                arg4: KSP,
                arg5: PetscInt,
                arg6: *const Vec,
                arg7: *mut *mut Vec,
            ) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPBuildSolution(arg1: KSP, arg2: Vec, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPBuildResidual(arg1: KSP, arg2: Vec, arg3: Vec, arg4: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPRichardsonSetScale(arg1: KSP, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPRichardsonSetSelfScale(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPChebyshevSetEigenvalues(
        arg1: KSP,
        arg2: PetscReal,
        arg3: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPChebyshevEstEigSet(
        arg1: KSP,
        arg2: PetscReal,
        arg3: PetscReal,
        arg4: PetscReal,
        arg5: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPChebyshevEstEigSetUseNoisy(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPChebyshevEstEigGetKSP(arg1: KSP, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPComputeExtremeSingularValues(
        arg1: KSP,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPComputeEigenvalues(
        arg1: KSP,
        arg2: PetscInt,
        arg3: *mut PetscReal,
        arg4: *mut PetscReal,
        arg5: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPComputeEigenvaluesExplicitly(
        arg1: KSP,
        arg2: PetscInt,
        arg3: *mut PetscReal,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPComputeRitz(
        arg1: KSP,
        arg2: PetscBool,
        arg3: PetscBool,
        arg4: *mut PetscInt,
        arg5: *mut Vec,
        arg6: *mut PetscReal,
        arg7: *mut PetscReal,
    ) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum KSPFCDTruncationType {
    KSP_FCD_TRUNC_TYPE_STANDARD = 0,
    KSP_FCD_TRUNC_TYPE_NOTAY = 1,
}
extern "C" {
    pub static mut KSPFCDTruncationTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn KSPFCGSetMmax(arg1: KSP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPFCGGetMmax(arg1: KSP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPFCGSetNprealloc(arg1: KSP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPFCGGetNprealloc(arg1: KSP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPFCGSetTruncationType(arg1: KSP, arg2: KSPFCDTruncationType) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPFCGGetTruncationType(arg1: KSP, arg2: *mut KSPFCDTruncationType) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPIPEFCGSetMmax(arg1: KSP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPIPEFCGGetMmax(arg1: KSP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPIPEFCGSetNprealloc(arg1: KSP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPIPEFCGGetNprealloc(arg1: KSP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPIPEFCGSetTruncationType(arg1: KSP, arg2: KSPFCDTruncationType) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPIPEFCGGetTruncationType(
        arg1: KSP,
        arg2: *mut KSPFCDTruncationType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPIPEGCRSetMmax(arg1: KSP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPIPEGCRGetMmax(arg1: KSP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPIPEGCRSetNprealloc(arg1: KSP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPIPEGCRGetNprealloc(arg1: KSP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPIPEGCRSetTruncationType(arg1: KSP, arg2: KSPFCDTruncationType) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPIPEGCRGetTruncationType(
        arg1: KSP,
        arg2: *mut KSPFCDTruncationType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPIPEGCRSetUnrollW(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPIPEGCRGetUnrollW(arg1: KSP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGMRESSetRestart(arg1: KSP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGMRESGetRestart(arg1: KSP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGMRESSetHapTol(arg1: KSP, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGMRESSetBreakdownTolerance(arg1: KSP, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGMRESSetPreAllocateVectors(arg1: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGMRESSetOrthogonalization(
        arg1: KSP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: KSP, arg2: PetscInt) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGMRESGetOrthogonalization(
        arg1: KSP,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: KSP, arg2: PetscInt) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGMRESModifiedGramSchmidtOrthogonalization(
        arg1: KSP,
        arg2: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGMRESClassicalGramSchmidtOrthogonalization(
        arg1: KSP,
        arg2: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPLGMRESSetAugDim(arg1: KSP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPLGMRESSetConstant(arg1: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPIPEFGMRESSetShift(arg1: KSP, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGCRSetRestart(arg1: KSP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGCRGetRestart(arg1: KSP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGCRSetModifyPC(
        arg1: KSP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: PetscInt,
                arg3: PetscReal,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPFETIDPGetInnerBDDC(arg1: KSP, arg2: *mut PC) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPFETIDPSetInnerBDDC(arg1: KSP, arg2: PC) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPFETIDPGetInnerKSP(arg1: KSP, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPFETIDPSetPressureOperator(arg1: KSP, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPHPDDMSetDeflationSpace(arg1: KSP, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPHPDDMGetDeflationSpace(arg1: KSP, arg2: *mut Mat) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum KSPHPDDMType {
    KSP_HPDDM_TYPE_GMRES = 0,
    KSP_HPDDM_TYPE_BGMRES = 1,
    KSP_HPDDM_TYPE_CG = 2,
    KSP_HPDDM_TYPE_BCG = 3,
    KSP_HPDDM_TYPE_GCRODR = 4,
    KSP_HPDDM_TYPE_BGCRODR = 5,
    KSP_HPDDM_TYPE_BFBCG = 6,
    KSP_HPDDM_TYPE_PREONLY = 7,
}
extern "C" {
    pub static mut KSPHPDDMTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn KSPHPDDMSetType(arg1: KSP, arg2: KSPHPDDMType) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPHPDDMGetType(arg1: KSP, arg2: *mut KSPHPDDMType) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum KSPGMRESCGSRefinementType {
    KSP_GMRES_CGS_REFINE_NEVER = 0,
    KSP_GMRES_CGS_REFINE_IFNEEDED = 1,
    KSP_GMRES_CGS_REFINE_ALWAYS = 2,
}
extern "C" {
    pub static mut KSPGMRESCGSRefinementTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn KSPGMRESSetCGSRefinementType(
        arg1: KSP,
        arg2: KSPGMRESCGSRefinementType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGMRESGetCGSRefinementType(
        arg1: KSP,
        arg2: *mut KSPGMRESCGSRefinementType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPFGMRESModifyPCNoChange(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscReal,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPFGMRESModifyPCKSP(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscReal,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPFGMRESSetModifyPC(
        arg1: KSP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: PetscInt,
                arg3: PetscInt,
                arg4: PetscReal,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPQCGSetTrustRegionRadius(arg1: KSP, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPQCGGetQuadratic(arg1: KSP, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPQCGGetTrialStepNorm(arg1: KSP, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPBCGSLSetXRes(arg1: KSP, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPBCGSLSetPol(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPBCGSLSetEll(arg1: KSP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPBCGSLSetUsePseudoinverse(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetFromOptions(arg1: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPResetFromOptions(arg1: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPAddOptionsChecker(
        arg1: ::std::option::Option<unsafe extern "C" fn(arg1: KSP) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorSetFromOptions(
        arg1: KSP,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorLGCreate(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscInt,
        arg6: *mut *const ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
        arg11: *mut PetscDrawLG,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorResidual(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorResidualDraw(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorResidualDrawLG(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorResidualDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorResidualShort(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorResidualRange(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorTrueResidual(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorTrueResidualDraw(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorTrueResidualDrawLG(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorTrueResidualDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorTrueResidualMax(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorError(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorErrorDraw(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorErrorDrawLG(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorErrorDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorSolution(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorSolutionDraw(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorSolutionDrawLG(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorSolutionDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorSingularValue(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorSingularValueCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGMRESMonitorKrylov(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorDynamicTolerance(
        ksp: KSP,
        its: PetscInt,
        fnorm: PetscReal,
        dummy: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorDynamicToleranceDestroy(
        dummy: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorSAWs(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorSAWsCreate(
        arg1: KSP,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorSAWsDestroy(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPUnwindPreconditioner(arg1: KSP, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPInitialResidual(
        arg1: KSP,
        arg2: Vec,
        arg3: Vec,
        arg4: Vec,
        arg5: Vec,
        arg6: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetOperators(arg1: KSP, arg2: Mat, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetOperators(arg1: KSP, arg2: *mut Mat, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetOperatorsSet(
        arg1: KSP,
        arg2: *mut PetscBool,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetOptionsPrefix(arg1: KSP, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPAppendOptionsPrefix(arg1: KSP, arg2: *const ::std::os::raw::c_char)
        -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetOptionsPrefix(
        arg1: KSP,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetDiagonalScale(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetDiagonalScale(arg1: KSP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetDiagonalScaleFix(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetDiagonalScaleFix(arg1: KSP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPView(arg1: KSP, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPLoad(arg1: KSP, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPViewFromOptions(
        arg1: KSP,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPConvergedReasonView(arg1: KSP, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPConvergedReasonViewSet(
        arg1: KSP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: KSP, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
        vctx: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPConvergedReasonViewFromOptions(arg1: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPConvergedReasonViewCancel(arg1: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPConvergedRateView(arg1: KSP, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPLSQRSetExactMatNorm(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPLSQRSetComputeStandardErrorVec(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPLSQRGetStandardErrorVec(arg1: KSP, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPLSQRGetNorms(arg1: KSP, arg2: *mut PetscReal, arg3: *mut PetscReal)
        -> PetscErrorCode;
}
extern "C" {
    pub fn KSPLSQRMonitorResidual(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPLSQRMonitorResidualDrawLG(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPLSQRMonitorResidualDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCRedundantGetKSP(arg1: PC, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn PCRedistributeGetKSP(arg1: PC, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn PCTelescopeGetKSP(arg1: PC, arg2: *mut KSP) -> PetscErrorCode;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum KSPNormType {
    KSP_NORM_DEFAULT = -1,
    KSP_NORM_NONE = 0,
    KSP_NORM_PRECONDITIONED = 1,
    KSP_NORM_UNPRECONDITIONED = 2,
    KSP_NORM_NATURAL = 3,
}
extern "C" {
    pub static KSPNormTypes: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn KSPSetNormType(arg1: KSP, arg2: KSPNormType) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetNormType(arg1: KSP, arg2: *mut KSPNormType) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetSupportedNorm(
        ksp: KSP,
        arg1: KSPNormType,
        arg2: PCSide,
        arg3: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetCheckNormIteration(arg1: KSP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetLagNorm(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
impl KSPConvergedReason {
    pub const KSP_DIVERGED_PCSETUP_FAILED: KSPConvergedReason =
        KSPConvergedReason::KSP_DIVERGED_PC_FAILED;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum KSPConvergedReason {
    KSP_CONVERGED_RTOL_NORMAL = 1,
    KSP_CONVERGED_ATOL_NORMAL = 9,
    KSP_CONVERGED_RTOL = 2,
    KSP_CONVERGED_ATOL = 3,
    KSP_CONVERGED_ITS = 4,
    KSP_CONVERGED_CG_NEG_CURVE = 5,
    KSP_CONVERGED_CG_CONSTRAINED = 6,
    KSP_CONVERGED_STEP_LENGTH = 7,
    KSP_CONVERGED_HAPPY_BREAKDOWN = 8,
    KSP_DIVERGED_NULL = -2,
    KSP_DIVERGED_ITS = -3,
    KSP_DIVERGED_DTOL = -4,
    KSP_DIVERGED_BREAKDOWN = -5,
    KSP_DIVERGED_BREAKDOWN_BICG = -6,
    KSP_DIVERGED_NONSYMMETRIC = -7,
    KSP_DIVERGED_INDEFINITE_PC = -8,
    KSP_DIVERGED_NANORINF = -9,
    KSP_DIVERGED_INDEFINITE_MAT = -10,
    KSP_DIVERGED_PC_FAILED = -11,
    KSP_CONVERGED_ITERATING = 0,
}
extern "C" {
    pub static mut KSPConvergedReasons: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn KSPSetConvergenceTest(
        arg1: KSP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: PetscInt,
                arg3: PetscReal,
                arg4: *mut KSPConvergedReason,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetConvergenceTest(
        arg1: KSP,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: PetscInt,
                arg3: PetscReal,
                arg4: *mut KSPConvergedReason,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut *mut ::std::os::raw::c_void,
        arg4: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetAndClearConvergenceTest(
        arg1: KSP,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: PetscInt,
                arg3: PetscReal,
                arg4: *mut KSPConvergedReason,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut *mut ::std::os::raw::c_void,
        arg4: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetConvergenceContext(arg1: KSP, arg2: *mut ::std::os::raw::c_void)
        -> PetscErrorCode;
}
extern "C" {
    pub fn KSPConvergedDefault(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut KSPConvergedReason,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPLSQRConvergedDefault(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut KSPConvergedReason,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPConvergedDefaultDestroy(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPConvergedDefaultCreate(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPConvergedDefaultSetUIRNorm(arg1: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPConvergedDefaultSetUMIRNorm(arg1: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPConvergedDefaultSetConvergedMaxits(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPConvergedSkip(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut KSPConvergedReason,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetConvergedReason(arg1: KSP, arg2: *mut KSPConvergedReason) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetConvergedReasonString(
        arg1: KSP,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPComputeConvergenceRate(
        arg1: KSP,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
        arg4: *mut PetscReal,
        arg5: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPComputeOperator(arg1: KSP, arg2: MatType, arg3: *mut Mat) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum KSPCGType {
    KSP_CG_SYMMETRIC = 0,
    KSP_CG_HERMITIAN = 1,
}
extern "C" {
    pub static mut KSPCGTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn KSPCGSetType(arg1: KSP, arg2: KSPCGType) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPCGUseSingleReduction(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPCGSetRadius(arg1: KSP, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPCGGetNormD(arg1: KSP, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPCGGetObjFcn(arg1: KSP, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGLTRGetMinEig(arg1: KSP, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGLTRGetLambda(arg1: KSP, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPPythonSetType(arg1: KSP, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PCSetPreSolve(
        arg1: PC,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: PC, arg2: KSP) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPreSolve(arg1: PC, arg2: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn PCPostSolve(arg1: PC, arg2: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorLGRange(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellSetPreSolve(
        arg1: PC,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: PC, arg2: KSP, arg3: Vec, arg4: Vec) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PCShellSetPostSolve(
        arg1: PC,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: PC, arg2: KSP, arg3: Vec, arg4: Vec) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_KSPGuess {
    _unused: [u8; 0],
}
pub type KSPGuess = *mut _p_KSPGuess;
pub type KSPGuessType = *const ::std::os::raw::c_char;
extern "C" {
    pub fn KSPGuessRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: KSPGuess) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetGuess(arg1: KSP, arg2: KSPGuess) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetGuess(arg1: KSP, arg2: *mut KSPGuess) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGuessView(arg1: KSPGuess, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGuessDestroy(arg1: *mut KSPGuess) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGuessCreate(arg1: MPI_Comm, arg2: *mut KSPGuess) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGuessSetType(arg1: KSPGuess, arg2: KSPGuessType) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGuessGetType(arg1: KSPGuess, arg2: *mut KSPGuessType) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGuessSetUp(arg1: KSPGuess) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGuessUpdate(arg1: KSPGuess, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGuessFormGuess(arg1: KSPGuess, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGuessSetFromOptions(arg1: KSPGuess) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGuessFischerSetModel(
        arg1: KSPGuess,
        arg2: PetscInt,
        arg3: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetUseFischerGuess(arg1: KSP, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetInitialGuessKnoll(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetInitialGuessKnoll(arg1: KSP, arg2: *mut PetscBool) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatSchurComplementAinvType {
    MAT_SCHUR_COMPLEMENT_AINV_DIAG = 0,
    MAT_SCHUR_COMPLEMENT_AINV_LUMP = 1,
    MAT_SCHUR_COMPLEMENT_AINV_BLOCK_DIAG = 2,
}
extern "C" {
    pub static mut MatSchurComplementAinvTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MatLMVMSymBroydenScaleType {
    MAT_LMVM_SYMBROYDEN_SCALE_NONE = 0,
    MAT_LMVM_SYMBROYDEN_SCALE_SCALAR = 1,
    MAT_LMVM_SYMBROYDEN_SCALE_DIAGONAL = 2,
    MAT_LMVM_SYMBROYDEN_SCALE_USER = 3,
}
extern "C" {
    pub static mut MatLMVMSymBroydenScaleTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn MatCreateSchurComplement(
        arg1: Mat,
        arg2: Mat,
        arg3: Mat,
        arg4: Mat,
        arg5: Mat,
        arg6: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSchurComplementGetKSP(arg1: Mat, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSchurComplementSetKSP(arg1: Mat, arg2: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSchurComplementSetSubMatrices(
        arg1: Mat,
        arg2: Mat,
        arg3: Mat,
        arg4: Mat,
        arg5: Mat,
        arg6: Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSchurComplementUpdateSubMatrices(
        arg1: Mat,
        arg2: Mat,
        arg3: Mat,
        arg4: Mat,
        arg5: Mat,
        arg6: Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSchurComplementGetSubMatrices(
        arg1: Mat,
        arg2: *mut Mat,
        arg3: *mut Mat,
        arg4: *mut Mat,
        arg5: *mut Mat,
        arg6: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSchurComplementSetAinvType(
        arg1: Mat,
        arg2: MatSchurComplementAinvType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSchurComplementGetAinvType(
        arg1: Mat,
        arg2: *mut MatSchurComplementAinvType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSchurComplementGetPmat(arg1: Mat, arg2: MatReuse, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSchurComplementComputeExplicitOperator(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatGetSchurComplement(
        arg1: Mat,
        arg2: IS,
        arg3: IS,
        arg4: IS,
        arg5: IS,
        arg6: MatReuse,
        arg7: *mut Mat,
        arg8: MatSchurComplementAinvType,
        arg9: MatReuse,
        arg10: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSchurComplementPmat(
        arg1: Mat,
        arg2: Mat,
        arg3: Mat,
        arg4: Mat,
        arg5: MatSchurComplementAinvType,
        arg6: MatReuse,
        arg7: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateLMVMDFP(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateLMVMBFGS(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateLMVMSR1(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateLMVMBroyden(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateLMVMBadBroyden(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateLMVMSymBroyden(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateLMVMSymBadBroyden(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateLMVMDiagBroyden(
        arg1: MPI_Comm,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMUpdate(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMIsAllocated(arg1: Mat, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMAllocate(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMReset(arg1: Mat, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMResetShift(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMClearJ0(arg1: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMSetJ0(arg1: Mat, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMSetJ0Scale(arg1: Mat, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMSetJ0Diag(arg1: Mat, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMSetJ0PC(arg1: Mat, arg2: PC) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMSetJ0KSP(arg1: Mat, arg2: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMApplyJ0Fwd(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMApplyJ0Inv(arg1: Mat, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMGetJ0(arg1: Mat, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMGetJ0PC(arg1: Mat, arg2: *mut PC) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMGetJ0KSP(arg1: Mat, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMSetHistorySize(arg1: Mat, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMGetUpdateCount(arg1: Mat, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMGetRejectCount(arg1: Mat, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMSymBroydenSetDelta(arg1: Mat, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn MatLMVMSymBroydenSetScaleType(
        arg1: Mat,
        arg2: MatLMVMSymBroydenScaleType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetDM(arg1: KSP, arg2: DM) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetDMActive(arg1: KSP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetDM(arg1: KSP, arg2: *mut DM) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetApplicationContext(arg1: KSP, arg2: *mut ::std::os::raw::c_void)
        -> PetscErrorCode;
}
extern "C" {
    pub fn KSPGetApplicationContext(arg1: KSP, arg2: *mut ::std::os::raw::c_void)
        -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetComputeRHS(
        arg1: KSP,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: Vec,
                arg3: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetComputeOperators(
        arg1: KSP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: Mat,
                arg3: Mat,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPSetComputeInitialGuess(
        arg1: KSP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: Vec,
                arg3: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMKSPSetComputeOperators(
        arg1: DM,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: Mat,
                arg3: Mat,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMKSPGetComputeOperators(
        arg1: DM,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: Mat,
                arg3: Mat,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMKSPSetComputeRHS(
        arg1: DM,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: Vec,
                arg3: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMKSPGetComputeRHS(
        arg1: DM,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: Vec,
                arg3: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMKSPSetComputeInitialGuess(
        arg1: DM,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: Vec,
                arg3: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMKSPGetComputeInitialGuess(
        arg1: DM,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: KSP,
                arg2: Vec,
                arg3: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMGlobalToLocalSolve(arg1: DM, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn DMProjectField(
        arg1: DM,
        arg2: PetscReal,
        arg3: Vec,
        arg4: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PetscInt,
                arg2: PetscInt,
                arg3: PetscInt,
                arg4: *const PetscInt,
                arg5: *const PetscInt,
                arg6: *const PetscScalar,
                arg7: *const PetscScalar,
                arg8: *const PetscScalar,
                arg9: *const PetscInt,
                arg10: *const PetscInt,
                arg11: *const PetscScalar,
                arg12: *const PetscScalar,
                arg13: *const PetscScalar,
                arg14: PetscReal,
                arg15: *const PetscReal,
                arg16: PetscInt,
                arg17: *const PetscScalar,
                arg18: *mut PetscScalar,
            ),
        >,
        arg5: InsertMode,
        arg6: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMAdaptInterpolator(
        arg1: DM,
        arg2: DM,
        arg3: Mat,
        arg4: KSP,
        arg5: PetscInt,
        arg6: *mut Vec,
        arg7: *mut Vec,
        arg8: *mut Mat,
        arg9: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMCheckInterpolator(
        arg1: DM,
        arg2: Mat,
        arg3: PetscInt,
        arg4: *mut Vec,
        arg5: *mut Vec,
        arg6: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn STInitializePackage() -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_ST {
    _unused: [u8; 0],
}
pub type ST = *mut _p_ST;
pub type STType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut ST_CLASSID: PetscClassId;
}
extern "C" {
    pub fn STCreate(arg1: MPI_Comm, arg2: *mut ST) -> PetscErrorCode;
}
extern "C" {
    pub fn STDestroy(arg1: *mut ST) -> PetscErrorCode;
}
extern "C" {
    pub fn STReset(arg1: ST) -> PetscErrorCode;
}
extern "C" {
    pub fn STSetType(arg1: ST, arg2: STType) -> PetscErrorCode;
}
extern "C" {
    pub fn STGetType(arg1: ST, arg2: *mut STType) -> PetscErrorCode;
}
extern "C" {
    pub fn STSetMatrices(arg1: ST, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn STGetMatrix(arg1: ST, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn STGetMatrixTransformed(arg1: ST, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn STGetNumMatrices(arg1: ST, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn STGetOperator(arg1: ST, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn STRestoreOperator(arg1: ST, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn STSetUp(arg1: ST) -> PetscErrorCode;
}
extern "C" {
    pub fn STSetFromOptions(arg1: ST) -> PetscErrorCode;
}
extern "C" {
    pub fn STView(arg1: ST, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn STViewFromOptions(
        arg1: ST,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn STApply(arg1: ST, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn STApplyMat(arg1: ST, arg2: Mat, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn STApplyTranspose(arg1: ST, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn STApplyHermitianTranspose(arg1: ST, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn STMatMult(arg1: ST, arg2: PetscInt, arg3: Vec, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn STMatMultTranspose(arg1: ST, arg2: PetscInt, arg3: Vec, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn STMatSolve(arg1: ST, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn STMatSolveTranspose(arg1: ST, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn STMatMatSolve(arg1: ST, arg2: Mat, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn STGetBilinearForm(arg1: ST, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn STMatSetUp(arg1: ST, arg2: PetscScalar, arg3: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn STPostSolve(arg1: ST) -> PetscErrorCode;
}
extern "C" {
    pub fn STResetMatrixState(arg1: ST) -> PetscErrorCode;
}
extern "C" {
    pub fn STSetWorkVecs(arg1: ST, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn STSetKSP(arg1: ST, arg2: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn STGetKSP(arg1: ST, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn STSetShift(arg1: ST, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn STGetShift(arg1: ST, arg2: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn STSetDefaultShift(arg1: ST, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn STScaleShift(arg1: ST, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn STSetBalanceMatrix(arg1: ST, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn STGetBalanceMatrix(arg1: ST, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn STSetTransform(arg1: ST, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn STGetTransform(arg1: ST, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn STSetOptionsPrefix(arg1: ST, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn STAppendOptionsPrefix(arg1: ST, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn STGetOptionsPrefix(arg1: ST, arg2: *mut *const ::std::os::raw::c_char)
        -> PetscErrorCode;
}
extern "C" {
    pub fn STBackTransform(
        arg1: ST,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
        arg4: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn STIsInjective(arg1: ST, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn STCheckNullSpace(arg1: ST, arg2: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn STSetPreconditionerMat(arg1: ST, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn STGetPreconditionerMat(arg1: ST, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn STMatCreateVecs(arg1: ST, arg2: *mut Vec, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn STMatCreateVecsEmpty(arg1: ST, arg2: *mut Vec, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn STMatGetSize(arg1: ST, arg2: *mut PetscInt, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn STMatGetLocalSize(arg1: ST, arg2: *mut PetscInt, arg3: *mut PetscInt) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum STMatMode {
    ST_MATMODE_COPY = 0,
    ST_MATMODE_INPLACE = 1,
    ST_MATMODE_SHELL = 2,
}
extern "C" {
    pub static mut STMatModes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn STSetMatMode(arg1: ST, arg2: STMatMode) -> PetscErrorCode;
}
extern "C" {
    pub fn STGetMatMode(arg1: ST, arg2: *mut STMatMode) -> PetscErrorCode;
}
extern "C" {
    pub fn STSetMatStructure(arg1: ST, arg2: MatStructure) -> PetscErrorCode;
}
extern "C" {
    pub fn STGetMatStructure(arg1: ST, arg2: *mut MatStructure) -> PetscErrorCode;
}
extern "C" {
    pub static mut STList: PetscFunctionList;
}
extern "C" {
    pub fn STRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ST) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn STShellGetContext(arg1: ST, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn STShellSetContext(arg1: ST, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn STShellSetApply(
        arg1: ST,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: ST, arg2: Vec, arg3: Vec) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn STShellSetApplyTranspose(
        arg1: ST,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: ST, arg2: Vec, arg3: Vec) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn STShellSetBackTransform(
        arg1: ST,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ST,
                arg2: PetscInt,
                arg3: *mut PetscScalar,
                arg4: *mut PetscScalar,
            ) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn STCayleyGetAntishift(arg1: ST, arg2: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn STCayleySetAntishift(arg1: ST, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn STPrecondGetKSPHasMat(arg1: ST, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn STPrecondSetKSPHasMat(arg1: ST, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn STFilterSetInterval(arg1: ST, arg2: PetscReal, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn STFilterGetInterval(
        arg1: ST,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn STFilterSetRange(arg1: ST, arg2: PetscReal, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn STFilterGetRange(arg1: ST, arg2: *mut PetscReal, arg3: *mut PetscReal)
        -> PetscErrorCode;
}
extern "C" {
    pub fn STFilterSetDegree(arg1: ST, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn STFilterGetDegree(arg1: ST, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn STFilterGetThreshold(arg1: ST, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn FNInitializePackage() -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_FN {
    _unused: [u8; 0],
}
pub type FN = *mut _p_FN;
pub type FNType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut FN_CLASSID: PetscClassId;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FNCombineType {
    FN_COMBINE_ADD = 0,
    FN_COMBINE_MULTIPLY = 1,
    FN_COMBINE_DIVIDE = 2,
    FN_COMBINE_COMPOSE = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FNParallelType {
    FN_PARALLEL_REDUNDANT = 0,
    FN_PARALLEL_SYNCHRONIZED = 1,
}
extern "C" {
    pub static mut FNParallelTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn FNCreate(arg1: MPI_Comm, arg2: *mut FN) -> PetscErrorCode;
}
extern "C" {
    pub fn FNSetType(arg1: FN, arg2: FNType) -> PetscErrorCode;
}
extern "C" {
    pub fn FNGetType(arg1: FN, arg2: *mut FNType) -> PetscErrorCode;
}
extern "C" {
    pub fn FNSetOptionsPrefix(arg1: FN, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn FNAppendOptionsPrefix(arg1: FN, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn FNGetOptionsPrefix(arg1: FN, arg2: *mut *const ::std::os::raw::c_char)
        -> PetscErrorCode;
}
extern "C" {
    pub fn FNSetFromOptions(arg1: FN) -> PetscErrorCode;
}
extern "C" {
    pub fn FNView(arg1: FN, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn FNViewFromOptions(
        arg1: FN,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn FNDestroy(arg1: *mut FN) -> PetscErrorCode;
}
extern "C" {
    pub fn FNDuplicate(arg1: FN, arg2: MPI_Comm, arg3: *mut FN) -> PetscErrorCode;
}
extern "C" {
    pub fn FNSetScale(arg1: FN, arg2: PetscScalar, arg3: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn FNGetScale(arg1: FN, arg2: *mut PetscScalar, arg3: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn FNSetMethod(arg1: FN, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn FNGetMethod(arg1: FN, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn FNSetParallel(arg1: FN, arg2: FNParallelType) -> PetscErrorCode;
}
extern "C" {
    pub fn FNGetParallel(arg1: FN, arg2: *mut FNParallelType) -> PetscErrorCode;
}
extern "C" {
    pub fn FNEvaluateFunction(
        arg1: FN,
        arg2: PetscScalar,
        arg3: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn FNEvaluateDerivative(
        arg1: FN,
        arg2: PetscScalar,
        arg3: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn FNEvaluateFunctionMat(arg1: FN, arg2: Mat, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn FNEvaluateFunctionMatVec(arg1: FN, arg2: Mat, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub static mut FNList: PetscFunctionList;
}
extern "C" {
    pub fn FNRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: FN) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn FNRationalSetNumerator(
        arg1: FN,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn FNRationalGetNumerator(
        arg1: FN,
        arg2: *mut PetscInt,
        arg3: *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn FNRationalSetDenominator(
        arg1: FN,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn FNRationalGetDenominator(
        arg1: FN,
        arg2: *mut PetscInt,
        arg3: *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn FNCombineSetChildren(
        arg1: FN,
        arg2: FNCombineType,
        arg3: FN,
        arg4: FN,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn FNCombineGetChildren(
        arg1: FN,
        arg2: *mut FNCombineType,
        arg3: *mut FN,
        arg4: *mut FN,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn FNPhiSetIndex(arg1: FN, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn FNPhiGetIndex(arg1: FN, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn RGInitializePackage() -> PetscErrorCode;
}
pub type RGType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut RG_CLASSID: PetscClassId;
}
extern "C" {
    pub fn RGCreate(arg1: MPI_Comm, arg2: *mut RG) -> PetscErrorCode;
}
extern "C" {
    pub fn RGSetType(arg1: RG, arg2: RGType) -> PetscErrorCode;
}
extern "C" {
    pub fn RGGetType(arg1: RG, arg2: *mut RGType) -> PetscErrorCode;
}
extern "C" {
    pub fn RGSetOptionsPrefix(arg1: RG, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn RGAppendOptionsPrefix(arg1: RG, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn RGGetOptionsPrefix(arg1: RG, arg2: *mut *const ::std::os::raw::c_char)
        -> PetscErrorCode;
}
extern "C" {
    pub fn RGSetFromOptions(arg1: RG) -> PetscErrorCode;
}
extern "C" {
    pub fn RGView(arg1: RG, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn RGViewFromOptions(
        arg1: RG,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn RGDestroy(arg1: *mut RG) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum RGQuadRule {
    RG_QUADRULE_TRAPEZOIDAL = 1,
    RG_QUADRULE_CHEBYSHEV = 2,
}
extern "C" {
    pub fn RGIsTrivial(arg1: RG, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn RGSetComplement(arg1: RG, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn RGGetComplement(arg1: RG, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn RGSetScale(arg1: RG, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn RGGetScale(arg1: RG, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn RGPushScale(arg1: RG, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn RGPopScale(arg1: RG) -> PetscErrorCode;
}
extern "C" {
    pub fn RGCheckInside(
        arg1: RG,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
        arg4: *mut PetscScalar,
        arg5: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn RGIsAxisymmetric(arg1: RG, arg2: PetscBool, arg3: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn RGCanUseConjugates(arg1: RG, arg2: PetscBool, arg3: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn RGComputeContour(
        arg1: RG,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
        arg4: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn RGComputeBoundingBox(
        arg1: RG,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
        arg4: *mut PetscReal,
        arg5: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn RGComputeQuadrature(
        arg1: RG,
        arg2: RGQuadRule,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut RGList: PetscFunctionList;
}
extern "C" {
    pub fn RGRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: RG) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn RGEllipseSetParameters(
        arg1: RG,
        arg2: PetscScalar,
        arg3: PetscReal,
        arg4: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn RGEllipseGetParameters(
        arg1: RG,
        arg2: *mut PetscScalar,
        arg3: *mut PetscReal,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn RGIntervalSetEndpoints(
        arg1: RG,
        arg2: PetscReal,
        arg3: PetscReal,
        arg4: PetscReal,
        arg5: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn RGIntervalGetEndpoints(
        arg1: RG,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
        arg4: *mut PetscReal,
        arg5: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn RGPolygonSetVertices(
        arg1: RG,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
        arg4: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn RGPolygonGetVertices(
        arg1: RG,
        arg2: *mut PetscInt,
        arg3: *mut *mut PetscScalar,
        arg4: *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn RGRingSetParameters(
        arg1: RG,
        arg2: PetscScalar,
        arg3: PetscReal,
        arg4: PetscReal,
        arg5: PetscReal,
        arg6: PetscReal,
        arg7: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn RGRingGetParameters(
        arg1: RG,
        arg2: *mut PetscScalar,
        arg3: *mut PetscReal,
        arg4: *mut PetscReal,
        arg5: *mut PetscReal,
        arg6: *mut PetscReal,
        arg7: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSInitializePackage() -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_DS {
    _unused: [u8; 0],
}
pub type DS = *mut _p_DS;
pub type DSType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut DS_CLASSID: PetscClassId;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DSStateType {
    DS_STATE_RAW = 0,
    DS_STATE_INTERMEDIATE = 1,
    DS_STATE_CONDENSED = 2,
    DS_STATE_TRUNCATED = 3,
}
extern "C" {
    pub static mut DSStateTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DSMatType {
    DS_MAT_A = 0,
    DS_MAT_B = 1,
    DS_MAT_C = 2,
    DS_MAT_T = 3,
    DS_MAT_D = 4,
    DS_MAT_Q = 5,
    DS_MAT_Z = 6,
    DS_MAT_X = 7,
    DS_MAT_Y = 8,
    DS_MAT_U = 9,
    DS_MAT_V = 10,
    DS_MAT_W = 11,
    DS_MAT_E0 = 12,
    DS_MAT_E1 = 13,
    DS_MAT_E2 = 14,
    DS_MAT_E3 = 15,
    DS_MAT_E4 = 16,
    DS_MAT_E5 = 17,
    DS_MAT_E6 = 18,
    DS_MAT_E7 = 19,
    DS_MAT_E8 = 20,
    DS_MAT_E9 = 21,
    DS_NUM_MAT = 22,
}
extern "C" {
    pub static mut DSMatExtra: [DSMatType; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DSParallelType {
    DS_PARALLEL_REDUNDANT = 0,
    DS_PARALLEL_SYNCHRONIZED = 1,
    DS_PARALLEL_DISTRIBUTED = 2,
}
extern "C" {
    pub static mut DSParallelTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn DSCreate(arg1: MPI_Comm, arg2: *mut DS) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSetType(arg1: DS, arg2: DSType) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetType(arg1: DS, arg2: *mut DSType) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSetOptionsPrefix(arg1: DS, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn DSAppendOptionsPrefix(arg1: DS, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetOptionsPrefix(arg1: DS, arg2: *mut *const ::std::os::raw::c_char)
        -> PetscErrorCode;
}
extern "C" {
    pub fn DSSetFromOptions(arg1: DS) -> PetscErrorCode;
}
extern "C" {
    pub fn DSView(arg1: DS, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn DSViewFromOptions(
        arg1: DS,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSViewMat(arg1: DS, arg2: PetscViewer, arg3: DSMatType) -> PetscErrorCode;
}
extern "C" {
    pub fn DSDestroy(arg1: *mut DS) -> PetscErrorCode;
}
extern "C" {
    pub fn DSReset(arg1: DS) -> PetscErrorCode;
}
extern "C" {
    pub fn DSDuplicate(arg1: DS, arg2: *mut DS) -> PetscErrorCode;
}
extern "C" {
    pub fn DSAllocate(arg1: DS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetLeadingDimension(arg1: DS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSetState(arg1: DS, arg2: DSStateType) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetState(arg1: DS, arg2: *mut DSStateType) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSetDimensions(
        arg1: DS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetDimensions(
        arg1: DS,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSetBlockSize(arg1: DS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetBlockSize(arg1: DS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetTruncateSize(
        arg1: DS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSTruncate(arg1: DS, arg2: PetscInt, arg3: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSetIdentity(arg1: DS, arg2: DSMatType) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSetMethod(arg1: DS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetMethod(arg1: DS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSetParallel(arg1: DS, arg2: DSParallelType) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetParallel(arg1: DS, arg2: *mut DSParallelType) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSetCompact(arg1: DS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetCompact(arg1: DS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSetExtraRow(arg1: DS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetExtraRow(arg1: DS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSetRefined(arg1: DS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetRefined(arg1: DS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetMat(arg1: DS, arg2: DSMatType, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn DSRestoreMat(arg1: DS, arg2: DSMatType, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetArray(arg1: DS, arg2: DSMatType, arg3: *mut *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn DSRestoreArray(arg1: DS, arg2: DSMatType, arg3: *mut *mut PetscScalar)
        -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetArrayReal(arg1: DS, arg2: DSMatType, arg3: *mut *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn DSRestoreArrayReal(
        arg1: DS,
        arg2: DSMatType,
        arg3: *mut *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSVectors(
        arg1: DS,
        arg2: DSMatType,
        arg3: *mut PetscInt,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSolve(arg1: DS, arg2: *mut PetscScalar, arg3: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSort(
        arg1: DS,
        arg2: *mut PetscScalar,
        arg3: *mut PetscScalar,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSortWithPermutation(
        arg1: DS,
        arg2: *mut PetscInt,
        arg3: *mut PetscScalar,
        arg4: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSynchronize(
        arg1: DS,
        arg2: *mut PetscScalar,
        arg3: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSCopyMat(
        arg1: DS,
        arg2: DSMatType,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: Mat,
        arg6: PetscInt,
        arg7: PetscInt,
        arg8: PetscInt,
        arg9: PetscInt,
        arg10: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSMatGetSize(
        arg1: DS,
        arg2: DSMatType,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSMatIsHermitian(arg1: DS, arg2: DSMatType, arg3: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSetSlepcSC(arg1: DS, arg2: SlepcSC) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGetSlepcSC(arg1: DS, arg2: *mut SlepcSC) -> PetscErrorCode;
}
extern "C" {
    pub fn DSUpdateExtraRow(arg1: DS) -> PetscErrorCode;
}
extern "C" {
    pub fn DSCond(arg1: DS, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn DSTranslateHarmonic(
        arg1: DS,
        arg2: PetscScalar,
        arg3: PetscReal,
        arg4: PetscBool,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSTranslateRKS(arg1: DS, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn DSOrthogonalize(
        arg1: DS,
        arg2: DSMatType,
        arg3: PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSPseudoOrthogonalize(
        arg1: DS,
        arg2: DSMatType,
        arg3: PetscInt,
        arg4: *mut PetscReal,
        arg5: *mut PetscInt,
        arg6: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSVDSetDimensions(arg1: DS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSSVDGetDimensions(arg1: DS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGSVDSetDimensions(arg1: DS, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSGSVDGetDimensions(
        arg1: DS,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSPEPSetDegree(arg1: DS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSPEPGetDegree(arg1: DS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSPEPSetCoefficients(arg1: DS, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn DSPEPGetCoefficients(arg1: DS, arg2: *mut *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn DSNEPSetFN(arg1: DS, arg2: PetscInt, arg3: *mut FN) -> PetscErrorCode;
}
extern "C" {
    pub fn DSNEPGetFN(arg1: DS, arg2: PetscInt, arg3: *mut FN) -> PetscErrorCode;
}
extern "C" {
    pub fn DSNEPGetNumFN(arg1: DS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSNEPSetMinimality(arg1: DS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSNEPGetMinimality(arg1: DS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSNEPSetRefine(arg1: DS, arg2: PetscReal, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSNEPGetRefine(arg1: DS, arg2: *mut PetscReal, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSNEPSetIntegrationPoints(arg1: DS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSNEPGetIntegrationPoints(arg1: DS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSNEPSetSamplingSize(arg1: DS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSNEPGetSamplingSize(arg1: DS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn DSNEPSetRG(arg1: DS, arg2: RG) -> PetscErrorCode;
}
extern "C" {
    pub fn DSNEPGetRG(arg1: DS, arg2: *mut RG) -> PetscErrorCode;
}
extern "C" {
    pub fn DSNEPSetComputeMatrixFunction(
        arg1: DS,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: DS,
                arg2: PetscScalar,
                arg3: PetscBool,
                arg4: DSMatType,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DSNEPGetComputeMatrixFunction(
        arg1: DS,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: DS,
                arg2: PetscScalar,
                arg3: PetscBool,
                arg4: DSMatType,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut DSList: PetscFunctionList;
}
extern "C" {
    pub fn DSRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: DS) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEInitializePackage() -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_LME {
    _unused: [u8; 0],
}
pub type LME = *mut _p_LME;
pub type LMEType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut LME_CLASSID: PetscClassId;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum LMEProblemType {
    LME_LYAPUNOV = 0,
    LME_SYLVESTER = 1,
    LME_GEN_LYAPUNOV = 2,
    LME_GEN_SYLVESTER = 3,
    LME_DT_LYAPUNOV = 4,
    LME_STEIN = 5,
}
extern "C" {
    pub static mut LMEProblemTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn LMECreate(arg1: MPI_Comm, arg2: *mut LME) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEDestroy(arg1: *mut LME) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEReset(arg1: LME) -> PetscErrorCode;
}
extern "C" {
    pub fn LMESetType(arg1: LME, arg2: LMEType) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEGetType(arg1: LME, arg2: *mut LMEType) -> PetscErrorCode;
}
extern "C" {
    pub fn LMESetProblemType(arg1: LME, arg2: LMEProblemType) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEGetProblemType(arg1: LME, arg2: *mut LMEProblemType) -> PetscErrorCode;
}
extern "C" {
    pub fn LMESetCoefficients(
        arg1: LME,
        arg2: Mat,
        arg3: Mat,
        arg4: Mat,
        arg5: Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEGetCoefficients(
        arg1: LME,
        arg2: *mut Mat,
        arg3: *mut Mat,
        arg4: *mut Mat,
        arg5: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn LMESetRHS(arg1: LME, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEGetRHS(arg1: LME, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn LMESetSolution(arg1: LME, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEGetSolution(arg1: LME, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn LMESetFromOptions(arg1: LME) -> PetscErrorCode;
}
extern "C" {
    pub fn LMESetUp(arg1: LME) -> PetscErrorCode;
}
extern "C" {
    pub fn LMESolve(arg1: LME) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEView(arg1: LME, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEViewFromOptions(
        arg1: LME,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEConvergedReasonView(arg1: LME, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEConvergedReasonViewFromOptions(arg1: LME) -> PetscErrorCode;
}
extern "C" {
    pub fn LMESetBV(arg1: LME, arg2: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEGetBV(arg1: LME, arg2: *mut BV) -> PetscErrorCode;
}
extern "C" {
    pub fn LMESetTolerances(arg1: LME, arg2: PetscReal, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEGetTolerances(arg1: LME, arg2: *mut PetscReal, arg3: *mut PetscInt)
        -> PetscErrorCode;
}
extern "C" {
    pub fn LMESetDimensions(arg1: LME, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEGetDimensions(arg1: LME, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEGetIterationNumber(arg1: LME, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEGetErrorEstimate(arg1: LME, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEComputeError(arg1: LME, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn LMESetErrorIfNotConverged(arg1: LME, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEGetErrorIfNotConverged(arg1: LME, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEDenseLyapunov(
        arg1: LME,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
        arg4: PetscInt,
        arg5: *mut PetscScalar,
        arg6: PetscInt,
        arg7: *mut PetscScalar,
        arg8: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEDenseHessLyapunovChol(
        arg1: LME,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut PetscScalar,
        arg7: PetscInt,
        arg8: *mut PetscScalar,
        arg9: PetscInt,
        arg10: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEMonitor(arg1: LME, arg2: PetscInt, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEMonitorSet(
        arg1: LME,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: LME,
                arg2: PetscInt,
                arg3: PetscReal,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEMonitorCancel(arg1: LME) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEGetMonitorContext(arg1: LME, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEMonitorSetFromOptions(
        arg1: LME,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEMonitorLGCreate(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscInt,
        arg6: *mut *const ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
        arg11: *mut PetscDrawLG,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEMonitorDefault(
        arg1: LME,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEMonitorDefaultDrawLG(
        arg1: LME,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEMonitorDefaultDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn LMESetOptionsPrefix(arg1: LME, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEAppendOptionsPrefix(arg1: LME, arg2: *const ::std::os::raw::c_char)
        -> PetscErrorCode;
}
extern "C" {
    pub fn LMEGetOptionsPrefix(
        arg1: LME,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum LMEConvergedReason {
    LME_CONVERGED_TOL = 1,
    LME_DIVERGED_ITS = -1,
    LME_DIVERGED_BREAKDOWN = -2,
    LME_CONVERGED_ITERATING = 0,
}
extern "C" {
    pub static mut LMEConvergedReasons: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn LMEGetConvergedReason(arg1: LME, arg2: *mut LMEConvergedReason) -> PetscErrorCode;
}
extern "C" {
    pub static mut LMEList: PetscFunctionList;
}
extern "C" {
    pub static mut LMEMonitorList: PetscFunctionList;
}
extern "C" {
    pub static mut LMEMonitorCreateList: PetscFunctionList;
}
extern "C" {
    pub static mut LMEMonitorDestroyList: PetscFunctionList;
}
extern "C" {
    pub fn LMERegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: LME) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEMonitorRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: PetscViewerType,
        arg3: PetscViewerFormat,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: LME,
                arg2: PetscInt,
                arg3: PetscReal,
                arg4: *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PetscViewer,
                arg2: PetscViewerFormat,
                arg3: *mut ::std::os::raw::c_void,
                arg4: *mut *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg6: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut PetscViewerAndFormat) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn LMEAllocateSolution(arg1: LME, arg2: PetscInt) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscLimiter {
    _unused: [u8; 0],
}
pub type PetscLimiter = *mut _p_PetscLimiter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PetscFV {
    _unused: [u8; 0],
}
pub type PetscFV = *mut _p_PetscFV;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PetscFVFaceGeom {
    pub normal: [PetscReal; 3usize],
    pub centroid: [PetscReal; 3usize],
    pub grad: [[PetscScalar; 3usize]; 2usize],
}
#[test]
fn bindgen_test_layout_PetscFVFaceGeom() {
    assert_eq!(
        ::std::mem::size_of::<PetscFVFaceGeom>(),
        144usize,
        concat!("Size of: ", stringify!(PetscFVFaceGeom))
    );
    assert_eq!(
        ::std::mem::align_of::<PetscFVFaceGeom>(),
        8usize,
        concat!("Alignment of ", stringify!(PetscFVFaceGeom))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscFVFaceGeom>())).normal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscFVFaceGeom),
            "::",
            stringify!(normal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscFVFaceGeom>())).centroid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscFVFaceGeom),
            "::",
            stringify!(centroid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscFVFaceGeom>())).grad as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscFVFaceGeom),
            "::",
            stringify!(grad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PetscFVCellGeom {
    pub centroid: [PetscReal; 3usize],
    pub volume: PetscReal,
}
#[test]
fn bindgen_test_layout_PetscFVCellGeom() {
    assert_eq!(
        ::std::mem::size_of::<PetscFVCellGeom>(),
        32usize,
        concat!("Size of: ", stringify!(PetscFVCellGeom))
    );
    assert_eq!(
        ::std::mem::align_of::<PetscFVCellGeom>(),
        8usize,
        concat!("Alignment of ", stringify!(PetscFVCellGeom))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscFVCellGeom>())).centroid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscFVCellGeom),
            "::",
            stringify!(centroid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PetscFVCellGeom>())).volume as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PetscFVCellGeom),
            "::",
            stringify!(volume)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DMDAStencilType {
    DMDA_STENCIL_STAR = 0,
    DMDA_STENCIL_BOX = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DMDAInterpolationType {
    DMDA_Q0 = 0,
    DMDA_Q1 = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum DMDAElementType {
    DMDA_ELEMENT_P1 = 0,
    DMDA_ELEMENT_Q1 = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMDALocalInfo {
    pub dim: PetscInt,
    pub dof: PetscInt,
    pub sw: PetscInt,
    pub mx: PetscInt,
    pub my: PetscInt,
    pub mz: PetscInt,
    pub xs: PetscInt,
    pub ys: PetscInt,
    pub zs: PetscInt,
    pub xm: PetscInt,
    pub ym: PetscInt,
    pub zm: PetscInt,
    pub gxs: PetscInt,
    pub gys: PetscInt,
    pub gzs: PetscInt,
    pub gxm: PetscInt,
    pub gym: PetscInt,
    pub gzm: PetscInt,
    pub bx: DMBoundaryType,
    pub by: DMBoundaryType,
    pub bz: DMBoundaryType,
    pub st: DMDAStencilType,
    pub da: DM,
}
#[test]
fn bindgen_test_layout_DMDALocalInfo() {
    assert_eq!(
        ::std::mem::size_of::<DMDALocalInfo>(),
        96usize,
        concat!("Size of: ", stringify!(DMDALocalInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<DMDALocalInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(DMDALocalInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).dim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(dim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).dof as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(dof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).sw as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(sw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).mx as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(mx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).my as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(my)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).mz as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(mz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).xs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(xs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).ys as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(ys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).zs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(zs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).xm as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(xm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).ym as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(ym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).zm as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(zm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).gxs as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(gxs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).gys as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(gys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).gzs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(gzs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).gxm as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(gxm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).gym as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(gym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).gzm as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(gzm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).bx as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(bx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).by as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(by)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).bz as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(bz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).st as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(st)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DMDALocalInfo>())).da as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DMDALocalInfo),
            "::",
            stringify!(da)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_SNES {
    _unused: [u8; 0],
}
pub type SNES = *mut _p_SNES;
pub type SNESType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut SNES_CLASSID: PetscClassId;
}
extern "C" {
    pub static mut DMSNES_CLASSID: PetscClassId;
}
extern "C" {
    pub fn SNESInitializePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn SNESCreate(arg1: MPI_Comm, arg2: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESReset(arg1: SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESDestroy(arg1: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetType(arg1: SNES, arg2: SNESType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitor(arg1: SNES, arg2: PetscInt, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorSet(
        arg1: SNES,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: PetscInt,
                arg3: PetscReal,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorSetFromOptions(
        arg1: SNES,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: PetscInt,
                arg3: PetscReal,
                arg4: *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg6: ::std::option::Option<
            unsafe extern "C" fn(arg1: SNES, arg2: *mut PetscViewerAndFormat) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorCancel(arg1: SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorSAWs(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorSAWsCreate(
        arg1: SNES,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorSAWsDestroy(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetConvergenceHistory(
        arg1: SNES,
        arg2: *mut PetscReal,
        arg3: *mut PetscInt,
        arg4: PetscInt,
        arg5: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetConvergenceHistory(
        arg1: SNES,
        arg2: *mut *mut PetscReal,
        arg3: *mut *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetUp(arg1: SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSolve(arg1: SNES, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetErrorIfNotConverged(arg1: SNES, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetErrorIfNotConverged(arg1: SNES, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetWorkVecs(arg1: SNES, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESAddOptionsChecker(
        arg1: ::std::option::Option<unsafe extern "C" fn(arg1: SNES) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetUpdate(
        arg1: SNES,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: SNES, arg2: PetscInt) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: SNES) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetKSP(arg1: SNES, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetKSP(arg1: SNES, arg2: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetSolution(arg1: SNES, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetSolution(arg1: SNES, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetSolutionUpdate(arg1: SNES, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetRhs(arg1: SNES, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESView(arg1: SNES, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLoad(arg1: SNES, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESConvergedReasonViewSet(
        arg1: SNES,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: SNES, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESViewFromOptions(
        arg1: SNES,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESConvergedReasonView(arg1: SNES, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESConvergedReasonViewFromOptions(arg1: SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESConvergedReasonViewCancel(arg1: SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetOptionsPrefix(arg1: SNES, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESAppendOptionsPrefix(
        arg1: SNES,
        arg2: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetOptionsPrefix(
        arg1: SNES,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetFromOptions(arg1: SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESResetFromOptions(arg1: SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetUseMatrixFree(arg1: SNES, arg2: PetscBool, arg3: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetUseMatrixFree(
        arg1: SNES,
        arg2: *mut PetscBool,
        arg3: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MatCreateSNESMF(arg1: SNES, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSNESMFGetSNES(arg1: Mat, arg2: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSNESMFSetReuseBase(arg1: Mat, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatSNESMFGetReuseBase(arg1: Mat, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MatMFFDComputeJacobian(
        arg1: SNES,
        arg2: Vec,
        arg3: Mat,
        arg4: Mat,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetType(arg1: SNES, arg2: *mut SNESType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorDefaultSetUp(arg1: SNES, arg2: *mut PetscViewerAndFormat) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorDefault(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorScaling(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorRange(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorRatio(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorRatioSetUp(arg1: SNES, arg2: *mut PetscViewerAndFormat) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorSolution(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorResidual(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorSolutionUpdate(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorDefaultShort(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorDefaultField(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorJacUpdateSpectrum(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorFields(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorSNESResidual(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorSNESResidualDrawLG(
        arg1: KSP,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn KSPMonitorSNESResidualDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetTolerances(
        arg1: SNES,
        arg2: PetscReal,
        arg3: PetscReal,
        arg4: PetscReal,
        arg5: PetscInt,
        arg6: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetDivergenceTolerance(arg1: SNES, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetTolerances(
        arg1: SNES,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
        arg4: *mut PetscReal,
        arg5: *mut PetscInt,
        arg6: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetDivergenceTolerance(arg1: SNES, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetTrustRegionTolerance(arg1: SNES, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetForceIteration(arg1: SNES, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetForceIteration(arg1: SNES, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetIterationNumber(arg1: SNES, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetIterationNumber(arg1: SNES, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNewtonTRSetPreCheck(
        arg1: SNES,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut PetscBool,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNewtonTRGetPreCheck(
        arg1: SNES,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut PetscBool,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        ctx: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNewtonTRSetPostCheck(
        arg1: SNES,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: Vec,
                arg5: *mut PetscBool,
                arg6: *mut PetscBool,
                arg7: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNewtonTRGetPostCheck(
        arg1: SNES,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: Vec,
                arg5: *mut PetscBool,
                arg6: *mut PetscBool,
                arg7: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        ctx: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetNonlinearStepFailures(arg1: SNES, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetMaxNonlinearStepFailures(arg1: SNES, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetMaxNonlinearStepFailures(arg1: SNES, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetNumberFunctionEvals(arg1: SNES, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetLagPreconditioner(arg1: SNES, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetLagPreconditioner(arg1: SNES, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetLagJacobian(arg1: SNES, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetLagJacobian(arg1: SNES, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetLagPreconditionerPersists(arg1: SNES, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetLagJacobianPersists(arg1: SNES, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetGridSequence(arg1: SNES, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetGridSequence(arg1: SNES, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetLinearSolveIterations(arg1: SNES, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetLinearSolveFailures(arg1: SNES, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetMaxLinearSolveFailures(arg1: SNES, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetMaxLinearSolveFailures(arg1: SNES, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetCountersReset(arg1: SNES, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESKSPSetUseEW(arg1: SNES, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESKSPGetUseEW(arg1: SNES, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESKSPSetParametersEW(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: PetscReal,
        arg5: PetscReal,
        arg6: PetscReal,
        arg7: PetscReal,
        arg8: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESKSPGetParametersEW(
        arg1: SNES,
        arg2: *mut PetscInt,
        arg3: *mut PetscReal,
        arg4: *mut PetscReal,
        arg5: *mut PetscReal,
        arg6: *mut PetscReal,
        arg7: *mut PetscReal,
        arg8: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMonitorLGRange(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetApplicationContext(
        arg1: SNES,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetApplicationContext(
        arg1: SNES,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetComputeApplicationContext(
        arg1: SNES,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: *mut *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESPythonSetType(arg1: SNES, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetFunctionDomainError(arg1: SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetFunctionDomainError(arg1: SNES, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetJacobianDomainError(arg1: SNES, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetJacobianDomainError(arg1: SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetCheckJacobianDomainError(arg1: SNES, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetCheckJacobianDomainError(arg1: SNES, arg2: *mut PetscBool) -> PetscErrorCode;
}
impl SNESConvergedReason {
    pub const SNES_CONVERGED_TR_DELTA: SNESConvergedReason =
        SNESConvergedReason::SNES_DIVERGED_TR_DELTA;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SNESConvergedReason {
    SNES_CONVERGED_FNORM_ABS = 2,
    SNES_CONVERGED_FNORM_RELATIVE = 3,
    SNES_CONVERGED_SNORM_RELATIVE = 4,
    SNES_CONVERGED_ITS = 5,
    SNES_DIVERGED_FUNCTION_DOMAIN = -1,
    SNES_DIVERGED_FUNCTION_COUNT = -2,
    SNES_DIVERGED_LINEAR_SOLVE = -3,
    SNES_DIVERGED_FNORM_NAN = -4,
    SNES_DIVERGED_MAX_IT = -5,
    SNES_DIVERGED_LINE_SEARCH = -6,
    SNES_DIVERGED_INNER = -7,
    SNES_DIVERGED_LOCAL_MIN = -8,
    SNES_DIVERGED_DTOL = -9,
    SNES_DIVERGED_JACOBIAN_DOMAIN = -10,
    SNES_DIVERGED_TR_DELTA = -11,
    SNES_CONVERGED_ITERATING = 0,
}
extern "C" {
    pub static mut SNESConvergedReasons: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SNESSetConvergenceTest(
        arg1: SNES,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: PetscInt,
                arg3: PetscReal,
                arg4: PetscReal,
                arg5: PetscReal,
                arg6: *mut SNESConvergedReason,
                arg7: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESConvergedDefault(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: PetscReal,
        arg5: PetscReal,
        arg6: *mut SNESConvergedReason,
        arg7: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESConvergedSkip(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: PetscReal,
        arg5: PetscReal,
        arg6: *mut SNESConvergedReason,
        arg7: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESConvergedCorrectPressure(
        arg1: SNES,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: PetscReal,
        arg5: PetscReal,
        arg6: *mut SNESConvergedReason,
        arg7: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetConvergedReason(arg1: SNES, arg2: *mut SNESConvergedReason) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetConvergedReasonString(
        arg1: SNES,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetConvergedReason(arg1: SNES, arg2: SNESConvergedReason) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetFunction(
        arg1: SNES,
        arg2: Vec,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetFunction(
        arg1: SNES,
        arg2: *mut Vec,
        arg3: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg4: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESComputeFunction(arg1: SNES, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESComputeMFFunction(arg1: SNES, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetInitialFunction(arg1: SNES, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetJacobian(
        arg1: SNES,
        arg2: Mat,
        arg3: Mat,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Mat,
                arg4: Mat,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetJacobian(
        arg1: SNES,
        arg2: *mut Mat,
        arg3: *mut Mat,
        arg4: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Mat,
                arg4: Mat,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg5: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESObjectiveComputeFunctionDefaultFD(
        arg1: SNES,
        arg2: Vec,
        arg3: Vec,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESComputeJacobianDefault(
        arg1: SNES,
        arg2: Vec,
        arg3: Mat,
        arg4: Mat,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESComputeJacobianDefaultColor(
        arg1: SNES,
        arg2: Vec,
        arg3: Mat,
        arg4: Mat,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetComputeInitialGuess(
        arg1: SNES,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetPicard(
        arg1: SNES,
        arg2: Vec,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg4: Mat,
        arg5: Mat,
        arg6: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Mat,
                arg4: Mat,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg7: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetPicard(
        arg1: SNES,
        arg2: *mut Vec,
        arg3: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg4: *mut Mat,
        arg5: *mut Mat,
        arg6: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Mat,
                arg4: Mat,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg7: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESPicardComputeFunction(
        arg1: SNES,
        arg2: Vec,
        arg3: Vec,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESPicardComputeMFFunction(
        arg1: SNES,
        arg2: Vec,
        arg3: Vec,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESPicardComputeJacobian(
        arg1: SNES,
        arg2: Vec,
        arg3: Mat,
        arg4: Mat,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetObjective(
        arg1: SNES,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: *mut PetscReal,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetObjective(
        arg1: SNES,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: *mut PetscReal,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESComputeObjective(arg1: SNES, arg2: Vec, arg3: *mut PetscReal) -> PetscErrorCode;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SNESNormSchedule {
    SNES_NORM_DEFAULT = -1,
    SNES_NORM_NONE = 0,
    SNES_NORM_ALWAYS = 1,
    SNES_NORM_INITIAL_ONLY = 2,
    SNES_NORM_FINAL_ONLY = 3,
    SNES_NORM_INITIAL_FINAL_ONLY = 4,
}
extern "C" {
    pub static SNESNormSchedules: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SNESSetNormSchedule(arg1: SNES, arg2: SNESNormSchedule) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetNormSchedule(arg1: SNES, arg2: *mut SNESNormSchedule) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetFunctionNorm(arg1: SNES, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetFunctionNorm(arg1: SNES, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetUpdateNorm(arg1: SNES, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetSolutionNorm(arg1: SNES, arg2: *mut PetscReal) -> PetscErrorCode;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SNESFunctionType {
    SNES_FUNCTION_DEFAULT = -1,
    SNES_FUNCTION_UNPRECONDITIONED = 0,
    SNES_FUNCTION_PRECONDITIONED = 1,
}
extern "C" {
    pub static SNESFunctionTypes: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SNESSetFunctionType(arg1: SNES, arg2: SNESFunctionType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetFunctionType(arg1: SNES, arg2: *mut SNESFunctionType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetNGS(
        arg1: SNES,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetNGS(
        arg1: SNES,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESComputeNGS(arg1: SNES, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNGSSetSweeps(arg1: SNES, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNGSGetSweeps(arg1: SNES, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNGSSetTolerances(
        arg1: SNES,
        arg2: PetscReal,
        arg3: PetscReal,
        arg4: PetscReal,
        arg5: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNGSGetTolerances(
        arg1: SNES,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
        arg4: *mut PetscReal,
        arg5: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetAlwaysComputesFinalResidual(arg1: SNES, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetAlwaysComputesFinalResidual(arg1: SNES, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESShellGetContext(arg1: SNES, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESShellSetContext(arg1: SNES, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESShellSetSolve(
        arg1: SNES,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: SNES, arg2: Vec) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_LineSearch {
    _unused: [u8; 0],
}
pub type SNESLineSearch = *mut _p_LineSearch;
pub type SNESLineSearchType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut SNESList: PetscFunctionList;
}
extern "C" {
    pub static mut SNESLINESEARCH_CLASSID: PetscClassId;
}
extern "C" {
    pub static mut SNESLineSearchList: PetscFunctionList;
}
pub type SNESLineSearchVIProjectFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: SNES, arg2: Vec) -> PetscErrorCode>;
pub type SNESLineSearchVINormFunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: SNES, arg2: Vec, arg3: Vec, arg4: *mut PetscReal) -> PetscErrorCode,
>;
pub type SNESLineSearchApplyFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: SNESLineSearch) -> PetscErrorCode>;
pub type SNESLineSearchUserFunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: SNESLineSearch, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode,
>;
extern "C" {
    pub fn SNESLineSearchCreate(arg1: MPI_Comm, arg2: *mut SNESLineSearch) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchReset(arg1: SNESLineSearch) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchView(arg1: SNESLineSearch, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchDestroy(arg1: *mut SNESLineSearch) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchGetType(
        arg1: SNESLineSearch,
        arg2: *mut SNESLineSearchType,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetType(arg1: SNESLineSearch, arg2: SNESLineSearchType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetFromOptions(arg1: SNESLineSearch) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetFunction(
        arg1: SNESLineSearch,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: SNES, arg2: Vec, arg3: Vec) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetUp(arg1: SNESLineSearch) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchApply(
        arg1: SNESLineSearch,
        arg2: Vec,
        arg3: Vec,
        arg4: *mut PetscReal,
        arg5: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchPreCheck(
        arg1: SNESLineSearch,
        arg2: Vec,
        arg3: Vec,
        arg4: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchPostCheck(
        arg1: SNESLineSearch,
        arg2: Vec,
        arg3: Vec,
        arg4: Vec,
        arg5: *mut PetscBool,
        arg6: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetWorkVecs(arg1: SNESLineSearch, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetPreCheck(
        arg1: SNESLineSearch,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNESLineSearch,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut PetscBool,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetPostCheck(
        arg1: SNESLineSearch,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNESLineSearch,
                arg2: Vec,
                arg3: Vec,
                arg4: Vec,
                arg5: *mut PetscBool,
                arg6: *mut PetscBool,
                arg7: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        ctx: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchGetPreCheck(
        arg1: SNESLineSearch,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNESLineSearch,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut PetscBool,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        ctx: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchGetPostCheck(
        arg1: SNESLineSearch,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNESLineSearch,
                arg2: Vec,
                arg3: Vec,
                arg4: Vec,
                arg5: *mut PetscBool,
                arg6: *mut PetscBool,
                arg7: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        ctx: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetVIFunctions(
        arg1: SNESLineSearch,
        arg2: SNESLineSearchVIProjectFunc,
        arg3: SNESLineSearchVINormFunc,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchGetVIFunctions(
        arg1: SNESLineSearch,
        arg2: *mut SNESLineSearchVIProjectFunc,
        arg3: *mut SNESLineSearchVINormFunc,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetSNES(arg1: SNESLineSearch, arg2: SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchGetSNES(arg1: SNESLineSearch, arg2: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchGetTolerances(
        arg1: SNESLineSearch,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
        arg4: *mut PetscReal,
        arg5: *mut PetscReal,
        arg6: *mut PetscReal,
        arg7: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetTolerances(
        arg1: SNESLineSearch,
        arg2: PetscReal,
        arg3: PetscReal,
        arg4: PetscReal,
        arg5: PetscReal,
        arg6: PetscReal,
        arg7: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchPreCheckPicard(
        arg1: SNESLineSearch,
        arg2: Vec,
        arg3: Vec,
        arg4: *mut PetscBool,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchGetLambda(arg1: SNESLineSearch, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetLambda(arg1: SNESLineSearch, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchGetDamping(arg1: SNESLineSearch, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetDamping(arg1: SNESLineSearch, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchGetOrder(arg1: SNESLineSearch, order: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetOrder(arg1: SNESLineSearch, order: PetscInt) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SNESLineSearchReason {
    SNES_LINESEARCH_SUCCEEDED = 0,
    SNES_LINESEARCH_FAILED_NANORINF = 1,
    SNES_LINESEARCH_FAILED_DOMAIN = 2,
    SNES_LINESEARCH_FAILED_REDUCT = 3,
    SNES_LINESEARCH_FAILED_USER = 4,
    SNES_LINESEARCH_FAILED_FUNCTION = 5,
}
extern "C" {
    pub fn SNESLineSearchGetReason(
        arg1: SNESLineSearch,
        arg2: *mut SNESLineSearchReason,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetReason(
        arg1: SNESLineSearch,
        arg2: SNESLineSearchReason,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchGetVecs(
        arg1: SNESLineSearch,
        arg2: *mut Vec,
        arg3: *mut Vec,
        arg4: *mut Vec,
        arg5: *mut Vec,
        arg6: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetVecs(
        arg1: SNESLineSearch,
        arg2: Vec,
        arg3: Vec,
        arg4: Vec,
        arg5: Vec,
        arg6: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchGetNorms(
        arg1: SNESLineSearch,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetNorms(
        arg1: SNESLineSearch,
        arg2: PetscReal,
        arg3: PetscReal,
        arg4: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchComputeNorms(arg1: SNESLineSearch) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetComputeNorms(arg1: SNESLineSearch, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchMonitor(arg1: SNESLineSearch) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchMonitorSet(
        arg1: SNESLineSearch,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNESLineSearch,
                arg2: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchMonitorSetFromOptions(
        arg1: SNESLineSearch,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNESLineSearch,
                arg2: *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg6: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNESLineSearch,
                arg2: *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchMonitorCancel(arg1: SNESLineSearch) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchMonitorUpdate(
        arg1: SNESLineSearch,
        arg2: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchSetDefaultMonitor(
        arg1: SNESLineSearch,
        arg2: PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchGetDefaultMonitor(
        arg1: SNESLineSearch,
        arg2: *mut PetscViewer,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchMonitorSolutionUpdate(
        arg1: SNESLineSearch,
        arg2: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchAppendOptionsPrefix(
        arg1: SNESLineSearch,
        prefix: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchGetOptionsPrefix(
        arg1: SNESLineSearch,
        prefix: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchShellSetUserFunc(
        arg1: SNESLineSearch,
        arg2: SNESLineSearchUserFunc,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchShellGetUserFunc(
        arg1: SNESLineSearch,
        arg2: *mut SNESLineSearchUserFunc,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchBTSetAlpha(arg1: SNESLineSearch, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchBTGetAlpha(arg1: SNESLineSearch, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESLineSearchRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: SNESLineSearch) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESVISetVariableBounds(arg1: SNES, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESVISetComputeVariableBounds(
        arg1: SNES,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: SNES, arg2: Vec, arg3: Vec) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESVIGetInactiveSet(arg1: SNES, arg2: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESVIGetActiveSetIS(arg1: SNES, arg2: Vec, arg3: Vec, arg4: *mut IS) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESVIComputeInactiveSetFnorm(
        arg1: SNES,
        arg2: Vec,
        arg3: Vec,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESVISetRedundancyCheck(
        arg1: SNES,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: IS,
                arg3: *mut IS,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESTestLocalMin(arg1: SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESComputeJacobian(arg1: SNES, arg2: Vec, arg3: Mat, arg4: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESTestJacobian(arg1: SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetDM(arg1: SNES, arg2: DM) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetDM(arg1: SNES, arg2: *mut DM) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetNPC(arg1: SNES, arg2: SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetNPC(arg1: SNES, arg2: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESHasNPC(arg1: SNES, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESApplyNPC(arg1: SNES, arg2: Vec, arg3: Vec, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetNPCFunction(arg1: SNES, arg2: Vec, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESComputeFunctionDefaultNPC(arg1: SNES, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetNPCSide(arg1: SNES, arg2: PCSide) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetNPCSide(arg1: SNES, arg2: *mut PCSide) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetLineSearch(arg1: SNES, arg2: SNESLineSearch) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESGetLineSearch(arg1: SNES, arg2: *mut SNESLineSearch) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESRestrictHookAdd(
        arg1: SNES,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: SNES,
                arg3: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESSetUpMatrices(arg1: SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESSetFunction(
        arg1: DM,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESGetFunction(
        arg1: DM,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESSetMFFunction(
        arg1: DM,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESSetNGS(
        arg1: DM,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESGetNGS(
        arg1: DM,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESSetJacobian(
        arg1: DM,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Mat,
                arg4: Mat,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESGetJacobian(
        arg1: DM,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Mat,
                arg4: Mat,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESSetPicard(
        arg1: DM,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Mat,
                arg4: Mat,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESGetPicard(
        arg1: DM,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: Mat,
                arg4: Mat,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg4: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESSetObjective(
        arg1: DM,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: *mut PetscReal,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESGetObjective(
        arg1: DM,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SNES,
                arg2: Vec,
                arg3: *mut PetscReal,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMCopyDMSNES(arg1: DM, arg2: DM) -> PetscErrorCode;
}
pub type DMDASNESFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut DMDALocalInfo,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode,
>;
pub type DMDASNESJacobian = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut DMDALocalInfo,
        arg2: *mut ::std::os::raw::c_void,
        arg3: Mat,
        arg4: Mat,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode,
>;
pub type DMDASNESObjective = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut DMDALocalInfo,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut PetscReal,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode,
>;
extern "C" {
    pub fn DMDASNESSetFunctionLocal(
        arg1: DM,
        arg2: InsertMode,
        arg3: DMDASNESFunction,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMDASNESSetJacobianLocal(
        arg1: DM,
        arg2: DMDASNESJacobian,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMDASNESSetObjectiveLocal(
        arg1: DM,
        arg2: DMDASNESObjective,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMDASNESSetPicardLocal(
        arg1: DM,
        arg2: InsertMode,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut DMDALocalInfo,
                arg2: *mut ::std::os::raw::c_void,
                arg3: *mut ::std::os::raw::c_void,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut DMDALocalInfo,
                arg2: *mut ::std::os::raw::c_void,
                arg3: Mat,
                arg4: Mat,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESSetBoundaryLocal(
        arg1: DM,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: DM,
                arg2: Vec,
                arg3: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESSetFunctionLocal(
        arg1: DM,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: DM,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESSetJacobianLocal(
        arg1: DM,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: DM,
                arg2: Vec,
                arg3: Mat,
                arg4: Mat,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESGetBoundaryLocal(
        arg1: DM,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: DM,
                arg2: Vec,
                arg3: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESGetFunctionLocal(
        arg1: DM,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: DM,
                arg2: Vec,
                arg3: Vec,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESGetJacobianLocal(
        arg1: DM,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: DM,
                arg2: Vec,
                arg3: Mat,
                arg4: Mat,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMultiblockSetFields(
        arg1: SNES,
        arg2: *const ::std::os::raw::c_char,
        arg3: PetscInt,
        arg4: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMultiblockSetIS(
        arg1: SNES,
        arg2: *const ::std::os::raw::c_char,
        arg3: IS,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMultiblockSetBlockSize(arg1: SNES, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMultiblockSetType(arg1: SNES, arg2: PCCompositeType) -> PetscErrorCode;
}
pub type SNESMSType = *const ::std::os::raw::c_char;
extern "C" {
    pub fn SNESMSRegister(
        arg1: SNESMSType,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscReal,
        arg5: *const PetscReal,
        arg6: *const PetscReal,
        arg7: *const PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMSGetType(arg1: SNES, arg2: *mut SNESMSType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMSSetType(arg1: SNES, arg2: SNESMSType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMSGetDamping(arg1: SNES, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMSSetDamping(arg1: SNES, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMSFinalizePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMSInitializePackage() -> PetscErrorCode;
}
extern "C" {
    pub fn SNESMSRegisterDestroy() -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SNESNGMRESRestartType {
    SNES_NGMRES_RESTART_NONE = 0,
    SNES_NGMRES_RESTART_PERIODIC = 1,
    SNES_NGMRES_RESTART_DIFFERENCE = 2,
}
extern "C" {
    pub static mut SNESNGMRESRestartTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SNESNGMRESSelectType {
    SNES_NGMRES_SELECT_NONE = 0,
    SNES_NGMRES_SELECT_DIFFERENCE = 1,
    SNES_NGMRES_SELECT_LINESEARCH = 2,
}
extern "C" {
    pub static mut SNESNGMRESSelectTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn SNESNGMRESSetRestartType(arg1: SNES, arg2: SNESNGMRESRestartType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNGMRESSetSelectType(arg1: SNES, arg2: SNESNGMRESSelectType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNGMRESSetRestartFmRise(arg1: SNES, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNGMRESGetRestartFmRise(arg1: SNES, arg2: *mut PetscBool) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SNESNCGType {
    SNES_NCG_FR = 0,
    SNES_NCG_PRP = 1,
    SNES_NCG_HS = 2,
    SNES_NCG_DY = 3,
    SNES_NCG_CD = 4,
}
extern "C" {
    pub static mut SNESNCGTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn SNESNCGSetType(arg1: SNES, arg2: SNESNCGType) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SNESQNScaleType {
    SNES_QN_SCALE_DEFAULT = 0,
    SNES_QN_SCALE_NONE = 1,
    SNES_QN_SCALE_SCALAR = 2,
    SNES_QN_SCALE_DIAGONAL = 3,
    SNES_QN_SCALE_JACOBIAN = 4,
}
extern "C" {
    pub static mut SNESQNScaleTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SNESQNRestartType {
    SNES_QN_RESTART_DEFAULT = 0,
    SNES_QN_RESTART_NONE = 1,
    SNES_QN_RESTART_POWELL = 2,
    SNES_QN_RESTART_PERIODIC = 3,
}
extern "C" {
    pub static mut SNESQNRestartTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SNESQNType {
    SNES_QN_LBFGS = 0,
    SNES_QN_BROYDEN = 1,
    SNES_QN_BADBROYDEN = 2,
}
extern "C" {
    pub static mut SNESQNTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn SNESQNSetType(arg1: SNES, arg2: SNESQNType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESQNSetScaleType(arg1: SNES, arg2: SNESQNScaleType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESQNSetRestartType(arg1: SNES, arg2: SNESQNRestartType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNASMGetType(arg1: SNES, arg2: *mut PCASMType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNASMSetType(arg1: SNES, arg2: PCASMType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNASMGetSubdomains(
        arg1: SNES,
        arg2: *mut PetscInt,
        arg3: *mut *mut SNES,
        arg4: *mut *mut VecScatter,
        arg5: *mut *mut VecScatter,
        arg6: *mut *mut VecScatter,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNASMSetSubdomains(
        arg1: SNES,
        arg2: PetscInt,
        arg3: *mut SNES,
        arg4: *mut VecScatter,
        arg5: *mut VecScatter,
        arg6: *mut VecScatter,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNASMSetDamping(arg1: SNES, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNASMGetDamping(arg1: SNES, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNASMGetSubdomainVecs(
        arg1: SNES,
        arg2: *mut PetscInt,
        arg3: *mut *mut Vec,
        arg4: *mut *mut Vec,
        arg5: *mut *mut Vec,
        arg6: *mut *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNASMSetComputeFinalJacobian(arg1: SNES, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNASMGetSNES(arg1: SNES, arg2: PetscInt, arg3: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNASMGetNumber(arg1: SNES, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESNASMSetWeight(arg1: SNES, arg2: Vec) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SNESCompositeType {
    SNES_COMPOSITE_ADDITIVE = 0,
    SNES_COMPOSITE_MULTIPLICATIVE = 1,
    SNES_COMPOSITE_ADDITIVEOPTIMAL = 2,
}
extern "C" {
    pub static mut SNESCompositeTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn SNESCompositeSetType(arg1: SNES, arg2: SNESCompositeType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESCompositeAddSNES(arg1: SNES, arg2: SNESType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESCompositeGetSNES(arg1: SNES, arg2: PetscInt, arg3: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESCompositeGetNumber(arg1: SNES, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESCompositeSetDamping(arg1: SNES, arg2: PetscInt, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESPatchSetDiscretisationInfo(
        arg1: SNES,
        arg2: PetscInt,
        arg3: *mut DM,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut *const PetscInt,
        arg7: *const PetscInt,
        arg8: PetscInt,
        arg9: *const PetscInt,
        arg10: PetscInt,
        arg11: *const PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESPatchSetComputeOperator(
        arg1: SNES,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PC,
                arg2: PetscInt,
                arg3: Vec,
                arg4: Mat,
                arg5: IS,
                arg6: PetscInt,
                arg7: *const PetscInt,
                arg8: *const PetscInt,
                arg9: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESPatchSetComputeFunction(
        arg1: SNES,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PC,
                arg2: PetscInt,
                arg3: Vec,
                arg4: Vec,
                arg5: IS,
                arg6: PetscInt,
                arg7: *const PetscInt,
                arg8: *const PetscInt,
                arg9: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESPatchSetConstructType(
        arg1: SNES,
        arg2: PCPatchConstructType,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PC,
                arg2: *mut PetscInt,
                arg3: *mut *mut IS,
                arg4: *mut IS,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESPatchSetCellNumbering(arg1: SNES, arg2: PetscSection) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SNESFASType {
    SNES_FAS_MULTIPLICATIVE = 0,
    SNES_FAS_ADDITIVE = 1,
    SNES_FAS_FULL = 2,
    SNES_FAS_KASKADE = 3,
}
extern "C" {
    pub static mut SNESFASTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn SNESFASSetType(arg1: SNES, arg2: SNESFASType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASGetType(arg1: SNES, arg2: *mut SNESFASType) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASSetLevels(arg1: SNES, arg2: PetscInt, arg3: *mut MPI_Comm) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASGetLevels(arg1: SNES, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASGetCycleSNES(arg1: SNES, arg2: PetscInt, arg3: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASSetNumberSmoothUp(arg1: SNES, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASSetNumberSmoothDown(arg1: SNES, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASSetCycles(arg1: SNES, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASSetMonitor(
        arg1: SNES,
        arg2: *mut PetscViewerAndFormat,
        arg3: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASSetLog(arg1: SNES, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASSetGalerkin(arg1: SNES, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASGetGalerkin(arg1: SNES, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASGalerkinFunctionDefault(
        arg1: SNES,
        arg2: Vec,
        arg3: Vec,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASCycleGetSmoother(arg1: SNES, arg2: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASCycleGetSmootherUp(arg1: SNES, arg2: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASCycleGetSmootherDown(arg1: SNES, arg2: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASCycleGetCorrection(arg1: SNES, arg2: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASCycleGetInterpolation(arg1: SNES, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASCycleGetRestriction(arg1: SNES, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASCycleGetInjection(arg1: SNES, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASCycleGetRScale(arg1: SNES, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASCycleSetCycles(arg1: SNES, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASCycleIsFine(arg1: SNES, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASSetInterpolation(arg1: SNES, arg2: PetscInt, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASGetInterpolation(arg1: SNES, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASSetRestriction(arg1: SNES, arg2: PetscInt, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASGetRestriction(arg1: SNES, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASSetInjection(arg1: SNES, arg2: PetscInt, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASGetInjection(arg1: SNES, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASSetRScale(arg1: SNES, arg2: PetscInt, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASGetRScale(arg1: SNES, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASSetContinuation(arg1: SNES, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASGetSmoother(arg1: SNES, arg2: PetscInt, arg3: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASGetSmootherUp(arg1: SNES, arg2: PetscInt, arg3: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASGetSmootherDown(arg1: SNES, arg2: PetscInt, arg3: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASGetCoarseSolve(arg1: SNES, arg2: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASFullSetDownSweep(arg1: SNES, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASCreateCoarseVec(arg1: SNES, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASRestrict(arg1: SNES, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASFullSetTotal(arg1: SNES, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SNESFASFullGetTotal(arg1: SNES, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESCheckDiscretization(
        arg1: SNES,
        arg2: DM,
        arg3: PetscReal,
        arg4: Vec,
        arg5: PetscReal,
        arg6: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESCheckResidual(
        arg1: SNES,
        arg2: DM,
        arg3: Vec,
        arg4: PetscReal,
        arg5: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESCheckJacobian(
        arg1: SNES,
        arg2: DM,
        arg3: Vec,
        arg4: PetscReal,
        arg5: *mut PetscBool,
        arg6: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESCheckFromOptions(arg1: SNES, arg2: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESComputeJacobianAction(
        arg1: DM,
        arg2: Vec,
        arg3: Vec,
        arg4: Vec,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn DMSNESCreateJacobianMF(
        arg1: DM,
        arg2: Vec,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSInitializePackage() -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_EPS {
    _unused: [u8; 0],
}
pub type EPS = *mut _p_EPS;
pub type EPSType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut EPS_CLASSID: PetscClassId;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EPSProblemType {
    EPS_HEP = 1,
    EPS_GHEP = 2,
    EPS_NHEP = 3,
    EPS_GNHEP = 4,
    EPS_PGNHEP = 5,
    EPS_GHIEP = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EPSExtraction {
    EPS_RITZ = 0,
    EPS_HARMONIC = 1,
    EPS_HARMONIC_RELATIVE = 2,
    EPS_HARMONIC_RIGHT = 3,
    EPS_HARMONIC_LARGEST = 4,
    EPS_REFINED = 5,
    EPS_REFINED_HARMONIC = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EPSWhich {
    EPS_LARGEST_MAGNITUDE = 1,
    EPS_SMALLEST_MAGNITUDE = 2,
    EPS_LARGEST_REAL = 3,
    EPS_SMALLEST_REAL = 4,
    EPS_LARGEST_IMAGINARY = 5,
    EPS_SMALLEST_IMAGINARY = 6,
    EPS_TARGET_MAGNITUDE = 7,
    EPS_TARGET_REAL = 8,
    EPS_TARGET_IMAGINARY = 9,
    EPS_ALL = 10,
    EPS_WHICH_USER = 11,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EPSBalance {
    EPS_BALANCE_NONE = 0,
    EPS_BALANCE_ONESIDE = 1,
    EPS_BALANCE_TWOSIDE = 2,
    EPS_BALANCE_USER = 3,
}
extern "C" {
    pub static mut EPSBalanceTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EPSErrorType {
    EPS_ERROR_ABSOLUTE = 0,
    EPS_ERROR_RELATIVE = 1,
    EPS_ERROR_BACKWARD = 2,
}
extern "C" {
    pub static mut EPSErrorTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EPSConv {
    EPS_CONV_ABS = 0,
    EPS_CONV_REL = 1,
    EPS_CONV_NORM = 2,
    EPS_CONV_USER = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EPSStop {
    EPS_STOP_BASIC = 0,
    EPS_STOP_USER = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EPSConvergedReason {
    EPS_CONVERGED_TOL = 1,
    EPS_CONVERGED_USER = 2,
    EPS_DIVERGED_ITS = -1,
    EPS_DIVERGED_BREAKDOWN = -2,
    EPS_DIVERGED_SYMMETRY_LOST = -3,
    EPS_CONVERGED_ITERATING = 0,
}
extern "C" {
    pub static mut EPSConvergedReasons: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn EPSCreate(arg1: MPI_Comm, arg2: *mut EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSDestroy(arg1: *mut EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSReset(arg1: EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetType(arg1: EPS, arg2: EPSType) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetType(arg1: EPS, arg2: *mut EPSType) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetProblemType(arg1: EPS, arg2: EPSProblemType) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetProblemType(arg1: EPS, arg2: *mut EPSProblemType) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetExtraction(arg1: EPS, arg2: EPSExtraction) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetExtraction(arg1: EPS, arg2: *mut EPSExtraction) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetBalance(
        arg1: EPS,
        arg2: EPSBalance,
        arg3: PetscInt,
        arg4: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetBalance(
        arg1: EPS,
        arg2: *mut EPSBalance,
        arg3: *mut PetscInt,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetOperators(arg1: EPS, arg2: Mat, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetOperators(arg1: EPS, arg2: *mut Mat, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetFromOptions(arg1: EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetUp(arg1: EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSolve(arg1: EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSView(arg1: EPS, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSViewFromOptions(
        arg1: EPS,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSErrorView(arg1: EPS, arg2: EPSErrorType, arg3: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSErrorViewFromOptions(arg1: EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSConvergedReasonView(arg1: EPS, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSConvergedReasonViewFromOptions(arg1: EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSValuesView(arg1: EPS, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSValuesViewFromOptions(arg1: EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSVectorsView(arg1: EPS, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSVectorsViewFromOptions(arg1: EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetTarget(arg1: EPS, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetTarget(arg1: EPS, arg2: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetInterval(arg1: EPS, arg2: PetscReal, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetInterval(arg1: EPS, arg2: *mut PetscReal, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetST(arg1: EPS, arg2: ST) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetST(arg1: EPS, arg2: *mut ST) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetBV(arg1: EPS, arg2: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetBV(arg1: EPS, arg2: *mut BV) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetRG(arg1: EPS, arg2: RG) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetRG(arg1: EPS, arg2: *mut RG) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetDS(arg1: EPS, arg2: DS) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetDS(arg1: EPS, arg2: *mut DS) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetTolerances(arg1: EPS, arg2: PetscReal, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetTolerances(arg1: EPS, arg2: *mut PetscReal, arg3: *mut PetscInt)
        -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetConvergenceTestFunction(
        arg1: EPS,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: EPS,
                arg2: PetscScalar,
                arg3: PetscScalar,
                arg4: PetscReal,
                arg5: *mut PetscReal,
                arg6: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetConvergenceTest(arg1: EPS, arg2: EPSConv) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetConvergenceTest(arg1: EPS, arg2: *mut EPSConv) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSConvergedAbsolute(
        arg1: EPS,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscReal,
        arg5: *mut PetscReal,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSConvergedRelative(
        arg1: EPS,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscReal,
        arg5: *mut PetscReal,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSConvergedNorm(
        arg1: EPS,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscReal,
        arg5: *mut PetscReal,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetStoppingTestFunction(
        arg1: EPS,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: EPS,
                arg2: PetscInt,
                arg3: PetscInt,
                arg4: PetscInt,
                arg5: PetscInt,
                arg6: *mut EPSConvergedReason,
                arg7: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetStoppingTest(arg1: EPS, arg2: EPSStop) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetStoppingTest(arg1: EPS, arg2: *mut EPSStop) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSStoppingBasic(
        arg1: EPS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut EPSConvergedReason,
        arg7: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetConvergedReason(arg1: EPS, arg2: *mut EPSConvergedReason) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetDimensions(
        arg1: EPS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetDimensions(
        arg1: EPS,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetConverged(arg1: EPS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetEigenpair(
        arg1: EPS,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
        arg4: *mut PetscScalar,
        arg5: Vec,
        arg6: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetEigenvalue(
        arg1: EPS,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
        arg4: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetEigenvector(arg1: EPS, arg2: PetscInt, arg3: Vec, arg4: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetLeftEigenvector(arg1: EPS, arg2: PetscInt, arg3: Vec, arg4: Vec)
        -> PetscErrorCode;
}
extern "C" {
    pub fn EPSComputeError(
        arg1: EPS,
        arg2: PetscInt,
        arg3: EPSErrorType,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetInvariantSubspace(arg1: EPS, arg2: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetErrorEstimate(arg1: EPS, arg2: PetscInt, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetIterationNumber(arg1: EPS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetWhichEigenpairs(arg1: EPS, arg2: EPSWhich) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetWhichEigenpairs(arg1: EPS, arg2: *mut EPSWhich) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetTwoSided(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetTwoSided(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetTrueResidual(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetTrueResidual(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetPurify(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetPurify(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetEigenvalueComparison(
        arg1: EPS,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PetscScalar,
                arg2: PetscScalar,
                arg3: PetscScalar,
                arg4: PetscScalar,
                arg5: *mut PetscInt,
                arg6: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetArbitrarySelection(
        arg1: EPS,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PetscScalar,
                arg2: PetscScalar,
                arg3: Vec,
                arg4: Vec,
                arg5: *mut PetscScalar,
                arg6: *mut PetscScalar,
                arg7: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSIsGeneralized(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSIsHermitian(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSIsPositive(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetTrackAll(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetTrackAll(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetDeflationSpace(arg1: EPS, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetInitialSpace(arg1: EPS, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetLeftInitialSpace(arg1: EPS, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitor(
        arg1: EPS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorSet(
        arg1: EPS,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: EPS,
                arg2: PetscInt,
                arg3: PetscInt,
                arg4: *mut PetscScalar,
                arg5: *mut PetscScalar,
                arg6: *mut PetscReal,
                arg7: PetscInt,
                arg8: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorCancel(arg1: EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetMonitorContext(arg1: EPS, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorSetFromOptions(
        arg1: EPS,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_void,
        arg5: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorLGCreate(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscInt,
        arg6: *mut *const ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
        arg11: *mut PetscDrawLG,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorFirst(
        arg1: EPS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorFirstDrawLG(
        arg1: EPS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorFirstDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorAll(
        arg1: EPS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorAllDrawLG(
        arg1: EPS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorAllDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorConverged(
        arg1: EPS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorConvergedCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorConvergedDrawLG(
        arg1: EPS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorConvergedDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorConvergedDestroy(arg1: *mut *mut PetscViewerAndFormat) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetOptionsPrefix(arg1: EPS, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSAppendOptionsPrefix(arg1: EPS, arg2: *const ::std::os::raw::c_char)
        -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGetOptionsPrefix(
        arg1: EPS,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut EPSList: PetscFunctionList;
}
extern "C" {
    pub static mut EPSMonitorList: PetscFunctionList;
}
extern "C" {
    pub static mut EPSMonitorCreateList: PetscFunctionList;
}
extern "C" {
    pub static mut EPSMonitorDestroyList: PetscFunctionList;
}
extern "C" {
    pub fn EPSRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: EPS) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSMonitorRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: PetscViewerType,
        arg3: PetscViewerFormat,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: EPS,
                arg2: PetscInt,
                arg3: PetscInt,
                arg4: *mut PetscScalar,
                arg5: *mut PetscScalar,
                arg6: *mut PetscReal,
                arg7: PetscInt,
                arg8: *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PetscViewer,
                arg2: PetscViewerFormat,
                arg3: *mut ::std::os::raw::c_void,
                arg4: *mut *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg6: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut PetscViewerAndFormat) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSSetWorkVecs(arg1: EPS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSAllocateSolution(arg1: EPS, arg2: PetscInt) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EPSPowerShiftType {
    EPS_POWER_SHIFT_CONSTANT = 0,
    EPS_POWER_SHIFT_RAYLEIGH = 1,
    EPS_POWER_SHIFT_WILKINSON = 2,
}
extern "C" {
    pub static mut EPSPowerShiftTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn EPSPowerSetShiftType(arg1: EPS, arg2: EPSPowerShiftType) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSPowerGetShiftType(arg1: EPS, arg2: *mut EPSPowerShiftType) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSPowerSetNonlinear(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSPowerGetNonlinear(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSPowerSetUpdate(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSPowerGetUpdate(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSPowerSetSNES(arg1: EPS, arg2: SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSPowerGetSNES(arg1: EPS, arg2: *mut SNES) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSArnoldiSetDelayed(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSArnoldiGetDelayed(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurSetRestart(arg1: EPS, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurGetRestart(arg1: EPS, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurSetLocking(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurGetLocking(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurSetPartitions(arg1: EPS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurGetPartitions(arg1: EPS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurSetDetectZeros(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurGetDetectZeros(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurSetDimensions(
        arg1: EPS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurGetDimensions(
        arg1: EPS,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurSetSubintervals(arg1: EPS, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurGetSubintervals(arg1: EPS, arg2: *mut *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurGetInertias(
        arg1: EPS,
        arg2: *mut PetscInt,
        arg3: *mut *mut PetscReal,
        arg4: *mut *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurGetSubcommInfo(
        arg1: EPS,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurGetSubcommPairs(
        arg1: EPS,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
        arg4: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurGetSubcommMats(
        arg1: EPS,
        arg2: *mut Mat,
        arg3: *mut Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurUpdateSubcommMats(
        arg1: EPS,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: Mat,
        arg5: PetscScalar,
        arg6: PetscScalar,
        arg7: Mat,
        arg8: MatStructure,
        arg9: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSKrylovSchurGetKSP(arg1: EPS, arg2: *mut KSP) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EPSLanczosReorthogType {
    EPS_LANCZOS_REORTHOG_LOCAL = 0,
    EPS_LANCZOS_REORTHOG_FULL = 1,
    EPS_LANCZOS_REORTHOG_SELECTIVE = 2,
    EPS_LANCZOS_REORTHOG_PERIODIC = 3,
    EPS_LANCZOS_REORTHOG_PARTIAL = 4,
    EPS_LANCZOS_REORTHOG_DELAYED = 5,
}
extern "C" {
    pub static mut EPSLanczosReorthogTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn EPSLanczosSetReorthog(arg1: EPS, arg2: EPSLanczosReorthogType) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSLanczosGetReorthog(arg1: EPS, arg2: *mut EPSLanczosReorthogType) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EPSPRIMMEMethod {
    EPS_PRIMME_DYNAMIC = 1,
    EPS_PRIMME_DEFAULT_MIN_TIME = 2,
    EPS_PRIMME_DEFAULT_MIN_MATVECS = 3,
    EPS_PRIMME_ARNOLDI = 4,
    EPS_PRIMME_GD = 5,
    EPS_PRIMME_GD_PLUSK = 6,
    EPS_PRIMME_GD_OLSEN_PLUSK = 7,
    EPS_PRIMME_JD_OLSEN_PLUSK = 8,
    EPS_PRIMME_RQI = 9,
    EPS_PRIMME_JDQR = 10,
    EPS_PRIMME_JDQMR = 11,
    EPS_PRIMME_JDQMR_ETOL = 12,
    EPS_PRIMME_SUBSPACE_ITERATION = 13,
    EPS_PRIMME_LOBPCG_ORTHOBASIS = 14,
    EPS_PRIMME_LOBPCG_ORTHOBASISW = 15,
}
extern "C" {
    pub static mut EPSPRIMMEMethods: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn EPSPRIMMESetBlockSize(arg1: EPS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSPRIMMEGetBlockSize(arg1: EPS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSPRIMMESetMethod(arg1: EPS, arg2: EPSPRIMMEMethod) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSPRIMMEGetMethod(arg1: EPS, arg2: *mut EPSPRIMMEMethod) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGDSetKrylovStart(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGDGetKrylovStart(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGDSetBlockSize(arg1: EPS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGDGetBlockSize(arg1: EPS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGDSetRestart(arg1: EPS, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGDGetRestart(arg1: EPS, arg2: *mut PetscInt, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGDSetInitialSize(arg1: EPS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGDGetInitialSize(arg1: EPS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGDSetBOrth(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGDGetBOrth(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGDSetDoubleExpansion(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSGDGetDoubleExpansion(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSJDSetKrylovStart(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSJDGetKrylovStart(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSJDSetBlockSize(arg1: EPS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSJDGetBlockSize(arg1: EPS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSJDSetRestart(arg1: EPS, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSJDGetRestart(arg1: EPS, arg2: *mut PetscInt, arg3: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSJDSetInitialSize(arg1: EPS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSJDGetInitialSize(arg1: EPS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSJDSetFix(arg1: EPS, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSJDGetFix(arg1: EPS, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSJDSetConstCorrectionTol(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSJDGetConstCorrectionTol(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSJDSetBOrth(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSJDGetBOrth(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSRQCGSetReset(arg1: EPS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSRQCGGetReset(arg1: EPS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSLOBPCGSetBlockSize(arg1: EPS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSLOBPCGGetBlockSize(arg1: EPS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSLOBPCGSetRestart(arg1: EPS, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSLOBPCGGetRestart(arg1: EPS, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSLOBPCGSetLocking(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSLOBPCGGetLocking(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EPSCISSQuadRule {
    EPS_CISS_QUADRULE_TRAPEZOIDAL = 1,
    EPS_CISS_QUADRULE_CHEBYSHEV = 2,
}
extern "C" {
    pub static mut EPSCISSQuadRules: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EPSCISSExtraction {
    EPS_CISS_EXTRACTION_RITZ = 0,
    EPS_CISS_EXTRACTION_HANKEL = 1,
}
extern "C" {
    pub static mut EPSCISSExtractions: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn EPSCISSSetExtraction(arg1: EPS, arg2: EPSCISSExtraction) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSCISSGetExtraction(arg1: EPS, arg2: *mut EPSCISSExtraction) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSCISSSetQuadRule(arg1: EPS, arg2: EPSCISSQuadRule) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSCISSGetQuadRule(arg1: EPS, arg2: *mut EPSCISSQuadRule) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSCISSSetSizes(
        arg1: EPS,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSCISSGetSizes(
        arg1: EPS,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut PetscInt,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSCISSSetThreshold(arg1: EPS, arg2: PetscReal, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSCISSGetThreshold(
        arg1: EPS,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSCISSSetRefinement(arg1: EPS, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSCISSGetRefinement(
        arg1: EPS,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSCISSSetUseST(arg1: EPS, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSCISSGetUseST(arg1: EPS, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSCISSGetKSPs(arg1: EPS, arg2: *mut PetscInt, arg3: *mut *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSLyapIISetLME(arg1: EPS, arg2: LME) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSLyapIIGetLME(arg1: EPS, arg2: *mut LME) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSLyapIISetRanks(arg1: EPS, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSLyapIIGetRanks(arg1: EPS, arg2: *mut PetscInt, arg3: *mut PetscInt)
        -> PetscErrorCode;
}
extern "C" {
    pub fn EPSBLOPEXSetBlockSize(arg1: EPS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSBLOPEXGetBlockSize(arg1: EPS, arg2: *mut PetscInt) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EPSEVSLDOSMethod {
    EPS_EVSL_DOS_KPM = 0,
    EPS_EVSL_DOS_LANCZOS = 1,
}
extern "C" {
    pub static mut EPSEVSLDOSMethods: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EPSEVSLDamping {
    EPS_EVSL_DAMPING_NONE = 0,
    EPS_EVSL_DAMPING_JACKSON = 1,
    EPS_EVSL_DAMPING_SIGMA = 2,
}
extern "C" {
    pub static mut EPSEVSLDampings: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn EPSEVSLSetRange(arg1: EPS, arg2: PetscReal, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSEVSLGetRange(arg1: EPS, arg2: *mut PetscReal, arg3: *mut PetscReal)
        -> PetscErrorCode;
}
extern "C" {
    pub fn EPSEVSLSetSlices(arg1: EPS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSEVSLGetSlices(arg1: EPS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSEVSLSetDOSParameters(
        arg1: EPS,
        arg2: EPSEVSLDOSMethod,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSEVSLGetDOSParameters(
        arg1: EPS,
        arg2: *mut EPSEVSLDOSMethod,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSEVSLSetPolParameters(arg1: EPS, arg2: PetscInt, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSEVSLGetPolParameters(
        arg1: EPS,
        arg2: *mut PetscInt,
        arg3: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSEVSLSetDamping(arg1: EPS, arg2: EPSEVSLDamping) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSEVSLGetDamping(arg1: EPS, arg2: *mut EPSEVSLDamping) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSFEASTSetNumPoints(arg1: EPS, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn EPSFEASTGetNumPoints(arg1: EPS, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDInitializePackage() -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_SVD {
    _unused: [u8; 0],
}
pub type SVD = *mut _p_SVD;
pub type SVDType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut SVD_CLASSID: PetscClassId;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SVDProblemType {
    SVD_STANDARD = 1,
    SVD_GENERALIZED = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SVDWhich {
    SVD_LARGEST = 0,
    SVD_SMALLEST = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SVDErrorType {
    SVD_ERROR_ABSOLUTE = 0,
    SVD_ERROR_RELATIVE = 1,
}
extern "C" {
    pub static mut SVDErrorTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SVDConv {
    SVD_CONV_ABS = 0,
    SVD_CONV_REL = 1,
    SVD_CONV_NORM = 2,
    SVD_CONV_MAXIT = 3,
    SVD_CONV_USER = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SVDStop {
    SVD_STOP_BASIC = 0,
    SVD_STOP_USER = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SVDConvergedReason {
    SVD_CONVERGED_TOL = 1,
    SVD_CONVERGED_USER = 2,
    SVD_CONVERGED_MAXIT = 3,
    SVD_DIVERGED_ITS = -1,
    SVD_DIVERGED_BREAKDOWN = -2,
    SVD_CONVERGED_ITERATING = 0,
}
extern "C" {
    pub static mut SVDConvergedReasons: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SVDCreate(arg1: MPI_Comm, arg2: *mut SVD) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetBV(arg1: SVD, arg2: BV, arg3: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetBV(arg1: SVD, arg2: *mut BV, arg3: *mut BV) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetDS(arg1: SVD, arg2: DS) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetDS(arg1: SVD, arg2: *mut DS) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetType(arg1: SVD, arg2: SVDType) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetType(arg1: SVD, arg2: *mut SVDType) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetProblemType(arg1: SVD, arg2: SVDProblemType) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetProblemType(arg1: SVD, arg2: *mut SVDProblemType) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDIsGeneralized(arg1: SVD, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetOperators(arg1: SVD, arg2: Mat, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetOperators(arg1: SVD, arg2: *mut Mat, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetInitialSpaces(
        arg1: SVD,
        arg2: PetscInt,
        arg3: *mut Vec,
        arg4: PetscInt,
        arg5: *mut Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetImplicitTranspose(arg1: SVD, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetImplicitTranspose(arg1: SVD, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetDimensions(
        arg1: SVD,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetDimensions(
        arg1: SVD,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetTolerances(arg1: SVD, arg2: PetscReal, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetTolerances(arg1: SVD, arg2: *mut PetscReal, arg3: *mut PetscInt)
        -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetWhichSingularTriplets(arg1: SVD, arg2: SVDWhich) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetWhichSingularTriplets(arg1: SVD, arg2: *mut SVDWhich) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetFromOptions(arg1: SVD) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetOptionsPrefix(arg1: SVD, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDAppendOptionsPrefix(arg1: SVD, arg2: *const ::std::os::raw::c_char)
        -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetOptionsPrefix(
        arg1: SVD,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetUp(arg1: SVD) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSolve(arg1: SVD) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetIterationNumber(arg1: SVD, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetConvergenceTestFunction(
        arg1: SVD,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SVD,
                arg2: PetscReal,
                arg3: PetscReal,
                arg4: *mut PetscReal,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetConvergenceTest(arg1: SVD, arg2: SVDConv) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetConvergenceTest(arg1: SVD, arg2: *mut SVDConv) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDConvergedAbsolute(
        arg1: SVD,
        arg2: PetscReal,
        arg3: PetscReal,
        arg4: *mut PetscReal,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDConvergedRelative(
        arg1: SVD,
        arg2: PetscReal,
        arg3: PetscReal,
        arg4: *mut PetscReal,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDConvergedNorm(
        arg1: SVD,
        arg2: PetscReal,
        arg3: PetscReal,
        arg4: *mut PetscReal,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDConvergedMaxIt(
        arg1: SVD,
        arg2: PetscReal,
        arg3: PetscReal,
        arg4: *mut PetscReal,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetStoppingTestFunction(
        arg1: SVD,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SVD,
                arg2: PetscInt,
                arg3: PetscInt,
                arg4: PetscInt,
                arg5: PetscInt,
                arg6: *mut SVDConvergedReason,
                arg7: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetStoppingTest(arg1: SVD, arg2: SVDStop) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetStoppingTest(arg1: SVD, arg2: *mut SVDStop) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDStoppingBasic(
        arg1: SVD,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut SVDConvergedReason,
        arg7: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetConvergedReason(arg1: SVD, arg2: *mut SVDConvergedReason) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetConverged(arg1: SVD, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetSingularTriplet(
        arg1: SVD,
        arg2: PetscInt,
        arg3: *mut PetscReal,
        arg4: Vec,
        arg5: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDComputeError(
        arg1: SVD,
        arg2: PetscInt,
        arg3: SVDErrorType,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDView(arg1: SVD, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDViewFromOptions(
        arg1: SVD,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDErrorView(arg1: SVD, arg2: SVDErrorType, arg3: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDErrorViewFromOptions(arg1: SVD) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDConvergedReasonView(arg1: SVD, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDConvergedReasonViewFromOptions(arg1: SVD) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDValuesView(arg1: SVD, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDValuesViewFromOptions(arg1: SVD) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDVectorsView(arg1: SVD, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDVectorsViewFromOptions(arg1: SVD) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDDestroy(arg1: *mut SVD) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDReset(arg1: SVD) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetWorkVecs(arg1: SVD, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDSetTrackAll(arg1: SVD, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetTrackAll(arg1: SVD, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitor(
        arg1: SVD,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscReal,
        arg5: *mut PetscReal,
        arg6: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorSet(
        arg1: SVD,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SVD,
                arg2: PetscInt,
                arg3: PetscInt,
                arg4: *mut PetscReal,
                arg5: *mut PetscReal,
                arg6: PetscInt,
                arg7: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorCancel(arg1: SVD) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDGetMonitorContext(arg1: SVD, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorSetFromOptions(
        arg1: SVD,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_void,
        arg5: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorLGCreate(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscInt,
        arg6: *mut *const ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
        arg11: *mut PetscDrawLG,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorFirst(
        arg1: SVD,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscReal,
        arg5: *mut PetscReal,
        arg6: PetscInt,
        arg7: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorFirstDrawLG(
        arg1: SVD,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscReal,
        arg5: *mut PetscReal,
        arg6: PetscInt,
        arg7: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorFirstDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorAll(
        arg1: SVD,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscReal,
        arg5: *mut PetscReal,
        arg6: PetscInt,
        arg7: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorAllDrawLG(
        arg1: SVD,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscReal,
        arg5: *mut PetscReal,
        arg6: PetscInt,
        arg7: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorAllDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorConverged(
        arg1: SVD,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscReal,
        arg5: *mut PetscReal,
        arg6: PetscInt,
        arg7: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorConvergedCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorConvergedDrawLG(
        arg1: SVD,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscReal,
        arg5: *mut PetscReal,
        arg6: PetscInt,
        arg7: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorConvergedDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorConvergedDestroy(arg1: *mut *mut PetscViewerAndFormat) -> PetscErrorCode;
}
extern "C" {
    pub static mut SVDList: PetscFunctionList;
}
extern "C" {
    pub static mut SVDMonitorList: PetscFunctionList;
}
extern "C" {
    pub static mut SVDMonitorCreateList: PetscFunctionList;
}
extern "C" {
    pub static mut SVDMonitorDestroyList: PetscFunctionList;
}
extern "C" {
    pub fn SVDRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: SVD) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDMonitorRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: PetscViewerType,
        arg3: PetscViewerFormat,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: SVD,
                arg2: PetscInt,
                arg3: PetscInt,
                arg4: *mut PetscReal,
                arg5: *mut PetscReal,
                arg6: PetscInt,
                arg7: *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PetscViewer,
                arg2: PetscViewerFormat,
                arg3: *mut ::std::os::raw::c_void,
                arg4: *mut *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg6: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut PetscViewerAndFormat) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDAllocateSolution(arg1: SVD, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDCrossSetExplicitMatrix(arg1: SVD, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDCrossGetExplicitMatrix(arg1: SVD, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDCrossSetEPS(arg1: SVD, arg2: EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDCrossGetEPS(arg1: SVD, arg2: *mut EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDCyclicSetExplicitMatrix(arg1: SVD, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDCyclicGetExplicitMatrix(arg1: SVD, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDCyclicSetEPS(arg1: SVD, arg2: EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDCyclicGetEPS(arg1: SVD, arg2: *mut EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDLanczosSetOneSide(arg1: SVD, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDLanczosGetOneSide(arg1: SVD, arg2: *mut PetscBool) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SVDTRLanczosGBidiag {
    SVD_TRLANCZOS_GBIDIAG_SINGLE = 0,
    SVD_TRLANCZOS_GBIDIAG_UPPER = 1,
    SVD_TRLANCZOS_GBIDIAG_LOWER = 2,
}
extern "C" {
    pub static mut SVDTRLanczosGBidiags: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn SVDTRLanczosSetGBidiag(arg1: SVD, arg2: SVDTRLanczosGBidiag) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDTRLanczosGetGBidiag(arg1: SVD, arg2: *mut SVDTRLanczosGBidiag) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDTRLanczosSetOneSide(arg1: SVD, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDTRLanczosGetOneSide(arg1: SVD, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDTRLanczosSetKSP(arg1: SVD, arg2: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDTRLanczosGetKSP(arg1: SVD, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDTRLanczosSetRestart(arg1: SVD, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDTRLanczosGetRestart(arg1: SVD, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDTRLanczosSetLocking(arg1: SVD, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDTRLanczosGetLocking(arg1: SVD, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDTRLanczosSetExplicitMatrix(arg1: SVD, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDTRLanczosGetExplicitMatrix(arg1: SVD, arg2: *mut PetscBool) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SVDPRIMMEMethod {
    SVD_PRIMME_HYBRID = 1,
    SVD_PRIMME_NORMALEQUATIONS = 2,
    SVD_PRIMME_AUGMENTED = 3,
}
extern "C" {
    pub static mut SVDPRIMMEMethods: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn SVDPRIMMESetBlockSize(arg1: SVD, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDPRIMMEGetBlockSize(arg1: SVD, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDPRIMMESetMethod(arg1: SVD, arg2: SVDPRIMMEMethod) -> PetscErrorCode;
}
extern "C" {
    pub fn SVDPRIMMEGetMethod(arg1: SVD, arg2: *mut SVDPRIMMEMethod) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPInitializePackage() -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_PEP {
    _unused: [u8; 0],
}
pub type PEP = *mut _p_PEP;
pub type PEPType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut PEP_CLASSID: PetscClassId;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PEPProblemType {
    PEP_GENERAL = 1,
    PEP_HERMITIAN = 2,
    PEP_HYPERBOLIC = 3,
    PEP_GYROSCOPIC = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PEPWhich {
    PEP_LARGEST_MAGNITUDE = 1,
    PEP_SMALLEST_MAGNITUDE = 2,
    PEP_LARGEST_REAL = 3,
    PEP_SMALLEST_REAL = 4,
    PEP_LARGEST_IMAGINARY = 5,
    PEP_SMALLEST_IMAGINARY = 6,
    PEP_TARGET_MAGNITUDE = 7,
    PEP_TARGET_REAL = 8,
    PEP_TARGET_IMAGINARY = 9,
    PEP_ALL = 10,
    PEP_WHICH_USER = 11,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PEPBasis {
    PEP_BASIS_MONOMIAL = 0,
    PEP_BASIS_CHEBYSHEV1 = 1,
    PEP_BASIS_CHEBYSHEV2 = 2,
    PEP_BASIS_LEGENDRE = 3,
    PEP_BASIS_LAGUERRE = 4,
    PEP_BASIS_HERMITE = 5,
}
extern "C" {
    pub static mut PEPBasisTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PEPScale {
    PEP_SCALE_NONE = 0,
    PEP_SCALE_SCALAR = 1,
    PEP_SCALE_DIAGONAL = 2,
    PEP_SCALE_BOTH = 3,
}
extern "C" {
    pub static mut PEPScaleTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PEPRefine {
    PEP_REFINE_NONE = 0,
    PEP_REFINE_SIMPLE = 1,
    PEP_REFINE_MULTIPLE = 2,
}
extern "C" {
    pub static mut PEPRefineTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PEPRefineScheme {
    PEP_REFINE_SCHEME_SCHUR = 1,
    PEP_REFINE_SCHEME_MBE = 2,
    PEP_REFINE_SCHEME_EXPLICIT = 3,
}
extern "C" {
    pub static mut PEPRefineSchemes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PEPExtract {
    PEP_EXTRACT_NONE = 1,
    PEP_EXTRACT_NORM = 2,
    PEP_EXTRACT_RESIDUAL = 3,
    PEP_EXTRACT_STRUCTURED = 4,
}
extern "C" {
    pub static mut PEPExtractTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PEPErrorType {
    PEP_ERROR_ABSOLUTE = 0,
    PEP_ERROR_RELATIVE = 1,
    PEP_ERROR_BACKWARD = 2,
}
extern "C" {
    pub static mut PEPErrorTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PEPConv {
    PEP_CONV_ABS = 0,
    PEP_CONV_REL = 1,
    PEP_CONV_NORM = 2,
    PEP_CONV_USER = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PEPStop {
    PEP_STOP_BASIC = 0,
    PEP_STOP_USER = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PEPConvergedReason {
    PEP_CONVERGED_TOL = 1,
    PEP_CONVERGED_USER = 2,
    PEP_DIVERGED_ITS = -1,
    PEP_DIVERGED_BREAKDOWN = -2,
    PEP_DIVERGED_SYMMETRY_LOST = -3,
    PEP_CONVERGED_ITERATING = 0,
}
extern "C" {
    pub static mut PEPConvergedReasons: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn PEPCreate(arg1: MPI_Comm, arg2: *mut PEP) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPDestroy(arg1: *mut PEP) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPReset(arg1: PEP) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetType(arg1: PEP, arg2: PEPType) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetType(arg1: PEP, arg2: *mut PEPType) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetProblemType(arg1: PEP, arg2: PEPProblemType) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetProblemType(arg1: PEP, arg2: *mut PEPProblemType) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetOperators(arg1: PEP, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetOperators(arg1: PEP, arg2: PetscInt, arg3: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetNumMatrices(arg1: PEP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetTarget(arg1: PEP, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetTarget(arg1: PEP, arg2: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetInterval(arg1: PEP, arg2: PetscReal, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetInterval(arg1: PEP, arg2: *mut PetscReal, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetFromOptions(arg1: PEP) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetUp(arg1: PEP) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSolve(arg1: PEP) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPView(arg1: PEP, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPViewFromOptions(
        arg1: PEP,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPErrorView(arg1: PEP, arg2: PEPErrorType, arg3: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPErrorViewFromOptions(arg1: PEP) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPConvergedReasonView(arg1: PEP, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPConvergedReasonViewFromOptions(arg1: PEP) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPValuesView(arg1: PEP, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPValuesViewFromOptions(arg1: PEP) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPVectorsView(arg1: PEP, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPVectorsViewFromOptions(arg1: PEP) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetBV(arg1: PEP, arg2: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetBV(arg1: PEP, arg2: *mut BV) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetRG(arg1: PEP, arg2: RG) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetRG(arg1: PEP, arg2: *mut RG) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetDS(arg1: PEP, arg2: DS) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetDS(arg1: PEP, arg2: *mut DS) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetST(arg1: PEP, arg2: ST) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetST(arg1: PEP, arg2: *mut ST) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPRefineGetKSP(arg1: PEP, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetTolerances(arg1: PEP, arg2: PetscReal, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetTolerances(arg1: PEP, arg2: *mut PetscReal, arg3: *mut PetscInt)
        -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetConvergenceTestFunction(
        arg1: PEP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PEP,
                arg2: PetscScalar,
                arg3: PetscScalar,
                arg4: PetscReal,
                arg5: *mut PetscReal,
                arg6: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetConvergenceTest(arg1: PEP, arg2: PEPConv) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetConvergenceTest(arg1: PEP, arg2: *mut PEPConv) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPConvergedAbsolute(
        arg1: PEP,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscReal,
        arg5: *mut PetscReal,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPConvergedRelative(
        arg1: PEP,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscReal,
        arg5: *mut PetscReal,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPConvergedNorm(
        arg1: PEP,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscReal,
        arg5: *mut PetscReal,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetStoppingTestFunction(
        arg1: PEP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PEP,
                arg2: PetscInt,
                arg3: PetscInt,
                arg4: PetscInt,
                arg5: PetscInt,
                arg6: *mut PEPConvergedReason,
                arg7: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetStoppingTest(arg1: PEP, arg2: PEPStop) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetStoppingTest(arg1: PEP, arg2: *mut PEPStop) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPStoppingBasic(
        arg1: PEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut PEPConvergedReason,
        arg7: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetConvergedReason(arg1: PEP, arg2: *mut PEPConvergedReason) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetDimensions(
        arg1: PEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetDimensions(
        arg1: PEP,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetScale(
        arg1: PEP,
        arg2: PEPScale,
        arg3: PetscReal,
        arg4: Vec,
        arg5: Vec,
        arg6: PetscInt,
        arg7: PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetScale(
        arg1: PEP,
        arg2: *mut PEPScale,
        arg3: *mut PetscReal,
        arg4: *mut Vec,
        arg5: *mut Vec,
        arg6: *mut PetscInt,
        arg7: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetRefine(
        arg1: PEP,
        arg2: PEPRefine,
        arg3: PetscInt,
        arg4: PetscReal,
        arg5: PetscInt,
        arg6: PEPRefineScheme,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetRefine(
        arg1: PEP,
        arg2: *mut PEPRefine,
        arg3: *mut PetscInt,
        arg4: *mut PetscReal,
        arg5: *mut PetscInt,
        arg6: *mut PEPRefineScheme,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetExtract(arg1: PEP, arg2: PEPExtract) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetExtract(arg1: PEP, arg2: *mut PEPExtract) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetBasis(arg1: PEP, arg2: PEPBasis) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetBasis(arg1: PEP, arg2: *mut PEPBasis) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetConverged(arg1: PEP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetEigenpair(
        arg1: PEP,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
        arg4: *mut PetscScalar,
        arg5: Vec,
        arg6: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPComputeError(
        arg1: PEP,
        arg2: PetscInt,
        arg3: PEPErrorType,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetErrorEstimate(arg1: PEP, arg2: PetscInt, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetIterationNumber(arg1: PEP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetInitialSpace(arg1: PEP, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetWhichEigenpairs(arg1: PEP, arg2: PEPWhich) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetWhichEigenpairs(arg1: PEP, arg2: *mut PEPWhich) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetEigenvalueComparison(
        arg1: PEP,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PetscScalar,
                arg2: PetscScalar,
                arg3: PetscScalar,
                arg4: PetscScalar,
                arg5: *mut PetscInt,
                arg6: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetTrackAll(arg1: PEP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetTrackAll(arg1: PEP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitor(
        arg1: PEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorSet(
        arg1: PEP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PEP,
                arg2: PetscInt,
                arg3: PetscInt,
                arg4: *mut PetscScalar,
                arg5: *mut PetscScalar,
                arg6: *mut PetscReal,
                arg7: PetscInt,
                arg8: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorCancel(arg1: PEP) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetMonitorContext(arg1: PEP, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorSetFromOptions(
        arg1: PEP,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_void,
        arg5: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorLGCreate(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscInt,
        arg6: *mut *const ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
        arg11: *mut PetscDrawLG,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorFirst(
        arg1: PEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorFirstDrawLG(
        arg1: PEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorFirstDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorAll(
        arg1: PEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorAllDrawLG(
        arg1: PEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorAllDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorConverged(
        arg1: PEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorConvergedCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorConvergedDrawLG(
        arg1: PEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorConvergedDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorConvergedDestroy(arg1: *mut *mut PetscViewerAndFormat) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetOptionsPrefix(arg1: PEP, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPAppendOptionsPrefix(arg1: PEP, arg2: *const ::std::os::raw::c_char)
        -> PetscErrorCode;
}
extern "C" {
    pub fn PEPGetOptionsPrefix(
        arg1: PEP,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut PEPList: PetscFunctionList;
}
extern "C" {
    pub static mut PEPMonitorList: PetscFunctionList;
}
extern "C" {
    pub static mut PEPMonitorCreateList: PetscFunctionList;
}
extern "C" {
    pub static mut PEPMonitorDestroyList: PetscFunctionList;
}
extern "C" {
    pub fn PEPRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: PEP) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPMonitorRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: PetscViewerType,
        arg3: PetscViewerFormat,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PEP,
                arg2: PetscInt,
                arg3: PetscInt,
                arg4: *mut PetscScalar,
                arg5: *mut PetscScalar,
                arg6: *mut PetscReal,
                arg7: PetscInt,
                arg8: *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PetscViewer,
                arg2: PetscViewerFormat,
                arg3: *mut ::std::os::raw::c_void,
                arg4: *mut *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg6: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut PetscViewerAndFormat) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSetWorkVecs(arg1: PEP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPAllocateSolution(arg1: PEP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPLinearSetLinearization(arg1: PEP, arg2: PetscReal, arg3: PetscReal)
        -> PetscErrorCode;
}
extern "C" {
    pub fn PEPLinearGetLinearization(
        arg1: PEP,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPLinearSetExplicitMatrix(arg1: PEP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPLinearGetExplicitMatrix(arg1: PEP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPLinearSetEPS(arg1: PEP, arg2: EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPLinearGetEPS(arg1: PEP, arg2: *mut EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPQArnoldiSetRestart(arg1: PEP, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPQArnoldiGetRestart(arg1: PEP, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPQArnoldiSetLocking(arg1: PEP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPQArnoldiGetLocking(arg1: PEP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPTOARSetRestart(arg1: PEP, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPTOARGetRestart(arg1: PEP, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPTOARSetLocking(arg1: PEP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPTOARGetLocking(arg1: PEP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSTOARSetLinearization(arg1: PEP, arg2: PetscReal, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSTOARGetLinearization(
        arg1: PEP,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSTOARSetLocking(arg1: PEP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSTOARGetLocking(arg1: PEP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSTOARSetDetectZeros(arg1: PEP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSTOARGetDetectZeros(arg1: PEP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSTOARGetInertias(
        arg1: PEP,
        arg2: *mut PetscInt,
        arg3: *mut *mut PetscReal,
        arg4: *mut *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSTOARSetDimensions(
        arg1: PEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSTOARGetDimensions(
        arg1: PEP,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSTOARSetCheckEigenvalueType(arg1: PEP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPSTOARGetCheckEigenvalueType(arg1: PEP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPCheckDefiniteQEP(
        arg1: PEP,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
    ) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PEPJDProjection {
    PEP_JD_PROJECTION_HARMONIC = 0,
    PEP_JD_PROJECTION_ORTHOGONAL = 1,
}
extern "C" {
    pub static mut PEPJDProjectionTypes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn PEPJDSetRestart(arg1: PEP, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPJDGetRestart(arg1: PEP, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPJDSetFix(arg1: PEP, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPJDGetFix(arg1: PEP, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPJDSetReusePreconditioner(arg1: PEP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPJDGetReusePreconditioner(arg1: PEP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPJDSetMinimalityIndex(arg1: PEP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPJDGetMinimalityIndex(arg1: PEP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPJDSetProjection(arg1: PEP, arg2: PEPJDProjection) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPJDGetProjection(arg1: PEP, arg2: *mut PEPJDProjection) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PEPCISSExtraction {
    PEP_CISS_EXTRACTION_RITZ = 0,
    PEP_CISS_EXTRACTION_HANKEL = 1,
    PEP_CISS_EXTRACTION_CAA = 2,
}
extern "C" {
    pub static mut PEPCISSExtractions: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn PEPCISSSetExtraction(arg1: PEP, arg2: PEPCISSExtraction) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPCISSGetExtraction(arg1: PEP, arg2: *mut PEPCISSExtraction) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPCISSSetSizes(
        arg1: PEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPCISSGetSizes(
        arg1: PEP,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut PetscInt,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPCISSSetThreshold(arg1: PEP, arg2: PetscReal, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPCISSGetThreshold(
        arg1: PEP,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPCISSSetRefinement(arg1: PEP, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPCISSGetRefinement(
        arg1: PEP,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn PEPCISSGetKSPs(arg1: PEP, arg2: *mut PetscInt, arg3: *mut *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPInitializePackage() -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_NEP {
    _unused: [u8; 0],
}
pub type NEP = *mut _p_NEP;
pub type NEPType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut NEP_CLASSID: PetscClassId;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NEPProblemType {
    NEP_GENERAL = 1,
    NEP_RATIONAL = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NEPWhich {
    NEP_LARGEST_MAGNITUDE = 1,
    NEP_SMALLEST_MAGNITUDE = 2,
    NEP_LARGEST_REAL = 3,
    NEP_SMALLEST_REAL = 4,
    NEP_LARGEST_IMAGINARY = 5,
    NEP_SMALLEST_IMAGINARY = 6,
    NEP_TARGET_MAGNITUDE = 7,
    NEP_TARGET_REAL = 8,
    NEP_TARGET_IMAGINARY = 9,
    NEP_ALL = 10,
    NEP_WHICH_USER = 11,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NEPErrorType {
    NEP_ERROR_ABSOLUTE = 0,
    NEP_ERROR_RELATIVE = 1,
    NEP_ERROR_BACKWARD = 2,
}
extern "C" {
    pub static mut NEPErrorTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NEPRefine {
    NEP_REFINE_NONE = 0,
    NEP_REFINE_SIMPLE = 1,
    NEP_REFINE_MULTIPLE = 2,
}
extern "C" {
    pub static mut NEPRefineTypes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NEPRefineScheme {
    NEP_REFINE_SCHEME_SCHUR = 1,
    NEP_REFINE_SCHEME_MBE = 2,
    NEP_REFINE_SCHEME_EXPLICIT = 3,
}
extern "C" {
    pub static mut NEPRefineSchemes: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NEPConv {
    NEP_CONV_ABS = 0,
    NEP_CONV_REL = 1,
    NEP_CONV_NORM = 2,
    NEP_CONV_USER = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NEPStop {
    NEP_STOP_BASIC = 0,
    NEP_STOP_USER = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NEPConvergedReason {
    NEP_CONVERGED_TOL = 1,
    NEP_CONVERGED_USER = 2,
    NEP_DIVERGED_ITS = -1,
    NEP_DIVERGED_BREAKDOWN = -2,
    NEP_DIVERGED_LINEAR_SOLVE = -4,
    NEP_DIVERGED_SUBSPACE_EXHAUSTED = -5,
    NEP_CONVERGED_ITERATING = 0,
}
extern "C" {
    pub static mut NEPConvergedReasons: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn NEPCreate(arg1: MPI_Comm, arg2: *mut NEP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPDestroy(arg1: *mut NEP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPReset(arg1: NEP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetType(arg1: NEP, arg2: NEPType) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetType(arg1: NEP, arg2: *mut NEPType) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetProblemType(arg1: NEP, arg2: NEPProblemType) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetProblemType(arg1: NEP, arg2: *mut NEPProblemType) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetTarget(arg1: NEP, arg2: PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetTarget(arg1: NEP, arg2: *mut PetscScalar) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetFromOptions(arg1: NEP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetUp(arg1: NEP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSolve(arg1: NEP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPView(arg1: NEP, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPViewFromOptions(
        arg1: NEP,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPErrorView(arg1: NEP, arg2: NEPErrorType, arg3: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPErrorViewFromOptions(arg1: NEP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPConvergedReasonView(arg1: NEP, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPConvergedReasonViewFromOptions(arg1: NEP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPValuesView(arg1: NEP, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPValuesViewFromOptions(arg1: NEP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPVectorsView(arg1: NEP, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPVectorsViewFromOptions(arg1: NEP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetFunction(
        arg1: NEP,
        arg2: Mat,
        arg3: Mat,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: NEP,
                arg2: PetscScalar,
                arg3: Mat,
                arg4: Mat,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg5: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetFunction(
        arg1: NEP,
        arg2: *mut Mat,
        arg3: *mut Mat,
        arg4: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: NEP,
                arg2: PetscScalar,
                arg3: Mat,
                arg4: Mat,
                arg5: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg5: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetJacobian(
        arg1: NEP,
        arg2: Mat,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: NEP,
                arg2: PetscScalar,
                arg3: Mat,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetJacobian(
        arg1: NEP,
        arg2: *mut Mat,
        arg3: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: NEP,
                arg2: PetscScalar,
                arg3: Mat,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg4: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetSplitOperator(
        arg1: NEP,
        arg2: PetscInt,
        arg3: *mut Mat,
        arg4: *mut FN,
        arg5: MatStructure,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetSplitOperatorTerm(
        arg1: NEP,
        arg2: PetscInt,
        arg3: *mut Mat,
        arg4: *mut FN,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetSplitOperatorInfo(
        arg1: NEP,
        arg2: *mut PetscInt,
        arg3: *mut MatStructure,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetBV(arg1: NEP, arg2: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetBV(arg1: NEP, arg2: *mut BV) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetRG(arg1: NEP, arg2: RG) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetRG(arg1: NEP, arg2: *mut RG) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetDS(arg1: NEP, arg2: DS) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetDS(arg1: NEP, arg2: *mut DS) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPRefineGetKSP(arg1: NEP, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetTolerances(arg1: NEP, arg2: PetscReal, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetTolerances(arg1: NEP, arg2: *mut PetscReal, arg3: *mut PetscInt)
        -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetConvergenceTestFunction(
        arg1: NEP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: NEP,
                arg2: PetscScalar,
                arg3: PetscScalar,
                arg4: PetscReal,
                arg5: *mut PetscReal,
                arg6: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetConvergenceTest(arg1: NEP, arg2: NEPConv) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetConvergenceTest(arg1: NEP, arg2: *mut NEPConv) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPConvergedAbsolute(
        arg1: NEP,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscReal,
        arg5: *mut PetscReal,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPConvergedRelative(
        arg1: NEP,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscReal,
        arg5: *mut PetscReal,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPConvergedNorm(
        arg1: NEP,
        arg2: PetscScalar,
        arg3: PetscScalar,
        arg4: PetscReal,
        arg5: *mut PetscReal,
        arg6: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetStoppingTestFunction(
        arg1: NEP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: NEP,
                arg2: PetscInt,
                arg3: PetscInt,
                arg4: PetscInt,
                arg5: PetscInt,
                arg6: *mut NEPConvergedReason,
                arg7: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetStoppingTest(arg1: NEP, arg2: NEPStop) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetStoppingTest(arg1: NEP, arg2: *mut NEPStop) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPStoppingBasic(
        arg1: NEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: *mut NEPConvergedReason,
        arg7: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetDimensions(
        arg1: NEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetDimensions(
        arg1: NEP,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetRefine(
        arg1: NEP,
        arg2: NEPRefine,
        arg3: PetscInt,
        arg4: PetscReal,
        arg5: PetscInt,
        arg6: NEPRefineScheme,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetRefine(
        arg1: NEP,
        arg2: *mut NEPRefine,
        arg3: *mut PetscInt,
        arg4: *mut PetscReal,
        arg5: *mut PetscInt,
        arg6: *mut NEPRefineScheme,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetConverged(arg1: NEP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetEigenpair(
        arg1: NEP,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
        arg4: *mut PetscScalar,
        arg5: Vec,
        arg6: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetLeftEigenvector(arg1: NEP, arg2: PetscInt, arg3: Vec, arg4: Vec)
        -> PetscErrorCode;
}
extern "C" {
    pub fn NEPComputeError(
        arg1: NEP,
        arg2: PetscInt,
        arg3: NEPErrorType,
        arg4: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetErrorEstimate(arg1: NEP, arg2: PetscInt, arg3: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPComputeFunction(arg1: NEP, arg2: PetscScalar, arg3: Mat, arg4: Mat)
        -> PetscErrorCode;
}
extern "C" {
    pub fn NEPComputeJacobian(arg1: NEP, arg2: PetscScalar, arg3: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPApplyFunction(
        arg1: NEP,
        arg2: PetscScalar,
        arg3: Vec,
        arg4: Vec,
        arg5: Vec,
        arg6: Mat,
        arg7: Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPApplyAdjoint(
        arg1: NEP,
        arg2: PetscScalar,
        arg3: Vec,
        arg4: Vec,
        arg5: Vec,
        arg6: Mat,
        arg7: Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPApplyJacobian(
        arg1: NEP,
        arg2: PetscScalar,
        arg3: Vec,
        arg4: Vec,
        arg5: Vec,
        arg6: Mat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPProjectOperator(arg1: NEP, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetIterationNumber(arg1: NEP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetInitialSpace(arg1: NEP, arg2: PetscInt, arg3: *mut Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetWhichEigenpairs(arg1: NEP, arg2: NEPWhich) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetWhichEigenpairs(arg1: NEP, arg2: *mut NEPWhich) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetTwoSided(arg1: NEP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetTwoSided(arg1: NEP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPApplyResolvent(
        arg1: NEP,
        arg2: RG,
        arg3: PetscScalar,
        arg4: Vec,
        arg5: Vec,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetEigenvalueComparison(
        arg1: NEP,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PetscScalar,
                arg2: PetscScalar,
                arg3: PetscScalar,
                arg4: PetscScalar,
                arg5: *mut PetscInt,
                arg6: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg2: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetTrackAll(arg1: NEP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetTrackAll(arg1: NEP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetConvergedReason(arg1: NEP, arg2: *mut NEPConvergedReason) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitor(
        arg1: NEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorSet(
        arg1: NEP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: NEP,
                arg2: PetscInt,
                arg3: PetscInt,
                arg4: *mut PetscScalar,
                arg5: *mut PetscScalar,
                arg6: *mut PetscReal,
                arg7: PetscInt,
                arg8: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorCancel(arg1: NEP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetMonitorContext(arg1: NEP, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorSetFromOptions(
        arg1: NEP,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_void,
        arg5: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorLGCreate(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscInt,
        arg6: *mut *const ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
        arg11: *mut PetscDrawLG,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorFirst(
        arg1: NEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorFirstDrawLG(
        arg1: NEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorFirstDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorAll(
        arg1: NEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorAllDrawLG(
        arg1: NEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorAllDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorConverged(
        arg1: NEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorConvergedCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorConvergedDrawLG(
        arg1: NEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: *mut PetscScalar,
        arg5: *mut PetscScalar,
        arg6: *mut PetscReal,
        arg7: PetscInt,
        arg8: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorConvergedDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorConvergedDestroy(arg1: *mut *mut PetscViewerAndFormat) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetOptionsPrefix(arg1: NEP, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPAppendOptionsPrefix(arg1: NEP, arg2: *const ::std::os::raw::c_char)
        -> PetscErrorCode;
}
extern "C" {
    pub fn NEPGetOptionsPrefix(
        arg1: NEP,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub static mut NEPList: PetscFunctionList;
}
extern "C" {
    pub static mut NEPMonitorList: PetscFunctionList;
}
extern "C" {
    pub static mut NEPMonitorCreateList: PetscFunctionList;
}
extern "C" {
    pub static mut NEPMonitorDestroyList: PetscFunctionList;
}
extern "C" {
    pub fn NEPRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: NEP) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPMonitorRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: PetscViewerType,
        arg3: PetscViewerFormat,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: NEP,
                arg2: PetscInt,
                arg3: PetscInt,
                arg4: *mut PetscScalar,
                arg5: *mut PetscScalar,
                arg6: *mut PetscReal,
                arg7: PetscInt,
                arg8: *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PetscViewer,
                arg2: PetscViewerFormat,
                arg3: *mut ::std::os::raw::c_void,
                arg4: *mut *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg6: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut PetscViewerAndFormat) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSetWorkVecs(arg1: NEP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPAllocateSolution(arg1: NEP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPRIISetMaximumIterations(arg1: NEP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPRIIGetMaximumIterations(arg1: NEP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPRIISetLagPreconditioner(arg1: NEP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPRIIGetLagPreconditioner(arg1: NEP, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPRIISetConstCorrectionTol(arg1: NEP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPRIIGetConstCorrectionTol(arg1: NEP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPRIISetHermitian(arg1: NEP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPRIIGetHermitian(arg1: NEP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPRIISetDeflationThreshold(arg1: NEP, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPRIIGetDeflationThreshold(arg1: NEP, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPRIISetKSP(arg1: NEP, arg2: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPRIIGetKSP(arg1: NEP, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSLPSetDeflationThreshold(arg1: NEP, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSLPGetDeflationThreshold(arg1: NEP, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSLPSetEPS(arg1: NEP, arg2: EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSLPGetEPS(arg1: NEP, arg2: *mut EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSLPSetEPSLeft(arg1: NEP, arg2: EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSLPGetEPSLeft(arg1: NEP, arg2: *mut EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSLPSetKSP(arg1: NEP, arg2: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPSLPGetKSP(arg1: NEP, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNArnoldiSetKSP(arg1: NEP, arg2: KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNArnoldiGetKSP(arg1: NEP, arg2: *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNArnoldiSetLagPreconditioner(arg1: NEP, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNArnoldiGetLagPreconditioner(arg1: NEP, arg2: *mut PetscInt) -> PetscErrorCode;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NEPCISSExtraction {
    NEP_CISS_EXTRACTION_RITZ = 0,
    NEP_CISS_EXTRACTION_HANKEL = 1,
    NEP_CISS_EXTRACTION_CAA = 2,
}
extern "C" {
    pub static mut NEPCISSExtractions: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn NEPCISSSetExtraction(arg1: NEP, arg2: NEPCISSExtraction) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPCISSGetExtraction(arg1: NEP, arg2: *mut NEPCISSExtraction) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPCISSSetSizes(
        arg1: NEP,
        arg2: PetscInt,
        arg3: PetscInt,
        arg4: PetscInt,
        arg5: PetscInt,
        arg6: PetscInt,
        arg7: PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPCISSGetSizes(
        arg1: NEP,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
        arg4: *mut PetscInt,
        arg5: *mut PetscInt,
        arg6: *mut PetscInt,
        arg7: *mut PetscBool,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPCISSSetThreshold(arg1: NEP, arg2: PetscReal, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPCISSGetThreshold(
        arg1: NEP,
        arg2: *mut PetscReal,
        arg3: *mut PetscReal,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPCISSSetRefinement(arg1: NEP, arg2: PetscInt, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPCISSGetRefinement(
        arg1: NEP,
        arg2: *mut PetscInt,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPCISSGetKSPs(arg1: NEP, arg2: *mut PetscInt, arg3: *mut *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPInterpolSetPEP(arg1: NEP, arg2: PEP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPInterpolGetPEP(arg1: NEP, arg2: *mut PEP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPInterpolSetInterpolation(
        arg1: NEP,
        arg2: PetscReal,
        arg3: PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPInterpolGetInterpolation(
        arg1: NEP,
        arg2: *mut PetscReal,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNLEIGSSetSingularitiesFunction(
        arg1: NEP,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: NEP,
                arg2: *mut PetscInt,
                arg3: *mut PetscScalar,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNLEIGSGetSingularitiesFunction(
        arg1: NEP,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: NEP,
                arg2: *mut PetscInt,
                arg3: *mut PetscScalar,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNLEIGSSetRestart(arg1: NEP, arg2: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNLEIGSGetRestart(arg1: NEP, arg2: *mut PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNLEIGSSetLocking(arg1: NEP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNLEIGSGetLocking(arg1: NEP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNLEIGSSetInterpolation(arg1: NEP, arg2: PetscReal, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNLEIGSGetInterpolation(
        arg1: NEP,
        arg2: *mut PetscReal,
        arg3: *mut PetscInt,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNLEIGSSetRKShifts(
        arg1: NEP,
        arg2: PetscInt,
        arg3: *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNLEIGSGetRKShifts(
        arg1: NEP,
        arg2: *mut PetscInt,
        arg3: *mut *mut PetscScalar,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNLEIGSGetKSPs(arg1: NEP, arg2: *mut PetscInt, arg3: *mut *mut KSP) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNLEIGSSetFullBasis(arg1: NEP, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNLEIGSGetFullBasis(arg1: NEP, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNLEIGSSetEPS(arg1: NEP, arg2: EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn NEPNLEIGSGetEPS(arg1: NEP, arg2: *mut EPS) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNInitializePackage() -> PetscErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _p_MFN {
    _unused: [u8; 0],
}
pub type MFN = *mut _p_MFN;
pub type MFNType = *const ::std::os::raw::c_char;
extern "C" {
    pub static mut MFN_CLASSID: PetscClassId;
}
extern "C" {
    pub fn MFNCreate(arg1: MPI_Comm, arg2: *mut MFN) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNDestroy(arg1: *mut MFN) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNReset(arg1: MFN) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNSetType(arg1: MFN, arg2: MFNType) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNGetType(arg1: MFN, arg2: *mut MFNType) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNSetOperator(arg1: MFN, arg2: Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNGetOperator(arg1: MFN, arg2: *mut Mat) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNSetFromOptions(arg1: MFN) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNSetUp(arg1: MFN) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNSolve(arg1: MFN, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNSolveTranspose(arg1: MFN, arg2: Vec, arg3: Vec) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNView(arg1: MFN, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNViewFromOptions(
        arg1: MFN,
        arg2: PetscObject,
        arg3: *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNConvergedReasonView(arg1: MFN, arg2: PetscViewer) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNConvergedReasonViewFromOptions(arg1: MFN) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNSetBV(arg1: MFN, arg2: BV) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNGetBV(arg1: MFN, arg2: *mut BV) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNSetFN(arg1: MFN, arg2: FN) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNGetFN(arg1: MFN, arg2: *mut FN) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNSetTolerances(arg1: MFN, arg2: PetscReal, arg3: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNGetTolerances(arg1: MFN, arg2: *mut PetscReal, arg3: *mut PetscInt)
        -> PetscErrorCode;
}
extern "C" {
    pub fn MFNSetDimensions(arg1: MFN, arg2: PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNGetDimensions(arg1: MFN, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNGetIterationNumber(arg1: MFN, arg2: *mut PetscInt) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNSetErrorIfNotConverged(arg1: MFN, arg2: PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNGetErrorIfNotConverged(arg1: MFN, arg2: *mut PetscBool) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNMonitor(arg1: MFN, arg2: PetscInt, arg3: PetscReal) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNMonitorSet(
        arg1: MFN,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: MFN,
                arg2: PetscInt,
                arg3: PetscReal,
                arg4: *mut ::std::os::raw::c_void,
            ) -> PetscErrorCode,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_void) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNMonitorCancel(arg1: MFN) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNGetMonitorContext(arg1: MFN, arg2: *mut ::std::os::raw::c_void) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNMonitorSetFromOptions(
        arg1: MFN,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_void,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNMonitorLGCreate(
        arg1: MPI_Comm,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: PetscInt,
        arg6: *mut *const ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
        arg11: *mut PetscDrawLG,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNMonitorDefault(
        arg1: MFN,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNMonitorDefaultDrawLG(
        arg1: MFN,
        arg2: PetscInt,
        arg3: PetscReal,
        arg4: *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNMonitorDefaultDrawLGCreate(
        arg1: PetscViewer,
        arg2: PetscViewerFormat,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut PetscViewerAndFormat,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNSetOptionsPrefix(arg1: MFN, arg2: *const ::std::os::raw::c_char) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNAppendOptionsPrefix(arg1: MFN, arg2: *const ::std::os::raw::c_char)
        -> PetscErrorCode;
}
extern "C" {
    pub fn MFNGetOptionsPrefix(
        arg1: MFN,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> PetscErrorCode;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MFNConvergedReason {
    MFN_CONVERGED_TOL = 1,
    MFN_CONVERGED_ITS = 2,
    MFN_DIVERGED_ITS = -1,
    MFN_DIVERGED_BREAKDOWN = -2,
    MFN_CONVERGED_ITERATING = 0,
}
extern "C" {
    pub static mut MFNConvergedReasons: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn MFNGetConvergedReason(arg1: MFN, arg2: *mut MFNConvergedReason) -> PetscErrorCode;
}
extern "C" {
    pub static mut MFNList: PetscFunctionList;
}
extern "C" {
    pub static mut MFNMonitorList: PetscFunctionList;
}
extern "C" {
    pub static mut MFNMonitorCreateList: PetscFunctionList;
}
extern "C" {
    pub static mut MFNMonitorDestroyList: PetscFunctionList;
}
extern "C" {
    pub fn MFNRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: MFN) -> PetscErrorCode>,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNMonitorRegister(
        arg1: *const ::std::os::raw::c_char,
        arg2: PetscViewerType,
        arg3: PetscViewerFormat,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: MFN,
                arg2: PetscInt,
                arg3: PetscReal,
                arg4: *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: PetscViewer,
                arg2: PetscViewerFormat,
                arg3: *mut ::std::os::raw::c_void,
                arg4: *mut *mut PetscViewerAndFormat,
            ) -> PetscErrorCode,
        >,
        arg6: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *mut PetscViewerAndFormat) -> PetscErrorCode,
        >,
    ) -> PetscErrorCode;
}
extern "C" {
    pub fn MFNAllocateSolution(arg1: MFN, arg2: PetscInt) -> PetscErrorCode;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
